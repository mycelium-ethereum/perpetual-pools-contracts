{
    "address": "0x9C7259B98BE2f9110ed55D39e205f5CA3D3AE622",
    "abi": [
        {
            "inputs": [],
            "name": "MAX_DECIMALS",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "int256",
                            "name": "oldPrice",
                            "type": "int256"
                        },
                        {
                            "internalType": "int256",
                            "name": "newPrice",
                            "type": "int256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "longBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "shortBalance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "bytes16",
                            "name": "leverageAmount",
                            "type": "bytes16"
                        },
                        {
                            "internalType": "bytes16",
                            "name": "fee",
                            "type": "bytes16"
                        }
                    ],
                    "internalType": "struct PoolSwapLibrary.PriceChangeData",
                    "name": "priceChange",
                    "type": "tuple"
                }
            ],
            "name": "calculatePriceChange",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes16",
                    "name": "x",
                    "type": "bytes16"
                },
                {
                    "internalType": "bytes16",
                    "name": "y",
                    "type": "bytes16"
                }
            ],
            "name": "compareDecimals",
            "outputs": [
                {
                    "internalType": "int8",
                    "name": "",
                    "type": "int8"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes16",
                    "name": "ratio",
                    "type": "bytes16"
                }
            ],
            "name": "convertDecimalToUInt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "convertUIntToDecimal",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "int256",
                    "name": "a",
                    "type": "int256"
                },
                {
                    "internalType": "int256",
                    "name": "b",
                    "type": "int256"
                }
            ],
            "name": "divInt",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_wadValue",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_decimals",
                    "type": "uint256"
                }
            ],
            "name": "fromWad",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes16",
                    "name": "ratio",
                    "type": "bytes16"
                },
                {
                    "internalType": "uint256",
                    "name": "amountIn",
                    "type": "uint256"
                }
            ],
            "name": "getAmountOut",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "reward",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "shortBalance",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "longBalance",
                    "type": "uint256"
                }
            ],
            "name": "getBalancesAfterFees",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes16",
                    "name": "lossMultiplier",
                    "type": "bytes16"
                },
                {
                    "internalType": "uint256",
                    "name": "balance",
                    "type": "uint256"
                }
            ],
            "name": "getLossAmount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes16",
                    "name": "ratio",
                    "type": "bytes16"
                },
                {
                    "internalType": "int8",
                    "name": "direction",
                    "type": "int8"
                },
                {
                    "internalType": "bytes16",
                    "name": "leverage",
                    "type": "bytes16"
                }
            ],
            "name": "getLossMultiplier",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenSupply",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountIn",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "balance",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "inverseShadowbalance",
                    "type": "uint256"
                }
            ],
            "name": "getMintAmount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_numerator",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_denominator",
                    "type": "uint256"
                }
            ],
            "name": "getRatio",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "lastPriceTimestamp",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "updateInterval",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "frontRunningInterval",
                    "type": "uint256"
                }
            ],
            "name": "isBeforeFrontRunningInterval",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes16",
                    "name": "a",
                    "type": "bytes16"
                },
                {
                    "internalType": "uint256",
                    "name": "b",
                    "type": "uint256"
                }
            ],
            "name": "multiplyDecimalByUInt",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "one",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "zero",
            "outputs": [
                {
                    "internalType": "bytes16",
                    "name": "",
                    "type": "bytes16"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x3fb972c91e4cd263af23e776533b3199d5a65a1331dac004dd27f87c92014308",
    "receipt": {
        "to": null,
        "from": "0xE92470F13c49e7cC38160D01f60fD80E2f7c2c85",
        "contractAddress": "0x9C7259B98BE2f9110ed55D39e205f5CA3D3AE622",
        "transactionIndex": 0,
        "gasUsed": "3792747",
        "logsBloom": "0x
        "blockHash": "0xb64827fefc3dbd6b6a29c782625a099434880adb920d9ae568614b2f53508ff5",
        "transactionHash": "0x3fb972c91e4cd263af23e776533b3199d5a65a1331dac004dd27f87c92014308",
        "logs": [],
        "blockNumber": 11,
        "cumulativeGasUsed": "3792747",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "solcInputHash": "af6ebe07ce884d4b500c593018d7f9ea",
    "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"oldPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"newPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"longBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"leverageAmount\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"fee\",\"type\":\"bytes16\"}],\"internalType\":\"struct PoolSwapLibrary.PriceChangeData\",\"name\":\"priceChange\",\"type\":\"tuple\"}],\"name\":\"calculatePriceChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"x\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"y\",\"type\":\"bytes16\"}],\"name\":\"compareDecimals\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"ratio\",\"type\":\"bytes16\"}],\"name\":\"convertDecimalToUInt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertUIntToDecimal\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"divInt\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wadValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fromWad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"ratio\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longBalance\",\"type\":\"uint256\"}],\"name\":\"getBalancesAfterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"lossMultiplier\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getLossAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"ratio\",\"type\":\"bytes16\"},{\"internalType\":\"int8\",\"name\":\"direction\",\"type\":\"int8\"},{\"internalType\":\"bytes16\",\"name\":\"leverage\",\"type\":\"bytes16\"}],\"name\":\"getLossMultiplier\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inverseShadowbalance\",\"type\":\"uint256\"}],\"name\":\"getMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastPriceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frontRunningInterval\",\"type\":\"uint256\"}],\"name\":\"isBeforeFrontRunningInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"a\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"multiplyDecimalByUInt\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zero\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculatePriceChange(PoolSwapLibrary.PriceChangeData)\":{\"details\":\"This function should be called by the LeveragedPool.\",\"params\":{\"priceChange\":\"The struct containing necessary data to calculate price change\"}},\"compareDecimals(bytes16,bytes16)\":{\"params\":{\"x\":\"The first number to compare\",\"y\":\"The second number to compare\"},\"returns\":{\"_0\":\"-1 if x < y, 0 if x = y, or 1 if x > y\"}},\"convertDecimalToUInt(bytes16)\":{\"params\":{\"ratio\":\"The value to convert\"},\"returns\":{\"_0\":\"The converted value\"}},\"convertUIntToDecimal(uint256)\":{\"params\":{\"amount\":\"The amount to convert\"},\"returns\":{\"_0\":\"The amount as a IEEE754 quadruple precision number\"}},\"divInt(int256,int256)\":{\"params\":{\"a\":\"The dividend\",\"b\":\"The divisor\"},\"returns\":{\"_0\":\"The quotient\"}},\"fromWad(uint256,uint256)\":{\"returns\":{\"_0\":\"Converted non-WAD value\"}},\"getAmountOut(bytes16,uint256)\":{\"details\":\"This is useful for getting the amount of pool tokens to mint, and the amount of quote tokens to remit when minting and burning. Can also be used to provide the user with an estimate of their commit results.\",\"params\":{\"amountIn\":\"The amount of tokens the user is providing. This can be quote tokens or pool tokens.\",\"ratio\":\"The ratio to calculate. Use the getRatio function to calculate this\"},\"returns\":{\"_0\":\"The amount of tokens to mint/remit to the user.\"}},\"getBalancesAfterFees(uint256,uint256,uint256)\":{\"details\":\"Assumes shortBalance + longBalance >= reward\",\"params\":{\"longBalance\":\"Long balance of the pool\",\"reward\":\"Amount of keeper reward\",\"shortBalance\":\"Short balance of the pool\"},\"returns\":{\"_0\":\"shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid\",\"_1\":\"longBalanceAfterFees Long balance of the pool after the keeper reward has been paid\"}},\"getLossAmount(bytes16,uint256)\":{\"params\":{\"balance\":\"The balance of the losing pool\",\"lossMultiplier\":\"The multiplier to use\"}},\"getLossMultiplier(bytes16,int8,bytes16)\":{\"params\":{\"direction\":\"The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased\",\"leverage\":\"The amount of leverage to apply\",\"ratio\":\"The ratio of new price to old price\"},\"returns\":{\"_0\":\"The multiplier\"}},\"getMintAmount(uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Commitment amount of collateral tokens going into the pool\",\"balance\":\"Balance of the pool (no. of underlying collateral tokens in pool)\",\"inverseShadowbalance\":\"Balance the shadow pool at time of mint\",\"tokenSupply\":\"Total supply of pool tokens\"},\"returns\":{\"_0\":\"Number of pool tokens to be minted\"}},\"getRatio(uint256,uint256)\":{\"details\":\"Rounds any overflow towards 0. If either parameter is zero, the ratio is 0\",\"params\":{\"_denominator\":\"The \\\"per part\\\" side of the equation. If this is zero, the ratio is zero\",\"_numerator\":\"The \\\"parts per\\\" side of the equation. If this is zero, the ratio is zero\"},\"returns\":{\"_0\":\"the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)\"}},\"isBeforeFrontRunningInterval(uint256,uint256,uint256)\":{\"details\":\"If you try to uncommit AFTER the frontRunningInterval, it should revert.\"},\"multiplyDecimalByUInt(bytes16,uint256)\":{\"params\":{\"a\":\"The first term\",\"b\":\"The second term\"},\"returns\":{\"_0\":\"The product of a*b as a decimal\"}}},\"title\":\"Library for various useful (mostly) mathematical functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculatePriceChange(PoolSwapLibrary.PriceChangeData)\":{\"notice\":\"Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other.\"},\"compareDecimals(bytes16,bytes16)\":{\"notice\":\"Compares two decimal numbers\"},\"convertDecimalToUInt(bytes16)\":{\"notice\":\"Converts a raw decimal value to a more readable uint256 value\"},\"convertUIntToDecimal(uint256)\":{\"notice\":\"Converts an integer value to a compatible decimal value\"},\"divInt(int256,int256)\":{\"notice\":\"Divides two integers\"},\"fromWad(uint256,uint256)\":{\"notice\":\"Converts from a WAD to normal value\"},\"getAmountOut(bytes16,uint256)\":{\"notice\":\"Gets the amount of tokens a user is entitled to according to the ratio\"},\"getBalancesAfterFees(uint256,uint256,uint256)\":{\"notice\":\"Gets the short and long balances after the keeper rewards have been paid out         Keeper rewards are paid proportionally to the short and long pool\"},\"getLossAmount(bytes16,uint256)\":{\"notice\":\"Calculates the amount to take from the losing pool\"},\"getLossMultiplier(bytes16,int8,bytes16)\":{\"notice\":\"Calculates the loss multiplier to apply to the losing pool. Includes the power leverage\"},\"getMintAmount(uint256,uint256,uint256,uint256)\":{\"notice\":\"Gets the number of pool tokens to be minted based on existing tokens\"},\"getRatio(uint256,uint256)\":{\"notice\":\"Calculates the ratio between two numbers\"},\"isBeforeFrontRunningInterval(uint256,uint256,uint256)\":{\"notice\":\"Returns true if the function is being called BEFORE the frontRunningInterval starts,         which is allowed for uncommitment.\"},\"multiplyDecimalByUInt(bytes16,uint256)\":{\"notice\":\"Multiplies a decimal and an unsigned integer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/PoolSwapLibrary.sol\":\"PoolSwapLibrary\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"abdk-libraries-solidity/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n  /*\\n   * 0.\\n   */\\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n  /*\\n   * -0.\\n   */\\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n  /*\\n   * +Infinity.\\n   */\\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n  /*\\n   * -Infinity.\\n   */\\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n  /*\\n   * Canonical NaN value.\\n   */\\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n  /**\\n   * Convert signed 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromInt (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 256-bit integer number\\n   * rounding towards zero.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 256-bit integer number\\n   */\\n  function toInt (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16638); // Overflow\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        uint256 result = x;\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into unsigned 256-bit integer number\\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n   * without error, because they are rounded to zero.\\n   *\\n   * @param x quadruple precision number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function toUInt (bytes16 x) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\\n\\n      require (exponent <= 16638); // Overflow\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 128.128 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from128x128 (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 128.128 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 128.128 bit fixed point number\\n   */\\n  function to128x128 (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16510); // Overflow\\n      if (exponent < 16255) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16367) result >>= 16367 - exponent;\\n      else if (exponent > 16367) result <<= exponent - 16367;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 64.64 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from64x64 (int128 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint128 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 64.64 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 64.64 bit fixed point number\\n   */\\n  function to64x64 (bytes16 x) internal pure returns (int128) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16446); // Overflow\\n      if (exponent < 16319) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16431) result >>= 16431 - exponent;\\n      else if (exponent > 16431) result <<= exponent - 16431;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x80000000000000000000000000000000);\\n        return -int128 (int256 (result)); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (int256 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert octuple precision number into quadruple precision number.\\n   *\\n   * @param x octuple precision number\\n   * @return quadruple precision number\\n   */\\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n      uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\\n      uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFFF) {\\n        if (significand > 0) return NaN;\\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      }\\n\\n      if (exponent > 278526)\\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      else if (exponent < 245649)\\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n      else if (exponent < 245761) {\\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 124;\\n        exponent -= 245760;\\n      }\\n\\n      uint128 result = uint128 (significand | exponent << 112);\\n      if (negative) result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into octuple precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return octuple precision number\\n   */\\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 245649 + msb;\\n        }\\n      } else {\\n        result <<= 124;\\n        exponent += 245760;\\n      }\\n\\n      result |= exponent << 236;\\n      if (uint128 (x) >= 0x80000000000000000000000000000000)\\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n      return bytes32 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert double precision number into quadruple precision number.\\n   *\\n   * @param x double precision number\\n   * @return quadruple precision number\\n   */\\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 exponent = uint64 (x) >> 52 & 0x7FF;\\n\\n      uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 15309 + msb;\\n        }\\n      } else {\\n        result <<= 60;\\n        exponent += 15360;\\n      }\\n\\n      result |= exponent << 112;\\n      if (x & 0x8000000000000000 > 0)\\n        result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (uint128 (result));\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into double precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return double precision number\\n   */\\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\\n    unchecked {\\n      bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\\n\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) {\\n        if (significand > 0) return 0x7FF8000000000000; // NaN\\n        else return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      }\\n\\n      if (exponent > 17406)\\n        return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      else if (exponent < 15309)\\n        return negative ?\\n            bytes8 (0x8000000000000000) : // -0\\n            bytes8 (0x0000000000000000); // 0\\n      else if (exponent < 15361) {\\n        significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 60;\\n        exponent -= 15360;\\n      }\\n\\n      uint64 result = uint64 (significand | exponent << 52);\\n      if (negative) result |= 0x8000000000000000;\\n\\n      return bytes8 (result);\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is NaN, false otherwise\\n   */\\n  function isNaN (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is positive or negative\\n   * infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is positive or negative infinity, false otherwise\\n   */\\n  function isInfinity (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \\n   *\\n   * @param x quadruple precision number\\n   * @return sign of x\\n   */\\n  function sign (bytes16 x) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      if (absoluteX == 0) return 0;\\n      else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\\n      else return 1;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n   * arguments are infinities of the same sign. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return sign (x - y)\\n   */\\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      // Not infinities of the same sign\\n      require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n      if (x == y) return 0;\\n      else {\\n        bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\\n        bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\\n\\n        if (negativeX) {\\n          if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\\n          else return -1; \\n        } else {\\n          if (negativeY) return 1;\\n          else return absoluteX > absoluteY ? int8 (1) : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n   * anything. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return true if x equals to y, false otherwise\\n   */\\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\\n    unchecked {\\n      if (x == y) {\\n        return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n          0x7FFF0000000000000000000000000000;\\n      } else return false;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Special values behave in the following way:\\n   *\\n   * NaN + x = NaN for any x.\\n   * Infinity + x = Infinity for any finite x.\\n   * -Infinity + x = -Infinity for any finite x.\\n   * Infinity + Infinity = Infinity.\\n   * -Infinity + -Infinity = -Infinity.\\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) { \\n          if (x == y) return x;\\n          else return NaN;\\n        } else return x; \\n      } else if (yExponent == 0x7FFF) return y;\\n      else {\\n        bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n        else {\\n          int256 delta = int256 (xExponent) - int256 (yExponent);\\n  \\n          if (xSign == ySign) {\\n            if (delta > 112) return x;\\n            else if (delta > 0) ySignifier >>= uint256 (delta);\\n            else if (delta < -112) return y;\\n            else if (delta < 0) {\\n              xSignifier >>= uint256 (-delta);\\n              xExponent = yExponent;\\n            }\\n  \\n            xSignifier += ySignifier;\\n  \\n            if (xSignifier >= 0x20000000000000000000000000000) {\\n              xSignifier >>= 1;\\n              xExponent += 1;\\n            }\\n  \\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else {\\n              if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n              else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  \\n              return bytes16 (uint128 (\\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                  (xExponent << 112) |\\n                  xSignifier)); \\n            }\\n          } else {\\n            if (delta > 0) {\\n              xSignifier <<= 1;\\n              xExponent -= 1;\\n            } else if (delta < 0) {\\n              ySignifier <<= 1;\\n              xExponent = yExponent - 1;\\n            }\\n\\n            if (delta > 112) ySignifier = 1;\\n            else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\\n            else if (delta < -112) xSignifier = 1;\\n            else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\\n\\n            if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n            else {\\n              xSignifier = ySignifier - xSignifier;\\n              xSign = ySign;\\n            }\\n\\n            if (xSignifier == 0)\\n              return POSITIVE_ZERO;\\n\\n            uint256 msb = mostSignificantBit (xSignifier);\\n\\n            if (msb == 113) {\\n              xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n              xExponent += 1;\\n            } else if (msb < 112) {\\n              uint256 shift = 112 - msb;\\n              if (xExponent > shift) {\\n                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                xExponent -= shift;\\n              } else {\\n                xSignifier <<= xExponent - 1;\\n                xExponent = 0;\\n              }\\n            } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else return bytes16 (uint128 (\\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                (xExponent << 112) |\\n                xSignifier));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Special values behave in the following way:\\n   *\\n   * NaN - x = NaN for any x.\\n   * Infinity - x = Infinity for any finite x.\\n   * -Infinity - x = -Infinity for any finite x.\\n   * Infinity - -Infinity = Infinity.\\n   * -Infinity - Infinity = -Infinity.\\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      return add (x, y ^ 0x80000000000000000000000000000000);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y.  Special values behave in the following way:\\n   *\\n   * NaN * x = NaN for any x.\\n   * Infinity * x = Infinity for any finite positive x.\\n   * Infinity * x = -Infinity for any finite negative x.\\n   * -Infinity * x = -Infinity for any finite positive x.\\n   * -Infinity * x = Infinity for any finite negative x.\\n   * Infinity * 0 = NaN.\\n   * -Infinity * 0 = NaN.\\n   * Infinity * Infinity = Infinity.\\n   * Infinity * -Infinity = -Infinity.\\n   * -Infinity * Infinity = -Infinity.\\n   * -Infinity * -Infinity = Infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) {\\n          if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n          else return NaN;\\n        } else {\\n          if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return x ^ y & 0x80000000000000000000000000000000;\\n        }\\n      } else if (yExponent == 0x7FFF) {\\n          if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return y ^ x & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        xSignifier *= ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        xExponent += yExponent;\\n\\n        uint256 msb =\\n          xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\\n          xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\\n          mostSignificantBit (xSignifier);\\n\\n        if (xExponent + msb < 16496) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb < 16608) { // Subnormal\\n          if (xExponent < 16496)\\n            xSignifier >>= 16496 - xExponent;\\n          else if (xExponent > 16496)\\n            xSignifier <<= xExponent - 16496;\\n          xExponent = 0;\\n        } else if (xExponent + msb > 49373) {\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else {\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n          else if (msb < 112)\\n            xSignifier <<= 112 - msb;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb - 16607;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y.  Special values behave in the following way:\\n   *\\n   * NaN / x = NaN for any x.\\n   * x / NaN = NaN for any x.\\n   * Infinity / x = Infinity for any finite non-negative x.\\n   * Infinity / x = -Infinity for any finite negative x including -0.\\n   * -Infinity / x = -Infinity for any finite non-negative x.\\n   * -Infinity / x = Infinity for any finite negative x including -0.\\n   * x / Infinity = 0 for any finite non-negative x.\\n   * x / -Infinity = -0 for any finite non-negative x.\\n   * x / Infinity = -0 for any finite non-negative x including -0.\\n   * x / -Infinity = 0 for any finite non-negative x including -0.\\n   * \\n   * Infinity / Infinity = NaN.\\n   * Infinity / -Infinity = -NaN.\\n   * -Infinity / Infinity = -NaN.\\n   * -Infinity / -Infinity = NaN.\\n   *\\n   * Division by zero behaves in the following way:\\n   *\\n   * x / 0 = Infinity for any finite positive x.\\n   * x / -0 = -Infinity for any finite positive x.\\n   * x / 0 = -Infinity for any finite negative x.\\n   * x / -0 = Infinity for any finite negative x.\\n   * 0 / 0 = NaN.\\n   * 0 / -0 = NaN.\\n   * -0 / 0 = NaN.\\n   * -0 / -0 = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) return NaN;\\n        else return x ^ y & 0x80000000000000000000000000000000;\\n      } else if (yExponent == 0x7FFF) {\\n        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) {\\n          if (xSignifier != 0) {\\n            uint shift = 226 - mostSignificantBit (xSignifier);\\n\\n            xSignifier <<= shift;\\n\\n            xExponent = 1;\\n            yExponent += shift - 114;\\n          }\\n        }\\n        else {\\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n        }\\n\\n        xSignifier = xSignifier / ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        assert (xSignifier >= 0x1000000000000000000000000000);\\n\\n        uint256 msb =\\n          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\\n          xSignifier >= 0x40000000000000000000000000000 ? 114 :\\n          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n        if (xExponent + msb > yExponent + 16497) { // Overflow\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16380  < yExponent) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\\n          if (xExponent + 16380 > yExponent)\\n            xSignifier <<= xExponent + 16380 - yExponent;\\n          else if (xExponent + 16380 < yExponent)\\n            xSignifier >>= yExponent - xExponent - 16380;\\n\\n          xExponent = 0;\\n        } else { // Normal\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb + 16269 - yExponent;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function neg (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x ^ 0x80000000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function abs (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n  }\\n\\n  /**\\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n          bool oddExponent = xExponent & 0x1 == 0;\\n          xExponent = xExponent + 16383 >> 1;\\n\\n          if (oddExponent) {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 113;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (226 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          } else {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 112;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (225 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          }\\n\\n          uint256 r = 0x10000000000000000000000000000;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n          uint256 r1 = xSignifier / r;\\n          if (r1 < r) r = r1;\\n\\n          return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n          bool resultNegative;\\n          uint256 resultExponent = 16495;\\n          uint256 resultSignifier;\\n\\n          if (xExponent >= 0x3FFF) {\\n            resultNegative = false;\\n            resultSignifier = xExponent - 0x3FFF;\\n            xSignifier <<= 15;\\n          } else {\\n            resultNegative = true;\\n            if (xSignifier >= 0x10000000000000000000000000000) {\\n              resultSignifier = 0x3FFE - xExponent;\\n              xSignifier <<= 15;\\n            } else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              resultSignifier = 16493 - msb;\\n              xSignifier <<= 127 - msb;\\n            }\\n          }\\n\\n          if (xSignifier == 0x80000000000000000000000000000000) {\\n            if (resultNegative) resultSignifier += 1;\\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\\n            resultSignifier <<= shift;\\n            resultExponent -= shift;\\n          } else {\\n            uint256 bb = resultNegative ? 1 : 0;\\n            while (resultSignifier < 0x10000000000000000000000000000) {\\n              resultSignifier <<= 1;\\n              resultExponent -= 1;\\n  \\n              xSignifier *= xSignifier;\\n              uint256 b = xSignifier >> 255;\\n              resultSignifier += b ^ bb;\\n              xSignifier >>= 127 + b;\\n            }\\n          }\\n\\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\\n              resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function ln (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n    }\\n  }\\n\\n  /**\\n   * Calculate 2^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n      else if (xExponent > 16397)\\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n      else if (xExponent < 16255)\\n        return 0x3FFF0000000000000000000000000000;\\n      else {\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        if (xExponent > 16367)\\n          xSignifier <<= xExponent - 16367;\\n        else if (xExponent < 16367)\\n          xSignifier >>= 16367 - xExponent;\\n\\n        if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\\n          return POSITIVE_ZERO;\\n\\n        if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n          return POSITIVE_INFINITY;\\n\\n        uint256 resultExponent = xSignifier >> 128;\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xNegative && xSignifier != 0) {\\n          xSignifier = ~xSignifier;\\n          resultExponent += 1;\\n        }\\n\\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\\n        if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n        if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n        if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n        if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n        if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n        if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n        if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n        if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n        if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n        if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n        if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n        if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n        if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n        if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n        if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n        if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n        if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n        if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n        if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n        if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n        if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n        if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n        if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n        if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n        if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n        if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n        if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n        if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n        if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n        if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n        if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n        if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n        if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n        if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n        if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n        if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n        if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n        if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n        if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n        if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n        if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n        if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n        if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n        if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n        if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n        if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n        if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n        if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n        if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n        if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n        if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n        if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n        if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n        if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n        if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n        if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n        if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n        if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n        if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n        if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n        if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n        if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n        if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n\\n        if (!xNegative) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent += 0x3FFF;\\n        } else if (resultExponent <= 0x3FFE) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent = 0x3FFF - resultExponent;\\n        } else {\\n          resultSignifier = resultSignifier >> resultExponent - 16367;\\n          resultExponent = 0;\\n        }\\n\\n        return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate e^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function exp (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n    }\\n  }\\n\\n  /**\\n   * Get index of the most significant non-zero bit in binary representation of\\n   * x.  Reverts if x is zero.\\n   *\\n   * @return index of the most significant non-zero bit in binary representation\\n   *         of x\\n   */\\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\\n    unchecked {\\n      require (x > 0);\\n\\n      uint256 result = 0;\\n\\n      if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\\n      if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\\n      if (x >= 0x100000000) { x >>= 32; result += 32; }\\n      if (x >= 0x10000) { x >>= 16; result += 16; }\\n      if (x >= 0x100) { x >>= 8; result += 8; }\\n      if (x >= 0x10) { x >>= 4; result += 4; }\\n      if (x >= 0x4) { x >>= 2; result += 2; }\\n      if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n      return result;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9694a9f6fcadd4fa917efa674de42a74b8fbab8d68924f771ea5cc5e1a301434\",\"license\":\"BSD-4-Clause\"},\"contracts/implementation/PoolSwapLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\n\\n/// @title Library for various useful (mostly) mathematical functions\\nlibrary PoolSwapLibrary {\\n    bytes16 public constant one = 0x3fff0000000000000000000000000000;\\n    bytes16 public constant zero = 0x00000000000000000000000000000000;\\n    uint256 public constant MAX_DECIMALS = 18;\\n\\n    struct PriceChangeData {\\n        int256 oldPrice;\\n        int256 newPrice;\\n        uint256 longBalance;\\n        uint256 shortBalance;\\n        bytes16 leverageAmount;\\n        bytes16 fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the ratio between two numbers\\n     * @dev Rounds any overflow towards 0. If either parameter is zero, the ratio is 0\\n     * @param _numerator The \\\"parts per\\\" side of the equation. If this is zero, the ratio is zero\\n     * @param _denominator The \\\"per part\\\" side of the equation. If this is zero, the ratio is zero\\n     * @return the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)\\n     */\\n    function getRatio(uint256 _numerator, uint256 _denominator) public pure returns (bytes16) {\\n        // Catch the divide by zero error.\\n        if (_denominator == 0) {\\n            return 0;\\n        }\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(_numerator), ABDKMathQuad.fromUInt(_denominator));\\n    }\\n\\n    /**\\n     * @notice Gets the short and long balances after the keeper rewards have been paid out\\n     *         Keeper rewards are paid proportionally to the short and long pool\\n     * @dev Assumes shortBalance + longBalance >= reward\\n     * @param reward Amount of keeper reward\\n     * @param shortBalance Short balance of the pool\\n     * @param longBalance Long balance of the pool\\n     * @return shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid\\n     * @return longBalanceAfterFees Long balance of the pool after the keeper reward has been paid\\n     */\\n    function getBalancesAfterFees(\\n        uint256 reward,\\n        uint256 shortBalance,\\n        uint256 longBalance\\n    ) public pure returns (uint256, uint256) {\\n        bytes16 ratioShort = getRatio(shortBalance, shortBalance + longBalance);\\n\\n        uint256 shortFees = convertDecimalToUInt(multiplyDecimalByUInt(ratioShort, reward));\\n\\n        uint256 shortBalanceAfterFees = shortBalance - shortFees;\\n        uint256 longBalanceAfterFees = longBalance - (reward - shortFees);\\n\\n        // Return shortBalance and longBalance after rewards are paid out\\n        return (shortBalanceAfterFees, longBalanceAfterFees);\\n    }\\n\\n    /**\\n     * @notice Gets the amount of tokens a user is entitled to according to the ratio\\n     * @dev This is useful for getting the amount of pool tokens to mint, and the amount of quote tokens to remit when minting and burning. Can also be used to provide the user with an estimate of their commit results.\\n     * @param ratio The ratio to calculate. Use the getRatio function to calculate this\\n     * @param amountIn The amount of tokens the user is providing. This can be quote tokens or pool tokens.\\n     * @return The amount of tokens to mint/remit to the user.\\n     */\\n    function getAmountOut(bytes16 ratio, uint256 amountIn) public pure returns (uint256) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n        if (ABDKMathQuad.cmp(ratio, 0) == 0 || ABDKMathQuad.cmp(ratio, bytes16(\\\"0x1\\\")) == 0) {\\n            return amountIn;\\n        }\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.mul(ratio, ABDKMathQuad.fromUInt(amountIn)));\\n    }\\n\\n    /**\\n     * @notice Compares two decimal numbers\\n     * @param x The first number to compare\\n     * @param y The second number to compare\\n     * @return -1 if x < y, 0 if x = y, or 1 if x > y\\n     */\\n    function compareDecimals(bytes16 x, bytes16 y) public pure returns (int8) {\\n        return ABDKMathQuad.cmp(x, y);\\n    }\\n\\n    /**\\n     * @notice Converts an integer value to a compatible decimal value\\n     * @param amount The amount to convert\\n     * @return The amount as a IEEE754 quadruple precision number\\n     */\\n    function convertUIntToDecimal(uint256 amount) external pure returns (bytes16) {\\n        return ABDKMathQuad.fromUInt(amount);\\n    }\\n\\n    /**\\n     * @notice Converts a raw decimal value to a more readable uint256 value\\n     * @param ratio The value to convert\\n     * @return The converted value\\n     */\\n    function convertDecimalToUInt(bytes16 ratio) public pure returns (uint256) {\\n        return ABDKMathQuad.toUInt(ratio);\\n    }\\n\\n    /**\\n     * @notice Multiplies a decimal and an unsigned integer\\n     * @param a The first term\\n     * @param b The second term\\n     * @return The product of a*b as a decimal\\n     */\\n    function multiplyDecimalByUInt(bytes16 a, uint256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.mul(a, ABDKMathQuad.fromUInt(b));\\n    }\\n\\n    /**\\n     * @notice Divides two integers\\n     * @param a The dividend\\n     * @param b The divisor\\n     * @return The quotient\\n     */\\n    function divInt(int256 a, int256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.div(ABDKMathQuad.fromInt(a), ABDKMathQuad.fromInt(b));\\n    }\\n\\n    /**\\n     * @notice Calculates the loss multiplier to apply to the losing pool. Includes the power leverage\\n     * @param ratio The ratio of new price to old price\\n     * @param direction The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased\\n     * @param leverage The amount of leverage to apply\\n     * @return The multiplier\\n     */\\n    function getLossMultiplier(\\n        bytes16 ratio,\\n        int8 direction,\\n        bytes16 leverage\\n    ) public pure returns (bytes16) {\\n        // If decreased:  2 ^ (leverage * log2[(1 * new/old) + [(0 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2[(new/old)])\\n        // If increased:  2 ^ (leverage * log2[(0 * new/old) + [(1 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2([1 / new/old]))\\n        //              = 2 ^ (leverage * log2([old/new]))\\n        return\\n            ABDKMathQuad.pow_2(\\n                ABDKMathQuad.mul(\\n                    leverage,\\n                    ABDKMathQuad.log_2(\\n                        ABDKMathQuad.add(\\n                            ABDKMathQuad.mul(direction < 0 ? one : zero, ratio),\\n                            ABDKMathQuad.div(ABDKMathQuad.mul(direction >= 0 ? one : zero, one), ratio)\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to take from the losing pool\\n     * @param lossMultiplier The multiplier to use\\n     * @param balance The balance of the losing pool\\n     */\\n    function getLossAmount(bytes16 lossMultiplier, uint256 balance) public pure returns (uint256) {\\n        return\\n            ABDKMathQuad.toUInt(\\n                ABDKMathQuad.mul(ABDKMathQuad.sub(one, lossMultiplier), ABDKMathQuad.fromUInt(balance))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other.\\n     * @dev This function should be called by the LeveragedPool.\\n     * @param priceChange The struct containing necessary data to calculate price change\\n     */\\n    function calculatePriceChange(PriceChangeData memory priceChange)\\n        public\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 shortBalance = priceChange.shortBalance;\\n        uint256 longBalance = priceChange.longBalance;\\n        bytes16 leverageAmount = priceChange.leverageAmount;\\n        int256 oldPrice = priceChange.oldPrice;\\n        int256 newPrice = priceChange.newPrice;\\n        bytes16 fee = priceChange.fee;\\n\\n        // Calculate fees from long and short sides\\n        uint256 longFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, longBalance));\\n        uint256 shortFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, shortBalance));\\n        uint256 totalFeeAmount = 0;\\n\\n        // fee is enforced to be < 1. Therefore, shortFeeAmount < shortBalance, and longFeeAmount < longBalance\\n        shortBalance = shortBalance - shortFeeAmount;\\n        totalFeeAmount = totalFeeAmount + shortFeeAmount;\\n        longBalance = longBalance - longFeeAmount;\\n        totalFeeAmount = totalFeeAmount + longFeeAmount;\\n\\n        // Use the ratio to determine if the price increased or decreased and therefore which direction\\n        // the funds should be transferred towards.\\n\\n        bytes16 ratio = divInt(newPrice, oldPrice);\\n        int8 direction = compareDecimals(ratio, PoolSwapLibrary.one);\\n        // Take into account the leverage\\n        bytes16 lossMultiplier = getLossMultiplier(ratio, direction, leverageAmount);\\n\\n        if (direction >= 0 && shortBalance > 0) {\\n            // Move funds from short to long pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, shortBalance);\\n            shortBalance = shortBalance - lossAmount;\\n            longBalance = longBalance + lossAmount;\\n        } else if (direction < 0 && longBalance > 0) {\\n            // Move funds from long to short pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, longBalance);\\n            shortBalance = shortBalance + lossAmount;\\n            longBalance = longBalance - lossAmount;\\n        }\\n\\n        return (longBalance, shortBalance, totalFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns true if the function is being called BEFORE the frontRunningInterval starts,\\n     *         which is allowed for uncommitment.\\n     * @dev If you try to uncommit AFTER the frontRunningInterval, it should revert.\\n     */\\n    function isBeforeFrontRunningInterval(\\n        uint256 lastPriceTimestamp,\\n        uint256 updateInterval,\\n        uint256 frontRunningInterval\\n    ) external view returns (bool) {\\n        return lastPriceTimestamp + updateInterval - frontRunningInterval > block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Gets the number of pool tokens to be minted based on existing tokens\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param inverseShadowbalance Balance the shadow pool at time of mint\\n     * @return Number of pool tokens to be minted\\n     */\\n    function getMintAmount(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 inverseShadowbalance\\n    ) external pure returns (uint256) {\\n        return\\n            getAmountOut(\\n                // ratio = (totalSupply + inverseShadowBalance) / balance\\n                getRatio(tokenSupply + inverseShadowbalance, balance),\\n                amountIn\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(uint256 _wadValue, uint256 _decimals) external pure returns (uint256) {\\n        uint256 scaler = uint256(10**(MAX_DECIMALS - _decimals));\\n        return _wadValue / scaler;\\n    }\\n}\\n\",\"keccak256\":\"0x0f48cbc49eb58245afee232308d11d892cc4e9f174beefd6e036f9807951f9d9\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x614457610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063ab41556f116100ac578063c3ff80911161007b578063c3ff809114610326578063cda8198c14610356578063cff7000114610386578063dc35bc13146103b6578063dfdbe4da146103e757610115565b8063ab41556f14610278578063aeb64d7d146102a8578063bc1b392d146102d8578063bf36f0e9146102f657610115565b8063901717d1116100e8578063901717d1146101c8578063a481c1b4146101e6578063a818c0d214610218578063aaa578b21461024857610115565b80630417cf8e1461011a5780631842c9d814610138578063202f125714610168578063422051e714610198575b600080fd5b610122610417565b60405161012f9190613f51565b60405180910390f35b610152600480360381019061014d9190613c1a565b61041c565b60405161015f9190613f16565b60405180910390f35b610182600480360381019061017d9190613ced565b610430565b60405161018f9190613efb565b60405180910390f35b6101b260048036038101906101ad9190613cad565b610454565b6040516101bf9190613efb565b60405180910390f35b6101d0610470565b6040516101dd9190613efb565b60405180910390f35b61020060048036038101906101fb9190613d2d565b610487565b60405161020f93929190613f95565b60405180910390f35b610232600480360381019061022d9190613cad565b61060f565b60405161023f9190613f51565b60405180910390f35b610262600480360381019061025d9190613dc7565b61064f565b60405161026f9190613ee0565b60405180910390f35b610292600480360381019061028d9190613e1a565b610673565b60405161029f9190613f51565b60405180910390f35b6102c260048036038101906102bd9190613bed565b61069d565b6040516102cf9190613f51565b60405180910390f35b6102e06106af565b6040516102ed9190613efb565b60405180910390f35b610310600480360381019061030b9190613d87565b6106b7565b60405161031d9190613f51565b60405180910390f35b610340600480360381019061033b9190613c5a565b6106ea565b60405161034d9190613efb565b60405180910390f35b610370600480360381019061036b9190613cad565b610799565b60405161037d9190613f51565b60405180910390f35b6103a0600480360381019061039b9190613d87565b610858565b6040516103ad9190613efb565b60405180910390f35b6103d060048036038101906103cb9190613dc7565b610891565b6040516103de929190613f6c565b60405180910390f35b61040160048036038101906103fc9190613d5a565b610900565b60405161040e9190613efb565b60405180910390f35b601281565b60006104288383610912565b905092915050565b600061044c61043e84610ba2565b61044784610ba2565b610c50565b905092915050565b60006104688361046384611119565b611197565b905092915050565b6f3fff000000000000000000000000000060801b81565b6000806000808460600151905060008560400151905060008660800151905060008760000151905060008860200151905060008960a00151905060006104d56104d08388610454565b61069d565b905060006104eb6104e6848a610454565b61069d565b9050600081896104fb91906141fa565b985081816105099190614002565b9050828861051791906141fa565b975082816105259190614002565b905060006105338688610430565b90506000610554826f3fff000000000000000000000000000060801b61041c565b9050600061056383838c6106ea565b905060008260000b12158015610579575060008c115b156105ae57600061058a828e61060f565b9050808d61059891906141fa565b9c50808c6105a69190614002565b9b50506105f3565b60008260000b1280156105c1575060008b115b156105f25760006105d2828d61060f565b9050808d6105e09190614002565b9c50808c6105ee91906141fa565b9b50505b5b8a8c859e509e509e505050505050505050505050509193909250565b60006106476106426106346f3fff000000000000000000000000000060801b8661162c565b61063d85611119565b611197565b611655565b905092915050565b60004282848661065f9190614002565b61066991906141fa565b1190509392505050565b600061069361068d83876106879190614002565b85610858565b85610799565b9050949350505050565b60006106a882611655565b9050919050565b600060801b81565b6000808260126106c791906141fa565b600a6106d391906140dc565b905080846106e19190614058565b91505092915050565b600061079061078b8361078661078161072c60008960000b1261071157600060801b610726565b6f3fff000000000000000000000000000060801b5b8a611197565b61077c61077660008b60000b121561074857600060801b61075d565b6f3fff000000000000000000000000000060801b5b6f3fff000000000000000000000000000060801b611197565b8b610c50565b611753565b611db8565b611197565b612070565b90509392505050565b60008082116107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d490613f31565b60405180910390fd5b60006107ed84600060801b610912565b60000b148061082857506000610823847f3078310000000000000000000000000000000000000000000000000000000000610912565b60000b145b1561083557819050610852565b61084f61084a8461084585611119565b611197565b611655565b90505b92915050565b60008082141561086e57600060801b905061088b565b61088861087a84611119565b61088384611119565b610c50565b90505b92915050565b60008060006108ab8585876108a69190614002565b610858565b905060006108c16108bc8389610454565b61069d565b9050600081876108d191906141fa565b9050600082896108e191906141fa565b876108ec91906141fa565b905081819550955050505050935093915050565b600061090b82611119565b9050919050565b6000806f7fffffffffffffffffffffffffffffff8460801c1690506f7fff0000000000000000000000000000816fffffffffffffffffffffffffffffffff16111561095c57600080fd5b60006f7fffffffffffffffffffffffffffffff8460801c1690506f7fff0000000000000000000000000000816fffffffffffffffffffffffffffffffff1611156109a557600080fd5b836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415806109fb57506f7fff0000000000000000000000000000826fffffffffffffffffffffffffffffffff16105b610a0457600080fd5b836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415610a3d57600092505050610b9c565b60006f800000000000000000000000000000008660801c6fffffffffffffffffffffffffffffffff161015905060006f800000000000000000000000000000008660801c6fffffffffffffffffffffffffffffffff16101590508115610b2e578015610b0257826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff1611610ad5576001610af7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b945050505050610b9c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945050505050610b9c565b8015610b41576001945050505050610b9c565b826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff1611610b92577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610b95565b60015b9450505050505b92915050565b600080821415610bb857600060801b9050610c4b565b6000808313610bca5782600003610bcc565b825b90506000610bd982613a18565b90506070811015610bf2578060700382901b9150610c06565b6070811115610c05576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791506000841215610c42576f80000000000000000000000000000000821791505b8160801b925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff821415610d0b57617fff811415610cea576f7fff800000000000000000000000000060801b92505050611113565b6f8000000000000000000000000000000060801b8416851892505050611113565b617fff811415610d8a57600060801b6dffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff191614610d63576f7fff800000000000000000000000000060801b92505050611113565b6f8000000000000000000000000000000060801b84861816600060801b1792505050611113565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff19161415610e4557600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff19161415610e0f576f7fff800000000000000000000000000060801b92505050611113565b6f8000000000000000000000000000000060801b848618166f7fff000000000000000000000000000060801b1792505050611113565b60006dffffffffffffffffffffffffffff8560801c166fffffffffffffffffffffffffffffffff1690506000821415610e815760019150610e96565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8760801c166fffffffffffffffffffffffffffffffff1690506000841415610efa5760008114610ef5576000610edc82613a18565b60e20390508082901b9150600194506072810384019350505b610f13565b60726e0100000000000000000000000000008217901b90505b818181610f2357610f22614316565b5b0490506000811415610f8e57600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff191611610f6e57600060801b610f83565b6f8000000000000000000000000000000060801b5b945050505050611113565b6d1000000000000000000000000000811015610fad57610fac6142b8565b5b60006e08000000000000000000000000000082101561100e576e040000000000000000000000000000821015611003576e020000000000000000000000000000821015610ffb576070610ffe565b60715b611006565b60725b60ff16611018565b61101782613a18565b5b90506140718401818601111561103657617fff9450600091506110d3565b83613ffc8287010110156110515760009450600091506110d2565b83613f8c82870101101561109f5783613ffc8601111561107c5783613ffc86010382901b9150611096565b83613ffc8601101561109557613ffc8585030382901c91505b5b600094506110d1565b60708111156110b2576070810382901c91505b6dffffffffffffffffffffffffffff8216915083613f8d828701010394505b5b5b81607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b60008082141561112f57600060801b9050611192565b6000829050600061113f82613a18565b90506070811015611158578060700382901b915061116c565b607081111561116b576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791508160801b925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff82141561132e57617fff8114156112bc57836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415611263576f8000000000000000000000000000000060801b8416851892505050611626565b6f8000000000000000000000000000000060801b8486186fffffffffffffffffffffffffffffffff1916141561129f5783851792505050611626565b6f7fff800000000000000000000000000060801b92505050611626565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff1916141561130d576f7fff800000000000000000000000000060801b92505050611626565b6f8000000000000000000000000000000060801b8416851892505050611626565b617fff8114156113aa57600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff19161415611389576f7fff800000000000000000000000000060801b92505050611626565b6f8000000000000000000000000000000060801b8516841892505050611626565b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff16905060008314156113e657600192506113fb565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff1690506000831415611437576001925061144c565b6e010000000000000000000000000000811790505b808202915060008214156114b957600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff19161161149957600060801b6114ae565b6f8000000000000000000000000000000060801b5b945050505050611626565b828401935060007c0200000000000000000000000000000000000000000000000000000000831015611520577c01000000000000000000000000000000000000000000000000000000008310156115185761151383613a18565b61151b565b60e05b611523565b60e15b9050614070818601101561153e5760009450600092506115e6565b6140e081860110156115825761407085101561156357846140700383901c9250611579565b61407085111561157857614070850383901b92505b5b600094506115e5565b61c0dd818601111561159c57617fff9450600092506115e4565b60708111156115b3576070810383901c92506115c7565b60708110156115c6578060700383901b92505b5b6dffffffffffffffffffffffffffff831692506140df8186010394505b5b5b82607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b600061164d836f8000000000000000000000000000000060801b8418611753565b905092915050565b600080617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050613fff81101561169e57600091505061174e565b6f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff16106116cf57600080fd5b6140fe8111156116de57600080fd5b60006e0100000000000000000000000000006dffffffffffffffffffffffffffff8560801c6fffffffffffffffffffffffffffffffff161617905061406f821015611732578161406f0381901c9050611748565b61406f8211156117475761406f820381901b90505b5b80925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff82141561182f57617fff81141561182557836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415611808578492505050611db2565b6f7fff800000000000000000000000000060801b92505050611db2565b8492505050611db2565b617fff811415611843578392505050611db2565b60006f800000000000000000000000000000008660801c6fffffffffffffffffffffffffffffffff161015905060006dffffffffffffffffffffffffffff8760801c166fffffffffffffffffffffffffffffffff16905060008414156118ac57600193506118c1565b6e010000000000000000000000000000811790505b60006f800000000000000000000000000000008760801c6fffffffffffffffffffffffffffffffff161015905060006dffffffffffffffffffffffffffff8860801c166fffffffffffffffffffffffffffffffff169050600085141561192a576001945061193f565b6e010000000000000000000000000000811790505b60008314156119a1576f8000000000000000000000000000000060801b6fffffffffffffffffffffffffffffffff1916886fffffffffffffffffffffffffffffffff19161461198e5787611994565b600060801b5b9650505050505050611db2565b6000811415611a03576f8000000000000000000000000000000060801b6fffffffffffffffffffffffffffffffff1916896fffffffffffffffffffffffffffffffff1916146119f057886119f6565b600060801b5b9650505050505050611db2565b600085870390508215158515151415611b81576070811315611a2e5789975050505050505050611db2565b6000811315611a42578082901c9150611a90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811215611a795788975050505050505050611db2565b6000811215611a8f578060000384901c93508596505b5b81840193506e0200000000000000000000000000008410611ab957600184901c93506001870196505b617fff871415611b045784611ae1576f7fff000000000000000000000000000060801b611af6565b6fffff000000000000000000000000000060801b5b975050505050505050611db2565b6e010000000000000000000000000000841015611b245760009650611b38565b6dffffffffffffffffffffffffffff841693505b83607088901b86611b4a576000611b5c565b6f800000000000000000000000000000005b6fffffffffffffffffffffffffffffffff16171760801b975050505050505050611db2565b6000811315611b9c57600184901b9350600187039650611bb4565b6000811215611bb357600182901b91506001860396505b5b6070811315611bc65760019150611c50565b6001811315611be257600180820360018403901c019150611c4f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811215611c135760019350611c4e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811215611c4d57600180826000030360018603901c0193505b5b5b5b818410611c61578184039350611c6a565b83820393508294505b6000841415611c8657600060801b975050505050505050611db2565b6000611c9185613a18565b90506071811415611cbe576dffffffffffffffffffffffffffff600186901c169450600188019750611d20565b6070811015611d0b57600081607003905080891115611cf7576dffffffffffffffffffffffffffff8187901b1695508089039850611d05565b6001890386901b9550600098505b50611d1f565b6dffffffffffffffffffffffffffff851694505b5b617fff881415611d6c5785611d48576f7fff000000000000000000000000000060801b611d5d565b6fffff000000000000000000000000000060801b5b98505050505050505050611db2565b84607089901b87611d7e576000611d90565b6f800000000000000000000000000000005b6fffffffffffffffffffffffffffffffff16171760801b985050505050505050505b92915050565b60006f800000000000000000000000000000008260801c6fffffffffffffffffffffffffffffffff161115611e02576f7fff800000000000000000000000000060801b905061206b565b6f3fff000000000000000000000000000060801b826fffffffffffffffffffffffffffffffff19161415611e3c57600060801b905061206b565b6000617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff811415611e83578291505061206b565b60006dffffffffffffffffffffffffffff8460801c166fffffffffffffffffffffffffffffffff1690506000821415611ebf5760019150611ed4565b6e010000000000000000000000000000811790505b6000811415611efa576fffff000000000000000000000000000060801b9250505061206b565b60008061406f90506000613fff8510611f245760009250613fff85039050600f84901b9350611f71565b600192506e0100000000000000000000000000008410611f515784613ffe039050600f84901b9350611f70565b6000611f5c85613a18565b90508061406d03915080607f0385901b9450505b5b6f80000000000000000000000000000000841415611fb7578215611f96576001810190505b6000611fa182613a18565b60700390508082901b9150808303925050612018565b600083611fc5576000611fc8565b60015b60ff1690505b6e01000000000000000000000000000082101561201657600182901b91506001830392508485029450600060ff86901c90508181188301925080607f0186901c955050611fce565b505b6dffffffffffffffffffffffffffff8116607083901b8461203a57600061204c565b6f800000000000000000000000000000005b6fffffffffffffffffffffffffffffffff16171760801b955050505050505b919050565b6000806f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff161190506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff16905060006dffffffffffffffffffffffffffff8560801c166fffffffffffffffffffffffffffffffff169050617fff8214801561210d575060008114155b15612130576f7fff800000000000000000000000000060801b9350505050613a13565b61400d8211156121685782612158576f7fff000000000000000000000000000060801b61215e565b600060801b5b9350505050613a13565b613f7f821015612190576f3fff000000000000000000000000000060801b9350505050613a13565b60008214156121a257600191506121b7565b6e010000000000000000000000000000811790505b613fef8211156121d057613fef820381901b90506121e6565b613fef8210156121e55781613fef0381901c90505b5b828015612204575071406e0000000000000000000000000000000081115b1561221857600060801b9350505050613a13565b821580156122375750713fffffffffffffffffffffffffffffffffff81115b1561225a576f7fff000000000000000000000000000060801b9350505050613a13565b6000608082901c90506fffffffffffffffffffffffffffffffff82169150838015612286575060008214155b1561229657811991506001810190505b60006f80000000000000000000000000000000905060006f80000000000000000000000000000000841611156122e157608070016a09e667f3bcc908b2fb1366ea957d3e8202901c90505b60006f40000000000000000000000000000000841611156123175760807001306fe0a31b7152de8d5a46305c85edec8202901c90505b60006f200000000000000000000000000000008416111561234d5760807001172b83c7d517adcdf7c8c50eb14a791f8202901c90505b60006f100000000000000000000000000000008416111561238357608070010b5586cf9890f6298b92b71842a983638202901c90505b60006f08000000000000000000000000000000841611156123b95760807001059b0d31585743ae7c548eb68ca417fd8202901c90505b60006f04000000000000000000000000000000841611156123ef576080700102c9a3e778060ee6f7caca4f7a29bde88202901c90505b60006f020000000000000000000000000000008416111561242557608070010163da9fb33356d84a66ae336dcdfa3f8202901c90505b60006f010000000000000000000000000000008416111561245b576080700100b1afa5abcbed6129ab13ec11dc95438202901c90505b60006e8000000000000000000000000000008416111561249057608070010058c86da1c09ea1ff19d294cf2f679b8202901c90505b60006e400000000000000000000000000000841611156124c55760807001002c605e2e8cec506d21bfc89a23a00f8202901c90505b60006e200000000000000000000000000000841611156124fa576080700100162f3904051fa128bca9c55c31e5df8202901c90505b60006e1000000000000000000000000000008416111561252f5760807001000b175effdc76ba38e31671ca9397258202901c90505b60006e08000000000000000000000000000084161115612564576080700100058ba01fb9f96d6cacd4b180917c3d8202901c90505b60006e0400000000000000000000000000008416111561259957608070010002c5cc37da9491d0985c348c68e7b38202901c90505b60006e020000000000000000000000000000841611156125ce5760807001000162e525ee054754457d59952920268202901c90505b60006e0100000000000000000000000000008416111561260357608070010000b17255775c040618bf4a4ade83fc8202901c90505b60006d8000000000000000000000000000841611156126375760807001000058b91b5bc9ae2eed81e9b7d4cfab8202901c90505b60006d40000000000000000000000000008416111561266b576080700100002c5c89d5ec6ca4d7c8acc017b7c98202901c90505b60006d20000000000000000000000000008416111561269f57608070010000162e43f4f831060e02d839a9d16d8202901c90505b60006d1000000000000000000000000000841611156126d3576080700100000b1721bcfc99d9f890ea069117638202901c90505b60006d08000000000000000000000000008416111561270757608070010000058b90cf1e6d97f9ca14dbcc16288202901c90505b60006d04000000000000000000000000008416111561273b5760807001000002c5c863b73f016468f6bac5ca2b8202901c90505b60006d02000000000000000000000000008416111561276f576080700100000162e430e5a18f6119e3c02282a58202901c90505b60006d0100000000000000000000000000841611156127a35760807001000000b1721835514b86e6d96efd1bfe8202901c90505b60006c80000000000000000000000000841611156127d6576080700100000058b90c0b48c6be5df846c5b2ef8202901c90505b60006c400000000000000000000000008416111561280957608070010000002c5c8601cc6b9e94213c72737a8202901c90505b60006c200000000000000000000000008416111561283c5760807001000000162e42fff037df38aa2b219f068202901c90505b60006c100000000000000000000000008416111561286f57608070010000000b17217fba9c739aa5819f44f98202901c90505b60006c08000000000000000000000000841611156128a25760807001000000058b90bfcdee5acd3c1cedc8238202901c90505b60006c04000000000000000000000000841611156128d5576080700100000002c5c85fe31f35a6a30da1be508202901c90505b60006c020000000000000000000000008416111561290857608070010000000162e42ff0999ce3541b9fffcf8202901c90505b60006c010000000000000000000000008416111561293b576080700100000000b17217f80f4ef5aadda455548202901c90505b60006b8000000000000000000000008416111561296d57608070010000000058b90bfbf8479bd5a81b51ad8202901c90505b60006b4000000000000000000000008416111561299f5760807001000000002c5c85fdf84bd62ae30a74cc8202901c90505b60006b200000000000000000000000841611156129d1576080700100000000162e42fefb2fed257559bdaa8202901c90505b60006b10000000000000000000000084161115612a035760807001000000000b17217f7d5a7716bba4a9ae8202901c90505b60006b08000000000000000000000084161115612a35576080700100000000058b90bfbe9ddbac5e109cce8202901c90505b60006b04000000000000000000000084161115612a6757608070010000000002c5c85fdf4b15de6f17eb0d8202901c90505b60006b02000000000000000000000084161115612a995760807001000000000162e42fefa494f1478fde058202901c90505b60006b01000000000000000000000084161115612acb57608070010000000000b17217f7d20cf927c8e94c8202901c90505b60006a800000000000000000000084161115612afc5760807001000000000058b90bfbe8f71cb4e4b33d8202901c90505b60006a400000000000000000000084161115612b2d576080700100000000002c5c85fdf477b662b269458202901c90505b60006a200000000000000000000084161115612b5e57608070010000000000162e42fefa3ae53369388c8202901c90505b60006a100000000000000000000084161115612b8f576080700100000000000b17217f7d1d351a389d408202901c90505b60006a080000000000000000000084161115612bc057608070010000000000058b90bfbe8e8b2d3d4ede8202901c90505b60006a040000000000000000000084161115612bf15760807001000000000002c5c85fdf4741bea6e77e8202901c90505b60006a020000000000000000000084161115612c22576080700100000000000162e42fefa39fe95583c28202901c90505b60006a010000000000000000000084161115612c535760807001000000000000b17217f7d1cfb72b45e18202901c90505b6000698000000000000000000084161115612c83576080700100000000000058b90bfbe8e7cc35c3f08202901c90505b6000694000000000000000000084161115612cb357608070010000000000002c5c85fdf473e242ea388202901c90505b6000692000000000000000000084161115612ce35760807001000000000000162e42fefa39f02b772c8202901c90505b6000691000000000000000000084161115612d1357608070010000000000000b17217f7d1cf7d83c1a8202901c90505b6000690800000000000000000084161115612d435760807001000000000000058b90bfbe8e7bdcbe2e8202901c90505b6000690400000000000000000084161115612d73576080700100000000000002c5c85fdf473dea871f8202901c90505b6000690200000000000000000084161115612da357608070010000000000000162e42fefa39ef44d918202901c90505b6000690100000000000000000084161115612dd3576080700100000000000000b17217f7d1cf79e9498202901c90505b60006880000000000000000084161115612e0257608070010000000000000058b90bfbe8e7bce5448202901c90505b60006840000000000000000084161115612e315760807001000000000000002c5c85fdf473de6eca8202901c90505b60006820000000000000000084161115612e60576080700100000000000000162e42fefa39ef366f8202901c90505b60006810000000000000000084161115612e8f5760807001000000000000000b17217f7d1cf79afa8202901c90505b60006808000000000000000084161115612ebe576080700100000000000000058b90bfbe8e7bcd6d8202901c90505b60006804000000000000000084161115612eed57608070010000000000000002c5c85fdf473de6b28202901c90505b60006802000000000000000084161115612f1c5760807001000000000000000162e42fefa39ef3588202901c90505b60006801000000000000000084161115612f4b57608070010000000000000000b17217f7d1cf79ab8202901c90505b600067800000000000000084161115612f795760807001000000000000000058b90bfbe8e7bcd58202901c90505b600067400000000000000084161115612fa7576080700100000000000000002c5c85fdf473de6a8202901c90505b600067200000000000000084161115612fd557608070010000000000000000162e42fefa39ef348202901c90505b600067100000000000000084161115613003576080700100000000000000000b17217f7d1cf7998202901c90505b60006708000000000000008416111561303157608070010000000000000000058b90bfbe8e7bcc8202901c90505b60006704000000000000008416111561305f5760807001000000000000000002c5c85fdf473de58202901c90505b60006702000000000000008416111561308d576080700100000000000000000162e42fefa39ef28202901c90505b6000670100000000000000841611156130bb5760807001000000000000000000b17217f7d1cf788202901c90505b60006680000000000000841611156130e8576080700100000000000000000058b90bfbe8e7bb8202901c90505b600066400000000000008416111561311557608070010000000000000000002c5c85fdf473dd8202901c90505b60006620000000000000841611156131425760807001000000000000000000162e42fefa39ee8202901c90505b600066100000000000008416111561316f57608070010000000000000000000b17217f7d1cf68202901c90505b600066080000000000008416111561319c5760807001000000000000000000058b90bfbe8e7a8202901c90505b60006604000000000000841611156131c9576080700100000000000000000002c5c85fdf473c8202901c90505b60006602000000000000841611156131f657608070010000000000000000000162e42fefa39d8202901c90505b6000660100000000000084161115613223576080700100000000000000000000b17217f7d1ce8202901c90505b6000658000000000008416111561324f57608070010000000000000000000058b90bfbe8e68202901c90505b6000654000000000008416111561327b5760807001000000000000000000002c5c85fdf4728202901c90505b600065200000000000841611156132a7576080700100000000000000000000162e42fefa388202901c90505b600065100000000000841611156132d35760807001000000000000000000000b17217f7d1b8202901c90505b600065080000000000841611156132ff576080700100000000000000000000058b90bfbe8d8202901c90505b6000650400000000008416111561332b57608070010000000000000000000002c5c85fdf468202901c90505b600065020000000000841611156133575760807001000000000000000000000162e42fefa28202901c90505b6000650100000000008416111561338357608070010000000000000000000000b17217f7d08202901c90505b6000648000000000841611156133ae5760807001000000000000000000000058b90bfbe78202901c90505b6000644000000000841611156133d9576080700100000000000000000000002c5c85fdf38202901c90505b60006420000000008416111561340457608070010000000000000000000000162e42fef98202901c90505b60006410000000008416111561342f576080700100000000000000000000000b17217f7c8202901c90505b60006408000000008416111561345a57608070010000000000000000000000058b90bfbd8202901c90505b6000640400000000841611156134855760807001000000000000000000000002c5c85fde8202901c90505b6000640200000000841611156134b0576080700100000000000000000000000162e42fee8202901c90505b6000640100000000841611156134db5760807001000000000000000000000000b17217f68202901c90505b6000638000000084161115613505576080700100000000000000000000000058b90bfa8202901c90505b600063400000008416111561352f57608070010000000000000000000000002c5c85fc8202901c90505b60006320000000841611156135595760807001000000000000000000000000162e42fd8202901c90505b600063100000008416111561358357608070010000000000000000000000000b17217e8202901c90505b60006308000000841611156135ad5760807001000000000000000000000000058b90be8202901c90505b60006304000000841611156135d7576080700100000000000000000000000002c5c85e8202901c90505b600063020000008416111561360157608070010000000000000000000000000162e42e8202901c90505b600063010000008416111561362b576080700100000000000000000000000000b172168202901c90505b6000628000008416111561365457608070010000000000000000000000000058b90a8202901c90505b6000624000008416111561367d5760807001000000000000000000000000002c5c848202901c90505b600062200000841611156136a6576080700100000000000000000000000000162e418202901c90505b600062100000841611156136cf5760807001000000000000000000000000000b17208202901c90505b600062080000841611156136f8576080700100000000000000000000000000058b8f8202901c90505b6000620400008416111561372157608070010000000000000000000000000002c5c78202901c90505b6000620200008416111561374a5760807001000000000000000000000000000162e38202901c90505b6000620100008416111561377357608070010000000000000000000000000000b1718202901c90505b60006180008416111561379b5760807001000000000000000000000000000058b88202901c90505b6000614000841611156137c3576080700100000000000000000000000000002c5b8202901c90505b6000612000841611156137eb57608070010000000000000000000000000000162d8202901c90505b600061100084161115613813576080700100000000000000000000000000000b168202901c90505b60006108008416111561383b57608070010000000000000000000000000000058a8202901c90505b6000610400841611156138635760807001000000000000000000000000000002c48202901c90505b60006102008416111561388b5760807001000000000000000000000000000001618202901c90505b6000610100841611156138b35760807001000000000000000000000000000000b08202901c90505b60006080841611156138da5760807001000000000000000000000000000000578202901c90505b600060408416111561390157608070010000000000000000000000000000002b8202901c90505b60006020841611156139285760807001000000000000000000000000000000158202901c90505b600060108416111561394f57608070010000000000000000000000000000000a8202901c90505b60006008841611156139765760807001000000000000000000000000000000048202901c90505b600060048416111561399d5760807001000000000000000000000000000000018202901c90505b846139c5576dffffffffffffffffffffffffffff600f82901c169050613fff82019150613a01565b613ffe82116139f1576dffffffffffffffffffffffffffff600f82901c16905081613fff039150613a00565b613fef820381901c9050600091505b5b80607083901b1760801b955050505050505b919050565b6000808211613a2657600080fd5b60007001000000000000000000000000000000008310613a4e57608083901c92506080810190505b680100000000000000008310613a6c57604083901c92506040810190505b6401000000008310613a8657602083901c92506020810190505b620100008310613a9e57601083901c92506010810190505b6101008310613ab557600883901c92506008810190505b60108310613acb57600483901c92506004810190505b60048310613ae157600283901c92506002810190505b60028310613af0576001810190505b80915050919050565b600081359050613b08816143c5565b92915050565b600081359050613b1d816143dc565b92915050565b600081359050613b32816143f3565b92915050565b600060c08284031215613b4e57613b4d614374565b5b613b5860c0613fcc565b90506000613b6884828501613b0e565b6000830152506020613b7c84828501613b0e565b6020830152506040613b9084828501613bd8565b6040830152506060613ba484828501613bd8565b6060830152506080613bb884828501613af9565b60808301525060a0613bcc84828501613af9565b60a08301525092915050565b600081359050613be78161440a565b92915050565b600060208284031215613c0357613c02614379565b5b6000613c1184828501613af9565b91505092915050565b60008060408385031215613c3157613c30614379565b5b6000613c3f85828601613af9565b9250506020613c5085828601613af9565b9150509250929050565b600080600060608486031215613c7357613c72614379565b5b6000613c8186828701613af9565b9350506020613c9286828701613b23565b9250506040613ca386828701613af9565b9150509250925092565b60008060408385031215613cc457613cc3614379565b5b6000613cd285828601613af9565b9250506020613ce385828601613bd8565b9150509250929050565b60008060408385031215613d0457613d03614379565b5b6000613d1285828601613b0e565b9250506020613d2385828601613b0e565b9150509250929050565b600060c08284031215613d4357613d42614379565b5b6000613d5184828501613b38565b91505092915050565b600060208284031215613d7057613d6f614379565b5b6000613d7e84828501613bd8565b91505092915050565b60008060408385031215613d9e57613d9d614379565b5b6000613dac85828601613bd8565b9250506020613dbd85828601613bd8565b9150509250929050565b600080600060608486031215613de057613ddf614379565b5b6000613dee86828701613bd8565b9350506020613dff86828701613bd8565b9250506040613e1086828701613bd8565b9150509250925092565b60008060008060808587031215613e3457613e33614379565b5b6000613e4287828801613bd8565b9450506020613e5387828801613bd8565b9350506040613e6487828801613bd8565b9250506060613e7587828801613bd8565b91505092959194509250565b613e8a8161422e565b82525050565b613e998161423a565b82525050565b613ea881614270565b82525050565b6000613ebb600e83613ff1565b9150613ec68261439c565b602082019050919050565b613eda8161427d565b82525050565b6000602082019050613ef56000830184613e81565b92915050565b6000602082019050613f106000830184613e90565b92915050565b6000602082019050613f2b6000830184613e9f565b92915050565b60006020820190508181036000830152613f4a81613eae565b9050919050565b6000602082019050613f666000830184613ed1565b92915050565b6000604082019050613f816000830185613ed1565b613f8e6020830184613ed1565b9392505050565b6000606082019050613faa6000830186613ed1565b613fb76020830185613ed1565b613fc46040830184613ed1565b949350505050565b6000613fd6613fe7565b9050613fe28282614287565b919050565b6000604051905090565b600082825260208201905092915050565b600061400d8261427d565b91506140188361427d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561404d5761404c6142e7565b5b828201905092915050565b60006140638261427d565b915061406e8361427d565b92508261407e5761407d614316565b5b828204905092915050565b6000808291508390505b60018511156140d3578086048111156140af576140ae6142e7565b5b60018516156140be5780820291505b80810290506140cc8561438f565b9450614093565b94509492505050565b60006140e78261427d565b91506140f28361427d565b925061411f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614127565b905092915050565b60008261413757600190506141f3565b8161414557600090506141f3565b816001811461415b576002811461416557614194565b60019150506141f3565b60ff841115614177576141766142e7565b5b8360020a91508482111561418e5761418d6142e7565b5b506141f3565b5060208310610133831016604e8410600b84101617156141c95782820a9050838111156141c4576141c36142e7565b5b6141f3565b6141d68484846001614089565b925090508184048111156141ed576141ec6142e7565b5b81810290505b9392505050565b60006142058261427d565b91506142108361427d565b925082821015614223576142226142e7565b5b828203905092915050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b60008160000b9050919050565b6000819050919050565b6142908261437e565b810181811067ffffffffffffffff821117156142af576142ae614345565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6143ce8161423a565b81146143d957600080fd5b50565b6143e581614266565b81146143f057600080fd5b50565b6143fc81614270565b811461440757600080fd5b50565b6144138161427d565b811461441e57600080fd5b5056fea2646970667358221220a645ff23afabb91f69a28d9dac87ac75de6889e2b61ef2479a84b14cb204778464736f6c63430008060033",
    "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063ab41556f116100ac578063c3ff80911161007b578063c3ff809114610326578063cda8198c14610356578063cff7000114610386578063dc35bc13146103b6578063dfdbe4da146103e757610115565b8063ab41556f14610278578063aeb64d7d146102a8578063bc1b392d146102d8578063bf36f0e9146102f657610115565b8063901717d1116100e8578063901717d1146101c8578063a481c1b4146101e6578063a818c0d214610218578063aaa578b21461024857610115565b80630417cf8e1461011a5780631842c9d814610138578063202f125714610168578063422051e714610198575b600080fd5b610122610417565b60405161012f9190613f51565b60405180910390f35b610152600480360381019061014d9190613c1a565b61041c565b60405161015f9190613f16565b60405180910390f35b610182600480360381019061017d9190613ced565b610430565b60405161018f9190613efb565b60405180910390f35b6101b260048036038101906101ad9190613cad565b610454565b6040516101bf9190613efb565b60405180910390f35b6101d0610470565b6040516101dd9190613efb565b60405180910390f35b61020060048036038101906101fb9190613d2d565b610487565b60405161020f93929190613f95565b60405180910390f35b610232600480360381019061022d9190613cad565b61060f565b60405161023f9190613f51565b60405180910390f35b610262600480360381019061025d9190613dc7565b61064f565b60405161026f9190613ee0565b60405180910390f35b610292600480360381019061028d9190613e1a565b610673565b60405161029f9190613f51565b60405180910390f35b6102c260048036038101906102bd9190613bed565b61069d565b6040516102cf9190613f51565b60405180910390f35b6102e06106af565b6040516102ed9190613efb565b60405180910390f35b610310600480360381019061030b9190613d87565b6106b7565b60405161031d9190613f51565b60405180910390f35b610340600480360381019061033b9190613c5a565b6106ea565b60405161034d9190613efb565b60405180910390f35b610370600480360381019061036b9190613cad565b610799565b60405161037d9190613f51565b60405180910390f35b6103a0600480360381019061039b9190613d87565b610858565b6040516103ad9190613efb565b60405180910390f35b6103d060048036038101906103cb9190613dc7565b610891565b6040516103de929190613f6c565b60405180910390f35b61040160048036038101906103fc9190613d5a565b610900565b60405161040e9190613efb565b60405180910390f35b601281565b60006104288383610912565b905092915050565b600061044c61043e84610ba2565b61044784610ba2565b610c50565b905092915050565b60006104688361046384611119565b611197565b905092915050565b6f3fff000000000000000000000000000060801b81565b6000806000808460600151905060008560400151905060008660800151905060008760000151905060008860200151905060008960a00151905060006104d56104d08388610454565b61069d565b905060006104eb6104e6848a610454565b61069d565b9050600081896104fb91906141fa565b985081816105099190614002565b9050828861051791906141fa565b975082816105259190614002565b905060006105338688610430565b90506000610554826f3fff000000000000000000000000000060801b61041c565b9050600061056383838c6106ea565b905060008260000b12158015610579575060008c115b156105ae57600061058a828e61060f565b9050808d61059891906141fa565b9c50808c6105a69190614002565b9b50506105f3565b60008260000b1280156105c1575060008b115b156105f25760006105d2828d61060f565b9050808d6105e09190614002565b9c50808c6105ee91906141fa565b9b50505b5b8a8c859e509e509e505050505050505050505050509193909250565b60006106476106426106346f3fff000000000000000000000000000060801b8661162c565b61063d85611119565b611197565b611655565b905092915050565b60004282848661065f9190614002565b61066991906141fa565b1190509392505050565b600061069361068d83876106879190614002565b85610858565b85610799565b9050949350505050565b60006106a882611655565b9050919050565b600060801b81565b6000808260126106c791906141fa565b600a6106d391906140dc565b905080846106e19190614058565b91505092915050565b600061079061078b8361078661078161072c60008960000b1261071157600060801b610726565b6f3fff000000000000000000000000000060801b5b8a611197565b61077c61077660008b60000b121561074857600060801b61075d565b6f3fff000000000000000000000000000060801b5b6f3fff000000000000000000000000000060801b611197565b8b610c50565b611753565b611db8565b611197565b612070565b90509392505050565b60008082116107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d490613f31565b60405180910390fd5b60006107ed84600060801b610912565b60000b148061082857506000610823847f3078310000000000000000000000000000000000000000000000000000000000610912565b60000b145b1561083557819050610852565b61084f61084a8461084585611119565b611197565b611655565b90505b92915050565b60008082141561086e57600060801b905061088b565b61088861087a84611119565b61088384611119565b610c50565b90505b92915050565b60008060006108ab8585876108a69190614002565b610858565b905060006108c16108bc8389610454565b61069d565b9050600081876108d191906141fa565b9050600082896108e191906141fa565b876108ec91906141fa565b905081819550955050505050935093915050565b600061090b82611119565b9050919050565b6000806f7fffffffffffffffffffffffffffffff8460801c1690506f7fff0000000000000000000000000000816fffffffffffffffffffffffffffffffff16111561095c57600080fd5b60006f7fffffffffffffffffffffffffffffff8460801c1690506f7fff0000000000000000000000000000816fffffffffffffffffffffffffffffffff1611156109a557600080fd5b836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415806109fb57506f7fff0000000000000000000000000000826fffffffffffffffffffffffffffffffff16105b610a0457600080fd5b836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415610a3d57600092505050610b9c565b60006f800000000000000000000000000000008660801c6fffffffffffffffffffffffffffffffff161015905060006f800000000000000000000000000000008660801c6fffffffffffffffffffffffffffffffff16101590508115610b2e578015610b0257826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff1611610ad5576001610af7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b945050505050610b9c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945050505050610b9c565b8015610b41576001945050505050610b9c565b826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff1611610b92577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610b95565b60015b9450505050505b92915050565b600080821415610bb857600060801b9050610c4b565b6000808313610bca5782600003610bcc565b825b90506000610bd982613a18565b90506070811015610bf2578060700382901b9150610c06565b6070811115610c05576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791506000841215610c42576f80000000000000000000000000000000821791505b8160801b925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff821415610d0b57617fff811415610cea576f7fff800000000000000000000000000060801b92505050611113565b6f8000000000000000000000000000000060801b8416851892505050611113565b617fff811415610d8a57600060801b6dffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff191614610d63576f7fff800000000000000000000000000060801b92505050611113565b6f8000000000000000000000000000000060801b84861816600060801b1792505050611113565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff19161415610e4557600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff19161415610e0f576f7fff800000000000000000000000000060801b92505050611113565b6f8000000000000000000000000000000060801b848618166f7fff000000000000000000000000000060801b1792505050611113565b60006dffffffffffffffffffffffffffff8560801c166fffffffffffffffffffffffffffffffff1690506000821415610e815760019150610e96565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8760801c166fffffffffffffffffffffffffffffffff1690506000841415610efa5760008114610ef5576000610edc82613a18565b60e20390508082901b9150600194506072810384019350505b610f13565b60726e0100000000000000000000000000008217901b90505b818181610f2357610f22614316565b5b0490506000811415610f8e57600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff191611610f6e57600060801b610f83565b6f8000000000000000000000000000000060801b5b945050505050611113565b6d1000000000000000000000000000811015610fad57610fac6142b8565b5b60006e08000000000000000000000000000082101561100e576e040000000000000000000000000000821015611003576e020000000000000000000000000000821015610ffb576070610ffe565b60715b611006565b60725b60ff16611018565b61101782613a18565b5b90506140718401818601111561103657617fff9450600091506110d3565b83613ffc8287010110156110515760009450600091506110d2565b83613f8c82870101101561109f5783613ffc8601111561107c5783613ffc86010382901b9150611096565b83613ffc8601101561109557613ffc8585030382901c91505b5b600094506110d1565b60708111156110b2576070810382901c91505b6dffffffffffffffffffffffffffff8216915083613f8d828701010394505b5b5b81607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b60008082141561112f57600060801b9050611192565b6000829050600061113f82613a18565b90506070811015611158578060700382901b915061116c565b607081111561116b576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791508160801b925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff82141561132e57617fff8114156112bc57836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415611263576f8000000000000000000000000000000060801b8416851892505050611626565b6f8000000000000000000000000000000060801b8486186fffffffffffffffffffffffffffffffff1916141561129f5783851792505050611626565b6f7fff800000000000000000000000000060801b92505050611626565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff1916141561130d576f7fff800000000000000000000000000060801b92505050611626565b6f8000000000000000000000000000000060801b8416851892505050611626565b617fff8114156113aa57600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff19161415611389576f7fff800000000000000000000000000060801b92505050611626565b6f8000000000000000000000000000000060801b8516841892505050611626565b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff16905060008314156113e657600192506113fb565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff1690506000831415611437576001925061144c565b6e010000000000000000000000000000811790505b808202915060008214156114b957600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff19161161149957600060801b6114ae565b6f8000000000000000000000000000000060801b5b945050505050611626565b828401935060007c0200000000000000000000000000000000000000000000000000000000831015611520577c01000000000000000000000000000000000000000000000000000000008310156115185761151383613a18565b61151b565b60e05b611523565b60e15b9050614070818601101561153e5760009450600092506115e6565b6140e081860110156115825761407085101561156357846140700383901c9250611579565b61407085111561157857614070850383901b92505b5b600094506115e5565b61c0dd818601111561159c57617fff9450600092506115e4565b60708111156115b3576070810383901c92506115c7565b60708110156115c6578060700383901b92505b5b6dffffffffffffffffffffffffffff831692506140df8186010394505b5b5b82607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b600061164d836f8000000000000000000000000000000060801b8418611753565b905092915050565b600080617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050613fff81101561169e57600091505061174e565b6f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff16106116cf57600080fd5b6140fe8111156116de57600080fd5b60006e0100000000000000000000000000006dffffffffffffffffffffffffffff8560801c6fffffffffffffffffffffffffffffffff161617905061406f821015611732578161406f0381901c9050611748565b61406f8211156117475761406f820381901b90505b5b80925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff82141561182f57617fff81141561182557836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff19161415611808578492505050611db2565b6f7fff800000000000000000000000000060801b92505050611db2565b8492505050611db2565b617fff811415611843578392505050611db2565b60006f800000000000000000000000000000008660801c6fffffffffffffffffffffffffffffffff161015905060006dffffffffffffffffffffffffffff8760801c166fffffffffffffffffffffffffffffffff16905060008414156118ac57600193506118c1565b6e010000000000000000000000000000811790505b60006f800000000000000000000000000000008760801c6fffffffffffffffffffffffffffffffff161015905060006dffffffffffffffffffffffffffff8860801c166fffffffffffffffffffffffffffffffff169050600085141561192a576001945061193f565b6e010000000000000000000000000000811790505b60008314156119a1576f8000000000000000000000000000000060801b6fffffffffffffffffffffffffffffffff1916886fffffffffffffffffffffffffffffffff19161461198e5787611994565b600060801b5b9650505050505050611db2565b6000811415611a03576f8000000000000000000000000000000060801b6fffffffffffffffffffffffffffffffff1916896fffffffffffffffffffffffffffffffff1916146119f057886119f6565b600060801b5b9650505050505050611db2565b600085870390508215158515151415611b81576070811315611a2e5789975050505050505050611db2565b6000811315611a42578082901c9150611a90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811215611a795788975050505050505050611db2565b6000811215611a8f578060000384901c93508596505b5b81840193506e0200000000000000000000000000008410611ab957600184901c93506001870196505b617fff871415611b045784611ae1576f7fff000000000000000000000000000060801b611af6565b6fffff000000000000000000000000000060801b5b975050505050505050611db2565b6e010000000000000000000000000000841015611b245760009650611b38565b6dffffffffffffffffffffffffffff841693505b83607088901b86611b4a576000611b5c565b6f800000000000000000000000000000005b6fffffffffffffffffffffffffffffffff16171760801b975050505050505050611db2565b6000811315611b9c57600184901b9350600187039650611bb4565b6000811215611bb357600182901b91506001860396505b5b6070811315611bc65760019150611c50565b6001811315611be257600180820360018403901c019150611c4f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811215611c135760019350611c4e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811215611c4d57600180826000030360018603901c0193505b5b5b5b818410611c61578184039350611c6a565b83820393508294505b6000841415611c8657600060801b975050505050505050611db2565b6000611c9185613a18565b90506071811415611cbe576dffffffffffffffffffffffffffff600186901c169450600188019750611d20565b6070811015611d0b57600081607003905080891115611cf7576dffffffffffffffffffffffffffff8187901b1695508089039850611d05565b6001890386901b9550600098505b50611d1f565b6dffffffffffffffffffffffffffff851694505b5b617fff881415611d6c5785611d48576f7fff000000000000000000000000000060801b611d5d565b6fffff000000000000000000000000000060801b5b98505050505050505050611db2565b84607089901b87611d7e576000611d90565b6f800000000000000000000000000000005b6fffffffffffffffffffffffffffffffff16171760801b985050505050505050505b92915050565b60006f800000000000000000000000000000008260801c6fffffffffffffffffffffffffffffffff161115611e02576f7fff800000000000000000000000000060801b905061206b565b6f3fff000000000000000000000000000060801b826fffffffffffffffffffffffffffffffff19161415611e3c57600060801b905061206b565b6000617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff811415611e83578291505061206b565b60006dffffffffffffffffffffffffffff8460801c166fffffffffffffffffffffffffffffffff1690506000821415611ebf5760019150611ed4565b6e010000000000000000000000000000811790505b6000811415611efa576fffff000000000000000000000000000060801b9250505061206b565b60008061406f90506000613fff8510611f245760009250613fff85039050600f84901b9350611f71565b600192506e0100000000000000000000000000008410611f515784613ffe039050600f84901b9350611f70565b6000611f5c85613a18565b90508061406d03915080607f0385901b9450505b5b6f80000000000000000000000000000000841415611fb7578215611f96576001810190505b6000611fa182613a18565b60700390508082901b9150808303925050612018565b600083611fc5576000611fc8565b60015b60ff1690505b6e01000000000000000000000000000082101561201657600182901b91506001830392508485029450600060ff86901c90508181188301925080607f0186901c955050611fce565b505b6dffffffffffffffffffffffffffff8116607083901b8461203a57600061204c565b6f800000000000000000000000000000005b6fffffffffffffffffffffffffffffffff16171760801b955050505050505b919050565b6000806f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff161190506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff16905060006dffffffffffffffffffffffffffff8560801c166fffffffffffffffffffffffffffffffff169050617fff8214801561210d575060008114155b15612130576f7fff800000000000000000000000000060801b9350505050613a13565b61400d8211156121685782612158576f7fff000000000000000000000000000060801b61215e565b600060801b5b9350505050613a13565b613f7f821015612190576f3fff000000000000000000000000000060801b9350505050613a13565b60008214156121a257600191506121b7565b6e010000000000000000000000000000811790505b613fef8211156121d057613fef820381901b90506121e6565b613fef8210156121e55781613fef0381901c90505b5b828015612204575071406e0000000000000000000000000000000081115b1561221857600060801b9350505050613a13565b821580156122375750713fffffffffffffffffffffffffffffffffff81115b1561225a576f7fff000000000000000000000000000060801b9350505050613a13565b6000608082901c90506fffffffffffffffffffffffffffffffff82169150838015612286575060008214155b1561229657811991506001810190505b60006f80000000000000000000000000000000905060006f80000000000000000000000000000000841611156122e157608070016a09e667f3bcc908b2fb1366ea957d3e8202901c90505b60006f40000000000000000000000000000000841611156123175760807001306fe0a31b7152de8d5a46305c85edec8202901c90505b60006f200000000000000000000000000000008416111561234d5760807001172b83c7d517adcdf7c8c50eb14a791f8202901c90505b60006f100000000000000000000000000000008416111561238357608070010b5586cf9890f6298b92b71842a983638202901c90505b60006f08000000000000000000000000000000841611156123b95760807001059b0d31585743ae7c548eb68ca417fd8202901c90505b60006f04000000000000000000000000000000841611156123ef576080700102c9a3e778060ee6f7caca4f7a29bde88202901c90505b60006f020000000000000000000000000000008416111561242557608070010163da9fb33356d84a66ae336dcdfa3f8202901c90505b60006f010000000000000000000000000000008416111561245b576080700100b1afa5abcbed6129ab13ec11dc95438202901c90505b60006e8000000000000000000000000000008416111561249057608070010058c86da1c09ea1ff19d294cf2f679b8202901c90505b60006e400000000000000000000000000000841611156124c55760807001002c605e2e8cec506d21bfc89a23a00f8202901c90505b60006e200000000000000000000000000000841611156124fa576080700100162f3904051fa128bca9c55c31e5df8202901c90505b60006e1000000000000000000000000000008416111561252f5760807001000b175effdc76ba38e31671ca9397258202901c90505b60006e08000000000000000000000000000084161115612564576080700100058ba01fb9f96d6cacd4b180917c3d8202901c90505b60006e0400000000000000000000000000008416111561259957608070010002c5cc37da9491d0985c348c68e7b38202901c90505b60006e020000000000000000000000000000841611156125ce5760807001000162e525ee054754457d59952920268202901c90505b60006e0100000000000000000000000000008416111561260357608070010000b17255775c040618bf4a4ade83fc8202901c90505b60006d8000000000000000000000000000841611156126375760807001000058b91b5bc9ae2eed81e9b7d4cfab8202901c90505b60006d40000000000000000000000000008416111561266b576080700100002c5c89d5ec6ca4d7c8acc017b7c98202901c90505b60006d20000000000000000000000000008416111561269f57608070010000162e43f4f831060e02d839a9d16d8202901c90505b60006d1000000000000000000000000000841611156126d3576080700100000b1721bcfc99d9f890ea069117638202901c90505b60006d08000000000000000000000000008416111561270757608070010000058b90cf1e6d97f9ca14dbcc16288202901c90505b60006d04000000000000000000000000008416111561273b5760807001000002c5c863b73f016468f6bac5ca2b8202901c90505b60006d02000000000000000000000000008416111561276f576080700100000162e430e5a18f6119e3c02282a58202901c90505b60006d0100000000000000000000000000841611156127a35760807001000000b1721835514b86e6d96efd1bfe8202901c90505b60006c80000000000000000000000000841611156127d6576080700100000058b90c0b48c6be5df846c5b2ef8202901c90505b60006c400000000000000000000000008416111561280957608070010000002c5c8601cc6b9e94213c72737a8202901c90505b60006c200000000000000000000000008416111561283c5760807001000000162e42fff037df38aa2b219f068202901c90505b60006c100000000000000000000000008416111561286f57608070010000000b17217fba9c739aa5819f44f98202901c90505b60006c08000000000000000000000000841611156128a25760807001000000058b90bfcdee5acd3c1cedc8238202901c90505b60006c04000000000000000000000000841611156128d5576080700100000002c5c85fe31f35a6a30da1be508202901c90505b60006c020000000000000000000000008416111561290857608070010000000162e42ff0999ce3541b9fffcf8202901c90505b60006c010000000000000000000000008416111561293b576080700100000000b17217f80f4ef5aadda455548202901c90505b60006b8000000000000000000000008416111561296d57608070010000000058b90bfbf8479bd5a81b51ad8202901c90505b60006b4000000000000000000000008416111561299f5760807001000000002c5c85fdf84bd62ae30a74cc8202901c90505b60006b200000000000000000000000841611156129d1576080700100000000162e42fefb2fed257559bdaa8202901c90505b60006b10000000000000000000000084161115612a035760807001000000000b17217f7d5a7716bba4a9ae8202901c90505b60006b08000000000000000000000084161115612a35576080700100000000058b90bfbe9ddbac5e109cce8202901c90505b60006b04000000000000000000000084161115612a6757608070010000000002c5c85fdf4b15de6f17eb0d8202901c90505b60006b02000000000000000000000084161115612a995760807001000000000162e42fefa494f1478fde058202901c90505b60006b01000000000000000000000084161115612acb57608070010000000000b17217f7d20cf927c8e94c8202901c90505b60006a800000000000000000000084161115612afc5760807001000000000058b90bfbe8f71cb4e4b33d8202901c90505b60006a400000000000000000000084161115612b2d576080700100000000002c5c85fdf477b662b269458202901c90505b60006a200000000000000000000084161115612b5e57608070010000000000162e42fefa3ae53369388c8202901c90505b60006a100000000000000000000084161115612b8f576080700100000000000b17217f7d1d351a389d408202901c90505b60006a080000000000000000000084161115612bc057608070010000000000058b90bfbe8e8b2d3d4ede8202901c90505b60006a040000000000000000000084161115612bf15760807001000000000002c5c85fdf4741bea6e77e8202901c90505b60006a020000000000000000000084161115612c22576080700100000000000162e42fefa39fe95583c28202901c90505b60006a010000000000000000000084161115612c535760807001000000000000b17217f7d1cfb72b45e18202901c90505b6000698000000000000000000084161115612c83576080700100000000000058b90bfbe8e7cc35c3f08202901c90505b6000694000000000000000000084161115612cb357608070010000000000002c5c85fdf473e242ea388202901c90505b6000692000000000000000000084161115612ce35760807001000000000000162e42fefa39f02b772c8202901c90505b6000691000000000000000000084161115612d1357608070010000000000000b17217f7d1cf7d83c1a8202901c90505b6000690800000000000000000084161115612d435760807001000000000000058b90bfbe8e7bdcbe2e8202901c90505b6000690400000000000000000084161115612d73576080700100000000000002c5c85fdf473dea871f8202901c90505b6000690200000000000000000084161115612da357608070010000000000000162e42fefa39ef44d918202901c90505b6000690100000000000000000084161115612dd3576080700100000000000000b17217f7d1cf79e9498202901c90505b60006880000000000000000084161115612e0257608070010000000000000058b90bfbe8e7bce5448202901c90505b60006840000000000000000084161115612e315760807001000000000000002c5c85fdf473de6eca8202901c90505b60006820000000000000000084161115612e60576080700100000000000000162e42fefa39ef366f8202901c90505b60006810000000000000000084161115612e8f5760807001000000000000000b17217f7d1cf79afa8202901c90505b60006808000000000000000084161115612ebe576080700100000000000000058b90bfbe8e7bcd6d8202901c90505b60006804000000000000000084161115612eed57608070010000000000000002c5c85fdf473de6b28202901c90505b60006802000000000000000084161115612f1c5760807001000000000000000162e42fefa39ef3588202901c90505b60006801000000000000000084161115612f4b57608070010000000000000000b17217f7d1cf79ab8202901c90505b600067800000000000000084161115612f795760807001000000000000000058b90bfbe8e7bcd58202901c90505b600067400000000000000084161115612fa7576080700100000000000000002c5c85fdf473de6a8202901c90505b600067200000000000000084161115612fd557608070010000000000000000162e42fefa39ef348202901c90505b600067100000000000000084161115613003576080700100000000000000000b17217f7d1cf7998202901c90505b60006708000000000000008416111561303157608070010000000000000000058b90bfbe8e7bcc8202901c90505b60006704000000000000008416111561305f5760807001000000000000000002c5c85fdf473de58202901c90505b60006702000000000000008416111561308d576080700100000000000000000162e42fefa39ef28202901c90505b6000670100000000000000841611156130bb5760807001000000000000000000b17217f7d1cf788202901c90505b60006680000000000000841611156130e8576080700100000000000000000058b90bfbe8e7bb8202901c90505b600066400000000000008416111561311557608070010000000000000000002c5c85fdf473dd8202901c90505b60006620000000000000841611156131425760807001000000000000000000162e42fefa39ee8202901c90505b600066100000000000008416111561316f57608070010000000000000000000b17217f7d1cf68202901c90505b600066080000000000008416111561319c5760807001000000000000000000058b90bfbe8e7a8202901c90505b60006604000000000000841611156131c9576080700100000000000000000002c5c85fdf473c8202901c90505b60006602000000000000841611156131f657608070010000000000000000000162e42fefa39d8202901c90505b6000660100000000000084161115613223576080700100000000000000000000b17217f7d1ce8202901c90505b6000658000000000008416111561324f57608070010000000000000000000058b90bfbe8e68202901c90505b6000654000000000008416111561327b5760807001000000000000000000002c5c85fdf4728202901c90505b600065200000000000841611156132a7576080700100000000000000000000162e42fefa388202901c90505b600065100000000000841611156132d35760807001000000000000000000000b17217f7d1b8202901c90505b600065080000000000841611156132ff576080700100000000000000000000058b90bfbe8d8202901c90505b6000650400000000008416111561332b57608070010000000000000000000002c5c85fdf468202901c90505b600065020000000000841611156133575760807001000000000000000000000162e42fefa28202901c90505b6000650100000000008416111561338357608070010000000000000000000000b17217f7d08202901c90505b6000648000000000841611156133ae5760807001000000000000000000000058b90bfbe78202901c90505b6000644000000000841611156133d9576080700100000000000000000000002c5c85fdf38202901c90505b60006420000000008416111561340457608070010000000000000000000000162e42fef98202901c90505b60006410000000008416111561342f576080700100000000000000000000000b17217f7c8202901c90505b60006408000000008416111561345a57608070010000000000000000000000058b90bfbd8202901c90505b6000640400000000841611156134855760807001000000000000000000000002c5c85fde8202901c90505b6000640200000000841611156134b0576080700100000000000000000000000162e42fee8202901c90505b6000640100000000841611156134db5760807001000000000000000000000000b17217f68202901c90505b6000638000000084161115613505576080700100000000000000000000000058b90bfa8202901c90505b600063400000008416111561352f57608070010000000000000000000000002c5c85fc8202901c90505b60006320000000841611156135595760807001000000000000000000000000162e42fd8202901c90505b600063100000008416111561358357608070010000000000000000000000000b17217e8202901c90505b60006308000000841611156135ad5760807001000000000000000000000000058b90be8202901c90505b60006304000000841611156135d7576080700100000000000000000000000002c5c85e8202901c90505b600063020000008416111561360157608070010000000000000000000000000162e42e8202901c90505b600063010000008416111561362b576080700100000000000000000000000000b172168202901c90505b6000628000008416111561365457608070010000000000000000000000000058b90a8202901c90505b6000624000008416111561367d5760807001000000000000000000000000002c5c848202901c90505b600062200000841611156136a6576080700100000000000000000000000000162e418202901c90505b600062100000841611156136cf5760807001000000000000000000000000000b17208202901c90505b600062080000841611156136f8576080700100000000000000000000000000058b8f8202901c90505b6000620400008416111561372157608070010000000000000000000000000002c5c78202901c90505b6000620200008416111561374a5760807001000000000000000000000000000162e38202901c90505b6000620100008416111561377357608070010000000000000000000000000000b1718202901c90505b60006180008416111561379b5760807001000000000000000000000000000058b88202901c90505b6000614000841611156137c3576080700100000000000000000000000000002c5b8202901c90505b6000612000841611156137eb57608070010000000000000000000000000000162d8202901c90505b600061100084161115613813576080700100000000000000000000000000000b168202901c90505b60006108008416111561383b57608070010000000000000000000000000000058a8202901c90505b6000610400841611156138635760807001000000000000000000000000000002c48202901c90505b60006102008416111561388b5760807001000000000000000000000000000001618202901c90505b6000610100841611156138b35760807001000000000000000000000000000000b08202901c90505b60006080841611156138da5760807001000000000000000000000000000000578202901c90505b600060408416111561390157608070010000000000000000000000000000002b8202901c90505b60006020841611156139285760807001000000000000000000000000000000158202901c90505b600060108416111561394f57608070010000000000000000000000000000000a8202901c90505b60006008841611156139765760807001000000000000000000000000000000048202901c90505b600060048416111561399d5760807001000000000000000000000000000000018202901c90505b846139c5576dffffffffffffffffffffffffffff600f82901c169050613fff82019150613a01565b613ffe82116139f1576dffffffffffffffffffffffffffff600f82901c16905081613fff039150613a00565b613fef820381901c9050600091505b5b80607083901b1760801b955050505050505b919050565b6000808211613a2657600080fd5b60007001000000000000000000000000000000008310613a4e57608083901c92506080810190505b680100000000000000008310613a6c57604083901c92506040810190505b6401000000008310613a8657602083901c92506020810190505b620100008310613a9e57601083901c92506010810190505b6101008310613ab557600883901c92506008810190505b60108310613acb57600483901c92506004810190505b60048310613ae157600283901c92506002810190505b60028310613af0576001810190505b80915050919050565b600081359050613b08816143c5565b92915050565b600081359050613b1d816143dc565b92915050565b600081359050613b32816143f3565b92915050565b600060c08284031215613b4e57613b4d614374565b5b613b5860c0613fcc565b90506000613b6884828501613b0e565b6000830152506020613b7c84828501613b0e565b6020830152506040613b9084828501613bd8565b6040830152506060613ba484828501613bd8565b6060830152506080613bb884828501613af9565b60808301525060a0613bcc84828501613af9565b60a08301525092915050565b600081359050613be78161440a565b92915050565b600060208284031215613c0357613c02614379565b5b6000613c1184828501613af9565b91505092915050565b60008060408385031215613c3157613c30614379565b5b6000613c3f85828601613af9565b9250506020613c5085828601613af9565b9150509250929050565b600080600060608486031215613c7357613c72614379565b5b6000613c8186828701613af9565b9350506020613c9286828701613b23565b9250506040613ca386828701613af9565b9150509250925092565b60008060408385031215613cc457613cc3614379565b5b6000613cd285828601613af9565b9250506020613ce385828601613bd8565b9150509250929050565b60008060408385031215613d0457613d03614379565b5b6000613d1285828601613b0e565b9250506020613d2385828601613b0e565b9150509250929050565b600060c08284031215613d4357613d42614379565b5b6000613d5184828501613b38565b91505092915050565b600060208284031215613d7057613d6f614379565b5b6000613d7e84828501613bd8565b91505092915050565b60008060408385031215613d9e57613d9d614379565b5b6000613dac85828601613bd8565b9250506020613dbd85828601613bd8565b9150509250929050565b600080600060608486031215613de057613ddf614379565b5b6000613dee86828701613bd8565b9350506020613dff86828701613bd8565b9250506040613e1086828701613bd8565b9150509250925092565b60008060008060808587031215613e3457613e33614379565b5b6000613e4287828801613bd8565b9450506020613e5387828801613bd8565b9350506040613e6487828801613bd8565b9250506060613e7587828801613bd8565b91505092959194509250565b613e8a8161422e565b82525050565b613e998161423a565b82525050565b613ea881614270565b82525050565b6000613ebb600e83613ff1565b9150613ec68261439c565b602082019050919050565b613eda8161427d565b82525050565b6000602082019050613ef56000830184613e81565b92915050565b6000602082019050613f106000830184613e90565b92915050565b6000602082019050613f2b6000830184613e9f565b92915050565b60006020820190508181036000830152613f4a81613eae565b9050919050565b6000602082019050613f666000830184613ed1565b92915050565b6000604082019050613f816000830185613ed1565b613f8e6020830184613ed1565b9392505050565b6000606082019050613faa6000830186613ed1565b613fb76020830185613ed1565b613fc46040830184613ed1565b949350505050565b6000613fd6613fe7565b9050613fe28282614287565b919050565b6000604051905090565b600082825260208201905092915050565b600061400d8261427d565b91506140188361427d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561404d5761404c6142e7565b5b828201905092915050565b60006140638261427d565b915061406e8361427d565b92508261407e5761407d614316565b5b828204905092915050565b6000808291508390505b60018511156140d3578086048111156140af576140ae6142e7565b5b60018516156140be5780820291505b80810290506140cc8561438f565b9450614093565b94509492505050565b60006140e78261427d565b91506140f28361427d565b925061411f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614127565b905092915050565b60008261413757600190506141f3565b8161414557600090506141f3565b816001811461415b576002811461416557614194565b60019150506141f3565b60ff841115614177576141766142e7565b5b8360020a91508482111561418e5761418d6142e7565b5b506141f3565b5060208310610133831016604e8410600b84101617156141c95782820a9050838111156141c4576141c36142e7565b5b6141f3565b6141d68484846001614089565b925090508184048111156141ed576141ec6142e7565b5b81810290505b9392505050565b60006142058261427d565b91506142108361427d565b925082821015614223576142226142e7565b5b828203905092915050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b60008160000b9050919050565b6000819050919050565b6142908261437e565b810181811067ffffffffffffffff821117156142af576142ae614345565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6143ce8161423a565b81146143d957600080fd5b50565b6143e581614266565b81146143f057600080fd5b50565b6143fc81614270565b811461440757600080fd5b50565b6144138161427d565b811461441e57600080fd5b5056fea2646970667358221220a645ff23afabb91f69a28d9dac87ac75de6889e2b61ef2479a84b14cb204778464736f6c63430008060033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "calculatePriceChange(PoolSwapLibrary.PriceChangeData)": {
                "details": "This function should be called by the LeveragedPool.",
                "params": {
                    "priceChange": "The struct containing necessary data to calculate price change"
                }
            },
            "compareDecimals(bytes16,bytes16)": {
                "params": {
                    "x": "The first number to compare",
                    "y": "The second number to compare"
                },
                "returns": {
                    "_0": "-1 if x < y, 0 if x = y, or 1 if x > y"
                }
            },
            "convertDecimalToUInt(bytes16)": {
                "params": {
                    "ratio": "The value to convert"
                },
                "returns": {
                    "_0": "The converted value"
                }
            },
            "convertUIntToDecimal(uint256)": {
                "params": {
                    "amount": "The amount to convert"
                },
                "returns": {
                    "_0": "The amount as a IEEE754 quadruple precision number"
                }
            },
            "divInt(int256,int256)": {
                "params": {
                    "a": "The dividend",
                    "b": "The divisor"
                },
                "returns": {
                    "_0": "The quotient"
                }
            },
            "fromWad(uint256,uint256)": {
                "returns": {
                    "_0": "Converted non-WAD value"
                }
            },
            "getAmountOut(bytes16,uint256)": {
                "details": "This is useful for getting the amount of pool tokens to mint, and the amount of quote tokens to remit when minting and burning. Can also be used to provide the user with an estimate of their commit results.",
                "params": {
                    "amountIn": "The amount of tokens the user is providing. This can be quote tokens or pool tokens.",
                    "ratio": "The ratio to calculate. Use the getRatio function to calculate this"
                },
                "returns": {
                    "_0": "The amount of tokens to mint/remit to the user."
                }
            },
            "getBalancesAfterFees(uint256,uint256,uint256)": {
                "details": "Assumes shortBalance + longBalance >= reward",
                "params": {
                    "longBalance": "Long balance of the pool",
                    "reward": "Amount of keeper reward",
                    "shortBalance": "Short balance of the pool"
                },
                "returns": {
                    "_0": "shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid",
                    "_1": "longBalanceAfterFees Long balance of the pool after the keeper reward has been paid"
                }
            },
            "getLossAmount(bytes16,uint256)": {
                "params": {
                    "balance": "The balance of the losing pool",
                    "lossMultiplier": "The multiplier to use"
                }
            },
            "getLossMultiplier(bytes16,int8,bytes16)": {
                "params": {
                    "direction": "The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased",
                    "leverage": "The amount of leverage to apply",
                    "ratio": "The ratio of new price to old price"
                },
                "returns": {
                    "_0": "The multiplier"
                }
            },
            "getMintAmount(uint256,uint256,uint256,uint256)": {
                "params": {
                    "amountIn": "Commitment amount of collateral tokens going into the pool",
                    "balance": "Balance of the pool (no. of underlying collateral tokens in pool)",
                    "inverseShadowbalance": "Balance the shadow pool at time of mint",
                    "tokenSupply": "Total supply of pool tokens"
                },
                "returns": {
                    "_0": "Number of pool tokens to be minted"
                }
            },
            "getRatio(uint256,uint256)": {
                "details": "Rounds any overflow towards 0. If either parameter is zero, the ratio is 0",
                "params": {
                    "_denominator": "The \"per part\" side of the equation. If this is zero, the ratio is zero",
                    "_numerator": "The \"parts per\" side of the equation. If this is zero, the ratio is zero"
                },
                "returns": {
                    "_0": "the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)"
                }
            },
            "isBeforeFrontRunningInterval(uint256,uint256,uint256)": {
                "details": "If you try to uncommit AFTER the frontRunningInterval, it should revert."
            },
            "multiplyDecimalByUInt(bytes16,uint256)": {
                "params": {
                    "a": "The first term",
                    "b": "The second term"
                },
                "returns": {
                    "_0": "The product of a*b as a decimal"
                }
            }
        },
        "title": "Library for various useful (mostly) mathematical functions",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "calculatePriceChange(PoolSwapLibrary.PriceChangeData)": {
                "notice": "Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other."
            },
            "compareDecimals(bytes16,bytes16)": {
                "notice": "Compares two decimal numbers"
            },
            "convertDecimalToUInt(bytes16)": {
                "notice": "Converts a raw decimal value to a more readable uint256 value"
            },
            "convertUIntToDecimal(uint256)": {
                "notice": "Converts an integer value to a compatible decimal value"
            },
            "divInt(int256,int256)": {
                "notice": "Divides two integers"
            },
            "fromWad(uint256,uint256)": {
                "notice": "Converts from a WAD to normal value"
            },
            "getAmountOut(bytes16,uint256)": {
                "notice": "Gets the amount of tokens a user is entitled to according to the ratio"
            },
            "getBalancesAfterFees(uint256,uint256,uint256)": {
                "notice": "Gets the short and long balances after the keeper rewards have been paid out         Keeper rewards are paid proportionally to the short and long pool"
            },
            "getLossAmount(bytes16,uint256)": {
                "notice": "Calculates the amount to take from the losing pool"
            },
            "getLossMultiplier(bytes16,int8,bytes16)": {
                "notice": "Calculates the loss multiplier to apply to the losing pool. Includes the power leverage"
            },
            "getMintAmount(uint256,uint256,uint256,uint256)": {
                "notice": "Gets the number of pool tokens to be minted based on existing tokens"
            },
            "getRatio(uint256,uint256)": {
                "notice": "Calculates the ratio between two numbers"
            },
            "isBeforeFrontRunningInterval(uint256,uint256,uint256)": {
                "notice": "Returns true if the function is being called BEFORE the frontRunningInterval starts,         which is allowed for uncommitment."
            },
            "multiplyDecimalByUInt(bytes16,uint256)": {
                "notice": "Multiplies a decimal and an unsigned integer"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [],
        "types": null
    }
}
