{
  "address": "0xc4c4cA136507580130712eaB3245451DA786a7a0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "wad",
          "type": "int256"
        }
      ],
      "name": "fromWad",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceAndMetadata",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_price",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaler",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d84459be64ad39b091d9050d68c06dcfa9fbd02e6b72678c267d5e17c7135ff",
  "receipt": {
    "to": null,
    "from": "0x73A7Eb4fedcA6561F124d55A95f474c6A4ea7157",
    "contractAddress": "0xc4c4cA136507580130712eaB3245451DA786a7a0",
    "transactionIndex": 0,
    "gasUsed": "7301563",
    "logsBloom": "0x
    "blockHash": "0x6709734341e12f33c227c78a5b0f9135d87160bd0fc7db81662d28bdb0565faf",
    "transactionHash": "0x4d84459be64ad39b091d9050d68c06dcfa9fbd02e6b72678c267d5e17c7135ff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7353565,
        "transactionHash": "0x4d84459be64ad39b091d9050d68c06dcfa9fbd02e6b72678c267d5e17c7135ff",
        "address": "0xc4c4cA136507580130712eaB3245451DA786a7a0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000073a7eb4fedca6561f124d55a95f474c6a4ea7157"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6709734341e12f33c227c78a5b0f9135d87160bd0fc7db81662d28bdb0565faf"
      }
    ],
    "blockNumber": 7353565,
    "cumulativeGasUsed": "665603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c9973e7a27d00e656B9f153348dA46CaD70d03d"
  ],
  "solcInputHash": "9fa5c19a38f0b8dd3ef7cd9e4cdd4bc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"fromWad\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceAndMetadata\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_price\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaler\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceAndMetadata()\":{\"returns\":{\"_data\":\"The metadata. Implementations can choose what data to return here. This implementation returns the roundID\",\"_price\":\"The latest round data price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracle(address)\":{\"params\":{\"_oracle\":\"New address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"The oracle management contract for chainlink V3 oracles\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fromWad(int256)\":{\"notice\":\"Converts from a WAD value to a raw value based on the decimals in the feed\"},\"getPrice()\":{\"notice\":\"Returns the oracle price in WAD format\"},\"oracle()\":{\"notice\":\"The address of the feed oracle\"},\"setOracle(address)\":{\"notice\":\"Sets the address of the underlying oracle and related information\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/ChainlinkOracleWrapper.sol\":\"ChainlinkOracleWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xe8f8d98b515366730824d24269c7267eee7f0288cf737db8659acbb0c751eb53\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/implementation/ChainlinkOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title The oracle management contract for chainlink V3 oracles\\ncontract ChainlinkOracleWrapper is IOracleWrapper, Ownable {\\n    // #### Globals\\n    /**\\n     * @notice The address of the feed oracle\\n     */\\n    address public override oracle;\\n    uint256 private constant MAX_DECIMALS = 18;\\n    int256 public scaler;\\n\\n    // #### Functions\\n    constructor(address _oracle) {\\n        setOracle(_oracle);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the underlying oracle and related information\\n     * @param _oracle New address\\n     */\\n    function setOracle(address _oracle) public override onlyOwner {\\n        require(_oracle != address(0), \\\"Oracle cannot be 0 address\\\");\\n        oracle = _oracle;\\n        // reset the scaler for consistency\\n        uint8 _decimals = AggregatorV2V3Interface(oracle).decimals();\\n        require(_decimals <= MAX_DECIMALS, \\\"COA: too many decimals\\\");\\n        // scaler is always <= 10^18 and >= 1 so this cast is safe\\n        scaler = int256(10**(MAX_DECIMALS - _decimals));\\n    }\\n\\n    /**\\n     * @notice Returns the oracle price in WAD format\\n     */\\n    function getPrice() external view override returns (int256 _price) {\\n        (_price, ) = _latestRoundData();\\n    }\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here. This implementation returns the roundID\\n     */\\n    function getPriceAndMetadata() external view override returns (int256 _price, bytes memory _data) {\\n        (int256 price, uint80 roundID) = _latestRoundData();\\n        _data = abi.encodePacked(roundID);\\n        return (price, _data);\\n    }\\n\\n    /**\\n     * @dev An internal function that gets the WAD value price and latest roundID\\n     */\\n    function _latestRoundData() internal view returns (int256 _price, uint80 _roundID) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            uint256 startedAt,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = AggregatorV2V3Interface(oracle).latestRoundData();\\n        require(answeredInRound >= roundID, \\\"COA: Stale answer\\\");\\n        require(timeStamp != 0, \\\"COA: Round incomplete\\\");\\n        return (toWad(price), roundID);\\n    }\\n\\n    /**\\n     * @notice Converts a raw value to a WAD value based on the decimals in the feed\\n     * @dev This allows consistency for oracles used throughout the protocol\\n     *      and allows oracles to have their decimals changed without affecting\\n     *      the market itself\\n     */\\n    function toWad(int256 raw) internal view returns (int256) {\\n        return raw * scaler;\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD value to a raw value based on the decimals in the feed\\n     */\\n    function fromWad(int256 wad) external view override returns (int256) {\\n        return wad / scaler;\\n    }\\n}\\n\",\"keccak256\":\"0xa9360d1f9f64fbdb67052e915f19a6d9f46005085dfe40812afdcc2b17f4ddde\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The oracle wrapper contract interface\\ninterface IOracleWrapper {\\n    function oracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Sets the oracle for a given market\\n     * @dev Should be secured, ideally only allowing the PoolKeeper to access\\n     * @param _oracle The oracle to set for the market\\n     */\\n    function setOracle(address _oracle) external;\\n\\n    /**\\n     * @notice Returns the current price for the asset in question\\n     * @return The latest price\\n     */\\n    function getPrice() external view returns (int256);\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here\\n     */\\n    function getPriceAndMetadata() external view returns (int256 _price, bytes memory _data);\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(int256 wad) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x884ce9d1b49a7372a50ac2350ea6c1529cd7a9da8e5b1c67ecee7d032a2166f9\",\"license\":\"CC-BY-NC-ND-4.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000d4738038062000d47833981016040819052620000349162000268565b6200003f3362000051565b6200004a81620000a1565b50620003f6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001595760405162461bcd60e51b815260206004820152601a60248201527f4f7261636c652063616e6e6f74206265203020616464726573730000000000006044820152606401620000f8565b600180546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b158015620001b157600080fd5b505afa158015620001c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ec91906200029a565b905060128160ff161115620002445760405162461bcd60e51b815260206004820152601660248201527f434f413a20746f6f206d616e7920646563696d616c73000000000000000000006044820152606401620000f8565b6200025460ff82166012620003c6565b6200026190600a62000308565b6002555050565b6000602082840312156200027b57600080fd5b81516001600160a01b03811681146200029357600080fd5b9392505050565b600060208284031215620002ad57600080fd5b815160ff811681146200029357600080fd5b600181815b8085111562000300578160001904821115620002e457620002e4620003e0565b80851615620002f257918102915b93841c9390800290620002c4565b509250929050565b60006200029383836000826200032157506001620003c0565b816200033057506000620003c0565b8160018114620003495760028114620003545762000374565b6001915050620003c0565b60ff841115620003685762000368620003e0565b50506001821b620003c0565b5060208310610133831016604e8410600b841016171562000399575081810a620003c0565b620003a58383620002bf565b8060001904821115620003bc57620003bc620003e0565b0290505b92915050565b600082821015620003db57620003db620003e0565b500390565b634e487b7160e01b600052601160045260246000fd5b61094180620004066000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637dc0d1d0116100665780637dc0d1d0146100e45780638da5cb5b1461010f57806398d5fdca14610120578063db6d8fcf14610128578063f2fde38b1461013e57600080fd5b80633c1e6ff514610098578063412ad1cc146100b4578063715018a6146100c75780637adbf973146100d1575b600080fd5b6100a160025481565b6040519081526020015b60405180910390f35b6100a16100c2366004610614565b610151565b6100cf610167565b005b6100cf6100df3660046105e4565b6101a6565b6001546100f7906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b6000546001600160a01b03166100f7565b6100a1610324565b610130610334565b6040516100ab9291906106a0565b6100cf61014c3660046105e4565b610378565b6000600254826101619190610732565b92915050565b6000546001600160a01b0316331461019a5760405162461bcd60e51b8152600401610191906106fd565b60405180910390fd5b6101a46000610413565b565b6000546001600160a01b031633146101d05760405162461bcd60e51b8152600401610191906106fd565b6001600160a01b0381166102265760405162461bcd60e51b815260206004820152601a60248201527f4f7261636c652063616e6e6f74206265203020616464726573730000000000006044820152606401610191565b600180546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b5919061067d565b905060128160ff1611156103045760405162461bcd60e51b8152602060048201526016602482015275434f413a20746f6f206d616e7920646563696d616c7360501b6044820152606401610191565b61031260ff821660126108de565b61031d90600a6107b1565b6002555050565b600061032e610463565b50919050565b60006060600080610343610463565b6040805160b09290921b6001600160b01b03191660208301528051600a818403018152602a9092019052909590945092505050565b6000546001600160a01b031633146103a25760405162461bcd60e51b8152600401610191906106fd565b6001600160a01b0381166104075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b61041081610413565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156104bc57600080fd5b505afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f4919061062d565b945094509450945094508469ffffffffffffffffffff168169ffffffffffffffffffff16101561055a5760405162461bcd60e51b815260206004820152601160248201527021a7a09d1029ba30b6329030b739bbb2b960791b6044820152606401610191565b8161059f5760405162461bcd60e51b8152602060048201526015602482015274434f413a20526f756e6420696e636f6d706c65746560581b6044820152606401610191565b6105a8846105b5565b9794965093945050505050565b6000600254826101619190610859565b805169ffffffffffffffffffff811681146105df57600080fd5b919050565b6000602082840312156105f657600080fd5b81356001600160a01b038116811461060d57600080fd5b9392505050565b60006020828403121561062657600080fd5b5035919050565b600080600080600060a0868803121561064557600080fd5b61064e866105c5565b9450602086015193506040860151925060608601519150610671608087016105c5565b90509295509295909350565b60006020828403121561068f57600080fd5b815160ff8116811461060d57600080fd5b82815260006020604081840152835180604085015260005b818110156106d4578581018301518582016060015282016106b8565b818111156106e6576000606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261074f57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610769576107696108f5565b500590565b600181815b808511156107a957816000190482111561078f5761078f6108f5565b8085161561079c57918102915b93841c9390800290610773565b509250929050565b600061060d83836000826107c757506001610161565b816107d457506000610161565b81600181146107ea57600281146107f457610810565b6001915050610161565b60ff841115610805576108056108f5565b50506001821b610161565b5060208310610133831016604e8410600b8410161715610833575081810a610161565b61083d838361076e565b8060001904821115610851576108516108f5565b029392505050565b60006001600160ff1b038184138284138082168684048611161561087f5761087f6108f5565b600160ff1b600087128281168783058912161561089e5761089e6108f5565b600087129250878205871284841616156108ba576108ba6108f5565b878505871281841616156108d0576108d06108f5565b505050929093029392505050565b6000828210156108f0576108f06108f5565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122054168f4e840d110583946cff4ffb7d33aec719a7f77b861340b51dac23e14bf064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637dc0d1d0116100665780637dc0d1d0146100e45780638da5cb5b1461010f57806398d5fdca14610120578063db6d8fcf14610128578063f2fde38b1461013e57600080fd5b80633c1e6ff514610098578063412ad1cc146100b4578063715018a6146100c75780637adbf973146100d1575b600080fd5b6100a160025481565b6040519081526020015b60405180910390f35b6100a16100c2366004610614565b610151565b6100cf610167565b005b6100cf6100df3660046105e4565b6101a6565b6001546100f7906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b6000546001600160a01b03166100f7565b6100a1610324565b610130610334565b6040516100ab9291906106a0565b6100cf61014c3660046105e4565b610378565b6000600254826101619190610732565b92915050565b6000546001600160a01b0316331461019a5760405162461bcd60e51b8152600401610191906106fd565b60405180910390fd5b6101a46000610413565b565b6000546001600160a01b031633146101d05760405162461bcd60e51b8152600401610191906106fd565b6001600160a01b0381166102265760405162461bcd60e51b815260206004820152601a60248201527f4f7261636c652063616e6e6f74206265203020616464726573730000000000006044820152606401610191565b600180546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b5919061067d565b905060128160ff1611156103045760405162461bcd60e51b8152602060048201526016602482015275434f413a20746f6f206d616e7920646563696d616c7360501b6044820152606401610191565b61031260ff821660126108de565b61031d90600a6107b1565b6002555050565b600061032e610463565b50919050565b60006060600080610343610463565b6040805160b09290921b6001600160b01b03191660208301528051600a818403018152602a9092019052909590945092505050565b6000546001600160a01b031633146103a25760405162461bcd60e51b8152600401610191906106fd565b6001600160a01b0381166104075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b61041081610413565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156104bc57600080fd5b505afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f4919061062d565b945094509450945094508469ffffffffffffffffffff168169ffffffffffffffffffff16101561055a5760405162461bcd60e51b815260206004820152601160248201527021a7a09d1029ba30b6329030b739bbb2b960791b6044820152606401610191565b8161059f5760405162461bcd60e51b8152602060048201526015602482015274434f413a20526f756e6420696e636f6d706c65746560581b6044820152606401610191565b6105a8846105b5565b9794965093945050505050565b6000600254826101619190610859565b805169ffffffffffffffffffff811681146105df57600080fd5b919050565b6000602082840312156105f657600080fd5b81356001600160a01b038116811461060d57600080fd5b9392505050565b60006020828403121561062657600080fd5b5035919050565b600080600080600060a0868803121561064557600080fd5b61064e866105c5565b9450602086015193506040860151925060608601519150610671608087016105c5565b90509295509295909350565b60006020828403121561068f57600080fd5b815160ff8116811461060d57600080fd5b82815260006020604081840152835180604085015260005b818110156106d4578581018301518582016060015282016106b8565b818111156106e6576000606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261074f57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610769576107696108f5565b500590565b600181815b808511156107a957816000190482111561078f5761078f6108f5565b8085161561079c57918102915b93841c9390800290610773565b509250929050565b600061060d83836000826107c757506001610161565b816107d457506000610161565b81600181146107ea57600281146107f457610810565b6001915050610161565b60ff841115610805576108056108f5565b50506001821b610161565b5060208310610133831016604e8410600b8410161715610833575081810a610161565b61083d838361076e565b8060001904821115610851576108516108f5565b029392505050565b60006001600160ff1b038184138284138082168684048611161561087f5761087f6108f5565b600160ff1b600087128281168783058912161561089e5761089e6108f5565b600087129250878205871284841616156108ba576108ba6108f5565b878505871281841616156108d0576108d06108f5565b505050929093029392505050565b6000828210156108f0576108f06108f5565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122054168f4e840d110583946cff4ffb7d33aec719a7f77b861340b51dac23e14bf064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceAndMetadata()": {
        "returns": {
          "_data": "The metadata. Implementations can choose what data to return here. This implementation returns the roundID",
          "_price": "The latest round data price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracle(address)": {
        "params": {
          "_oracle": "New address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "The oracle management contract for chainlink V3 oracles",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fromWad(int256)": {
        "notice": "Converts from a WAD value to a raw value based on the decimals in the feed"
      },
      "getPrice()": {
        "notice": "Returns the oracle price in WAD format"
      },
      "oracle()": {
        "notice": "The address of the feed oracle"
      },
      "setOracle(address)": {
        "notice": "Sets the address of the underlying oracle and related information"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 110,
        "contract": "contracts/implementation/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6729,
        "contract": "contracts/implementation/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6734,
        "contract": "contracts/implementation/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
        "label": "scaler",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      }
    }
  }
}