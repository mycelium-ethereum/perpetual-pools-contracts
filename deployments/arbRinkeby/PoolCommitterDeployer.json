{
    "address": "0xffDBF48A5cD6eA02d3DD3ffDf5B6cc50974AC9a3",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_factory",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "uint128",
                    "name": "_minimumCommitSize",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "_maximumCommitQueueLength",
                    "type": "uint128"
                }
            ],
            "name": "deploy",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "factory",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x43948cea9afe5554f470eae0dfe92e3061bbe30afa5c4503fdbbfb2a9bff19e0",
    "receipt": {
        "to": null,
        "from": "0x73A7Eb4fedcA6561F124d55A95f474c6A4ea7157",
        "contractAddress": "0xffDBF48A5cD6eA02d3DD3ffDf5B6cc50974AC9a3",
        "transactionIndex": 0,
        "gasUsed": "109946485",
        "logsBloom": "0x
        "blockHash": "0xb25895edb5bf4dea99e592b9624f64ad7c6f63f44474baf2894e373461b87507",
        "transactionHash": "0x43948cea9afe5554f470eae0dfe92e3061bbe30afa5c4503fdbbfb2a9bff19e0",
        "logs": [],
        "blockNumber": 7353589,
        "cumulativeGasUsed": "84726524",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5B1B8eEB1401aAC76bA3e02885FCb725109E3F9b"],
    "solcInputHash": "9fa5c19a38f0b8dd3ef7cd9e4cdd4bc0",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minimumCommitSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maximumCommitQueueLength\",\"type\":\"uint128\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The deployer of the PoolCommitter contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/PoolCommitterDeployer.sol\":\"PoolCommitterDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"abdk-libraries-solidity/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n  /*\\n   * 0.\\n   */\\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n  /*\\n   * -0.\\n   */\\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n  /*\\n   * +Infinity.\\n   */\\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n  /*\\n   * -Infinity.\\n   */\\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n  /*\\n   * Canonical NaN value.\\n   */\\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n  /**\\n   * Convert signed 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromInt (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 256-bit integer number\\n   * rounding towards zero.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 256-bit integer number\\n   */\\n  function toInt (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16638); // Overflow\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        uint256 result = x;\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into unsigned 256-bit integer number\\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n   * without error, because they are rounded to zero.\\n   *\\n   * @param x quadruple precision number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function toUInt (bytes16 x) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\\n\\n      require (exponent <= 16638); // Overflow\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 128.128 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from128x128 (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 128.128 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 128.128 bit fixed point number\\n   */\\n  function to128x128 (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16510); // Overflow\\n      if (exponent < 16255) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16367) result >>= 16367 - exponent;\\n      else if (exponent > 16367) result <<= exponent - 16367;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 64.64 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from64x64 (int128 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint128 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 64.64 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 64.64 bit fixed point number\\n   */\\n  function to64x64 (bytes16 x) internal pure returns (int128) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16446); // Overflow\\n      if (exponent < 16319) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16431) result >>= 16431 - exponent;\\n      else if (exponent > 16431) result <<= exponent - 16431;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x80000000000000000000000000000000);\\n        return -int128 (int256 (result)); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (int256 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert octuple precision number into quadruple precision number.\\n   *\\n   * @param x octuple precision number\\n   * @return quadruple precision number\\n   */\\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n      uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\\n      uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFFF) {\\n        if (significand > 0) return NaN;\\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      }\\n\\n      if (exponent > 278526)\\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      else if (exponent < 245649)\\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n      else if (exponent < 245761) {\\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 124;\\n        exponent -= 245760;\\n      }\\n\\n      uint128 result = uint128 (significand | exponent << 112);\\n      if (negative) result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into octuple precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return octuple precision number\\n   */\\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 245649 + msb;\\n        }\\n      } else {\\n        result <<= 124;\\n        exponent += 245760;\\n      }\\n\\n      result |= exponent << 236;\\n      if (uint128 (x) >= 0x80000000000000000000000000000000)\\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n      return bytes32 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert double precision number into quadruple precision number.\\n   *\\n   * @param x double precision number\\n   * @return quadruple precision number\\n   */\\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 exponent = uint64 (x) >> 52 & 0x7FF;\\n\\n      uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 15309 + msb;\\n        }\\n      } else {\\n        result <<= 60;\\n        exponent += 15360;\\n      }\\n\\n      result |= exponent << 112;\\n      if (x & 0x8000000000000000 > 0)\\n        result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (uint128 (result));\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into double precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return double precision number\\n   */\\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\\n    unchecked {\\n      bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\\n\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) {\\n        if (significand > 0) return 0x7FF8000000000000; // NaN\\n        else return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      }\\n\\n      if (exponent > 17406)\\n        return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      else if (exponent < 15309)\\n        return negative ?\\n            bytes8 (0x8000000000000000) : // -0\\n            bytes8 (0x0000000000000000); // 0\\n      else if (exponent < 15361) {\\n        significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 60;\\n        exponent -= 15360;\\n      }\\n\\n      uint64 result = uint64 (significand | exponent << 52);\\n      if (negative) result |= 0x8000000000000000;\\n\\n      return bytes8 (result);\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is NaN, false otherwise\\n   */\\n  function isNaN (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is positive or negative\\n   * infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is positive or negative infinity, false otherwise\\n   */\\n  function isInfinity (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \\n   *\\n   * @param x quadruple precision number\\n   * @return sign of x\\n   */\\n  function sign (bytes16 x) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      if (absoluteX == 0) return 0;\\n      else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\\n      else return 1;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n   * arguments are infinities of the same sign. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return sign (x - y)\\n   */\\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      // Not infinities of the same sign\\n      require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n      if (x == y) return 0;\\n      else {\\n        bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\\n        bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\\n\\n        if (negativeX) {\\n          if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\\n          else return -1; \\n        } else {\\n          if (negativeY) return 1;\\n          else return absoluteX > absoluteY ? int8 (1) : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n   * anything. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return true if x equals to y, false otherwise\\n   */\\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\\n    unchecked {\\n      if (x == y) {\\n        return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n          0x7FFF0000000000000000000000000000;\\n      } else return false;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Special values behave in the following way:\\n   *\\n   * NaN + x = NaN for any x.\\n   * Infinity + x = Infinity for any finite x.\\n   * -Infinity + x = -Infinity for any finite x.\\n   * Infinity + Infinity = Infinity.\\n   * -Infinity + -Infinity = -Infinity.\\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) { \\n          if (x == y) return x;\\n          else return NaN;\\n        } else return x; \\n      } else if (yExponent == 0x7FFF) return y;\\n      else {\\n        bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n        else {\\n          int256 delta = int256 (xExponent) - int256 (yExponent);\\n  \\n          if (xSign == ySign) {\\n            if (delta > 112) return x;\\n            else if (delta > 0) ySignifier >>= uint256 (delta);\\n            else if (delta < -112) return y;\\n            else if (delta < 0) {\\n              xSignifier >>= uint256 (-delta);\\n              xExponent = yExponent;\\n            }\\n  \\n            xSignifier += ySignifier;\\n  \\n            if (xSignifier >= 0x20000000000000000000000000000) {\\n              xSignifier >>= 1;\\n              xExponent += 1;\\n            }\\n  \\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else {\\n              if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n              else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  \\n              return bytes16 (uint128 (\\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                  (xExponent << 112) |\\n                  xSignifier)); \\n            }\\n          } else {\\n            if (delta > 0) {\\n              xSignifier <<= 1;\\n              xExponent -= 1;\\n            } else if (delta < 0) {\\n              ySignifier <<= 1;\\n              xExponent = yExponent - 1;\\n            }\\n\\n            if (delta > 112) ySignifier = 1;\\n            else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\\n            else if (delta < -112) xSignifier = 1;\\n            else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\\n\\n            if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n            else {\\n              xSignifier = ySignifier - xSignifier;\\n              xSign = ySign;\\n            }\\n\\n            if (xSignifier == 0)\\n              return POSITIVE_ZERO;\\n\\n            uint256 msb = mostSignificantBit (xSignifier);\\n\\n            if (msb == 113) {\\n              xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n              xExponent += 1;\\n            } else if (msb < 112) {\\n              uint256 shift = 112 - msb;\\n              if (xExponent > shift) {\\n                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                xExponent -= shift;\\n              } else {\\n                xSignifier <<= xExponent - 1;\\n                xExponent = 0;\\n              }\\n            } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else return bytes16 (uint128 (\\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                (xExponent << 112) |\\n                xSignifier));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Special values behave in the following way:\\n   *\\n   * NaN - x = NaN for any x.\\n   * Infinity - x = Infinity for any finite x.\\n   * -Infinity - x = -Infinity for any finite x.\\n   * Infinity - -Infinity = Infinity.\\n   * -Infinity - Infinity = -Infinity.\\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      return add (x, y ^ 0x80000000000000000000000000000000);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y.  Special values behave in the following way:\\n   *\\n   * NaN * x = NaN for any x.\\n   * Infinity * x = Infinity for any finite positive x.\\n   * Infinity * x = -Infinity for any finite negative x.\\n   * -Infinity * x = -Infinity for any finite positive x.\\n   * -Infinity * x = Infinity for any finite negative x.\\n   * Infinity * 0 = NaN.\\n   * -Infinity * 0 = NaN.\\n   * Infinity * Infinity = Infinity.\\n   * Infinity * -Infinity = -Infinity.\\n   * -Infinity * Infinity = -Infinity.\\n   * -Infinity * -Infinity = Infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) {\\n          if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n          else return NaN;\\n        } else {\\n          if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return x ^ y & 0x80000000000000000000000000000000;\\n        }\\n      } else if (yExponent == 0x7FFF) {\\n          if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return y ^ x & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        xSignifier *= ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        xExponent += yExponent;\\n\\n        uint256 msb =\\n          xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\\n          xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\\n          mostSignificantBit (xSignifier);\\n\\n        if (xExponent + msb < 16496) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb < 16608) { // Subnormal\\n          if (xExponent < 16496)\\n            xSignifier >>= 16496 - xExponent;\\n          else if (xExponent > 16496)\\n            xSignifier <<= xExponent - 16496;\\n          xExponent = 0;\\n        } else if (xExponent + msb > 49373) {\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else {\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n          else if (msb < 112)\\n            xSignifier <<= 112 - msb;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb - 16607;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y.  Special values behave in the following way:\\n   *\\n   * NaN / x = NaN for any x.\\n   * x / NaN = NaN for any x.\\n   * Infinity / x = Infinity for any finite non-negative x.\\n   * Infinity / x = -Infinity for any finite negative x including -0.\\n   * -Infinity / x = -Infinity for any finite non-negative x.\\n   * -Infinity / x = Infinity for any finite negative x including -0.\\n   * x / Infinity = 0 for any finite non-negative x.\\n   * x / -Infinity = -0 for any finite non-negative x.\\n   * x / Infinity = -0 for any finite non-negative x including -0.\\n   * x / -Infinity = 0 for any finite non-negative x including -0.\\n   * \\n   * Infinity / Infinity = NaN.\\n   * Infinity / -Infinity = -NaN.\\n   * -Infinity / Infinity = -NaN.\\n   * -Infinity / -Infinity = NaN.\\n   *\\n   * Division by zero behaves in the following way:\\n   *\\n   * x / 0 = Infinity for any finite positive x.\\n   * x / -0 = -Infinity for any finite positive x.\\n   * x / 0 = -Infinity for any finite negative x.\\n   * x / -0 = Infinity for any finite negative x.\\n   * 0 / 0 = NaN.\\n   * 0 / -0 = NaN.\\n   * -0 / 0 = NaN.\\n   * -0 / -0 = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) return NaN;\\n        else return x ^ y & 0x80000000000000000000000000000000;\\n      } else if (yExponent == 0x7FFF) {\\n        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) {\\n          if (xSignifier != 0) {\\n            uint shift = 226 - mostSignificantBit (xSignifier);\\n\\n            xSignifier <<= shift;\\n\\n            xExponent = 1;\\n            yExponent += shift - 114;\\n          }\\n        }\\n        else {\\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n        }\\n\\n        xSignifier = xSignifier / ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        assert (xSignifier >= 0x1000000000000000000000000000);\\n\\n        uint256 msb =\\n          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\\n          xSignifier >= 0x40000000000000000000000000000 ? 114 :\\n          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n        if (xExponent + msb > yExponent + 16497) { // Overflow\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16380  < yExponent) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\\n          if (xExponent + 16380 > yExponent)\\n            xSignifier <<= xExponent + 16380 - yExponent;\\n          else if (xExponent + 16380 < yExponent)\\n            xSignifier >>= yExponent - xExponent - 16380;\\n\\n          xExponent = 0;\\n        } else { // Normal\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb + 16269 - yExponent;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function neg (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x ^ 0x80000000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function abs (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n  }\\n\\n  /**\\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n          bool oddExponent = xExponent & 0x1 == 0;\\n          xExponent = xExponent + 16383 >> 1;\\n\\n          if (oddExponent) {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 113;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (226 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          } else {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 112;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (225 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          }\\n\\n          uint256 r = 0x10000000000000000000000000000;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n          uint256 r1 = xSignifier / r;\\n          if (r1 < r) r = r1;\\n\\n          return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n          bool resultNegative;\\n          uint256 resultExponent = 16495;\\n          uint256 resultSignifier;\\n\\n          if (xExponent >= 0x3FFF) {\\n            resultNegative = false;\\n            resultSignifier = xExponent - 0x3FFF;\\n            xSignifier <<= 15;\\n          } else {\\n            resultNegative = true;\\n            if (xSignifier >= 0x10000000000000000000000000000) {\\n              resultSignifier = 0x3FFE - xExponent;\\n              xSignifier <<= 15;\\n            } else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              resultSignifier = 16493 - msb;\\n              xSignifier <<= 127 - msb;\\n            }\\n          }\\n\\n          if (xSignifier == 0x80000000000000000000000000000000) {\\n            if (resultNegative) resultSignifier += 1;\\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\\n            resultSignifier <<= shift;\\n            resultExponent -= shift;\\n          } else {\\n            uint256 bb = resultNegative ? 1 : 0;\\n            while (resultSignifier < 0x10000000000000000000000000000) {\\n              resultSignifier <<= 1;\\n              resultExponent -= 1;\\n  \\n              xSignifier *= xSignifier;\\n              uint256 b = xSignifier >> 255;\\n              resultSignifier += b ^ bb;\\n              xSignifier >>= 127 + b;\\n            }\\n          }\\n\\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\\n              resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function ln (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n    }\\n  }\\n\\n  /**\\n   * Calculate 2^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n      else if (xExponent > 16397)\\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n      else if (xExponent < 16255)\\n        return 0x3FFF0000000000000000000000000000;\\n      else {\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        if (xExponent > 16367)\\n          xSignifier <<= xExponent - 16367;\\n        else if (xExponent < 16367)\\n          xSignifier >>= 16367 - xExponent;\\n\\n        if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\\n          return POSITIVE_ZERO;\\n\\n        if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n          return POSITIVE_INFINITY;\\n\\n        uint256 resultExponent = xSignifier >> 128;\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xNegative && xSignifier != 0) {\\n          xSignifier = ~xSignifier;\\n          resultExponent += 1;\\n        }\\n\\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\\n        if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n        if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n        if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n        if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n        if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n        if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n        if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n        if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n        if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n        if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n        if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n        if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n        if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n        if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n        if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n        if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n        if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n        if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n        if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n        if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n        if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n        if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n        if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n        if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n        if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n        if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n        if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n        if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n        if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n        if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n        if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n        if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n        if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n        if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n        if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n        if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n        if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n        if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n        if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n        if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n        if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n        if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n        if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n        if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n        if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n        if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n        if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n        if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n        if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n        if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n        if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n        if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n        if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n        if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n        if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n        if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n        if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n        if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n        if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n        if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n        if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n        if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n        if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n\\n        if (!xNegative) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent += 0x3FFF;\\n        } else if (resultExponent <= 0x3FFE) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent = 0x3FFF - resultExponent;\\n        } else {\\n          resultSignifier = resultSignifier >> resultExponent - 16367;\\n          resultExponent = 0;\\n        }\\n\\n        return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate e^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function exp (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n    }\\n  }\\n\\n  /**\\n   * Get index of the most significant non-zero bit in binary representation of\\n   * x.  Reverts if x is zero.\\n   *\\n   * @return index of the most significant non-zero bit in binary representation\\n   *         of x\\n   */\\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\\n    unchecked {\\n      require (x > 0);\\n\\n      uint256 result = 0;\\n\\n      if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\\n      if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\\n      if (x >= 0x100000000) { x >>= 32; result += 32; }\\n      if (x >= 0x10000) { x >>= 16; result += 16; }\\n      if (x >= 0x100) { x >>= 8; result += 8; }\\n      if (x >= 0x10) { x >>= 4; result += 4; }\\n      if (x >= 0x4) { x >>= 2; result += 2; }\\n      if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n      return result;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9694a9f6fcadd4fa917efa674de42a74b8fbab8d68924f771ea5cc5e1a301434\",\"license\":\"BSD-4-Clause\"},\"contracts/implementation/PoolCommitter.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./PoolSwapLibrary.sol\\\";\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\n\\n/// @title This contract is responsible for handling commitment logic\\ncontract PoolCommitter is IPoolCommitter, Ownable {\\n    // #### Globals\\n\\n    address public leveragedPool;\\n    // Index 0 is the LONG token, index 1 is the SHORT token.\\n    // Fetched from the LeveragedPool when leveragedPool is set\\n    address[2] public tokens;\\n\\n    // MAX_UINT128\\n    uint128 public constant NO_COMMITS_REMAINING = type(uint128).max;\\n    uint128 public earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n    uint128 public latestCommitUnexecuted;\\n    uint128 public commitIDCounter;\\n    uint128 public minimumCommitSize; // The minimum amount (in settlement tokens) that a user can commit in a single commitment\\n    uint128 public maximumCommitQueueLength; // The maximum number of commitments that can be made for a given updateInterval\\n    uint128 public currentCommitQueueLength;\\n    uint256 public lastQueueLengthReset; // The time the queue length was last reset\\n    mapping(uint128 => Commit) public commits;\\n    mapping(uint256 => uint256) public shadowPools;\\n\\n    address public factory;\\n    address public governance;\\n\\n    enum ScanDirection {\\n        UP,\\n        DOWN\\n    }\\n\\n    constructor(\\n        address _factory,\\n        uint128 _minimumCommitSize,\\n        uint128 _maximumCommitQueueLength\\n    ) {\\n        require(_factory != address(0), \\\"Factory address cannot be null\\\");\\n        // set the factory on deploy\\n        factory = _factory;\\n        minimumCommitSize = _minimumCommitSize;\\n        maximumCommitQueueLength = _maximumCommitQueueLength;\\n        governance = IPoolFactory(factory).getOwner();\\n        lastQueueLengthReset = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Commit to minting/burning long/short tokens after the next price change\\n     * @param commitType Type of commit you're doing (Long vs Short, Mint vs Burn)\\n     * @param amount Amount of quote tokens you want to commit to minting; OR amount of pool\\n     *               tokens you want to burn\\n     */\\n    function commit(CommitType commitType, uint256 amount) external override {\\n        require(currentCommitQueueLength < maximumCommitQueueLength, \\\"Too many commits in interval\\\");\\n        require(amount > 0, \\\"Amount must not be zero\\\");\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 updateInterval = pool.updateInterval();\\n        uint256 lastPriceTimestamp = pool.lastPriceTimestamp();\\n        uint256 frontRunningInterval = pool.frontRunningInterval();\\n\\n        if (\\n            PoolSwapLibrary.isBeforeFrontRunningInterval(\\n                lastQueueLengthReset,\\n                lastPriceTimestamp,\\n                updateInterval,\\n                frontRunningInterval\\n            ) &&\\n            !PoolSwapLibrary.isBeforeFrontRunningInterval(\\n                block.timestamp,\\n                lastPriceTimestamp,\\n                updateInterval,\\n                frontRunningInterval\\n            )\\n        ) {\\n            /**\\n             * The lastQueueLengthReset occured before the frontRunningInterval,\\n             * and we are within the frontRunningInterval,\\n             * so this is the first commit since frontRunningInterval has passed.\\n             * Note: If and only if there are no `commit` calls within the frontRunningInterval, then\\n             * `executeAllCommitments` will reset `currentCommitQueueLength` and update\\n             * `lastQueueLengthReset`.\\n             */\\n            delete currentCommitQueueLength;\\n            lastQueueLengthReset = block.timestamp;\\n        }\\n        currentCommitQueueLength += 1;\\n        uint128 currentCommitIDCounter = commitIDCounter;\\n        commitIDCounter = currentCommitIDCounter + 1;\\n\\n        // create commitment\\n        commits[currentCommitIDCounter] = Commit({\\n            commitType: commitType,\\n            amount: amount,\\n            owner: msg.sender,\\n            created: uint40(block.timestamp)\\n        });\\n        uint256 _commitType = uint256(commitType);\\n        shadowPools[_commitType] = shadowPools[_commitType] + amount;\\n\\n        if (earliestCommitUnexecuted == NO_COMMITS_REMAINING) {\\n            earliestCommitUnexecuted = currentCommitIDCounter;\\n        }\\n        latestCommitUnexecuted = currentCommitIDCounter;\\n\\n        emit CreateCommit(currentCommitIDCounter, amount, commitType);\\n        uint256 shortBalance = pool.shortBalance();\\n        uint256 longBalance = pool.longBalance();\\n\\n        // pull in tokens\\n        if (commitType == CommitType.LongMint || commitType == CommitType.ShortMint) {\\n            // minting: pull in the quote token from the committer\\n            require(amount >= minimumCommitSize, \\\"Amount less than minimum\\\");\\n            pool.quoteTokenTransferFrom(msg.sender, leveragedPool, amount);\\n        } else if (commitType == CommitType.LongBurn) {\\n            // long burning: pull in long pool tokens from committer\\n\\n            // A theoretical amount based on current ratio. Used to get same units as minimumCommitSize\\n            uint256 amountOut = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n                IERC20(tokens[0]).totalSupply(),\\n                amount,\\n                longBalance,\\n                shadowPools[_commitType]\\n            );\\n            require(amountOut >= minimumCommitSize, \\\"Amount less than minimum\\\");\\n            pool.burnTokens(0, amount, msg.sender);\\n        } else if (commitType == CommitType.ShortBurn) {\\n            // short burning: pull in short pool tokens from committer\\n\\n            // A theoretical amount based on current ratio. Used to get same units as minimumCommitSize\\n            uint256 amountOut = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n                IERC20(tokens[1]).totalSupply(),\\n                amount,\\n                shortBalance,\\n                shadowPools[_commitType]\\n            );\\n            require(amountOut >= minimumCommitSize, \\\"Amount less than minimum\\\");\\n            pool.burnTokens(1, amount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev When required, scan through the from earliestCommitUnexecuted to latestCommitUnexecuted\\n     *      and set these variables to be correct based on which of the commits between them are\\n     *      uncommited.\\n     *      This is useful for when you uncommit the first or last commit, and you can scan backwards or forwards\\n     *      in order to find the new value earliestCommitUnexecuted or latestCommitUnexecuted should be set to.\\n     * @param direction UP if going from earliest to latest, DOWN if going from latest to earliest.\\n     */\\n    function skipDeletedMiddleCommits(ScanDirection direction) internal {\\n        if (direction == ScanDirection.UP) {\\n            uint128 nextEarliestCommitUnexecuted = earliestCommitUnexecuted;\\n            while (nextEarliestCommitUnexecuted <= latestCommitUnexecuted) {\\n                IPoolCommitter.Commit memory _commit = commits[nextEarliestCommitUnexecuted];\\n                if (_commit.owner == address(0)) {\\n                    // Commit deleted (uncommitted) or already executed\\n                    nextEarliestCommitUnexecuted += 1; // It makes sense to set the next unexecuted to the next number\\n                    continue;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if (nextEarliestCommitUnexecuted > latestCommitUnexecuted) {\\n                // We have just bumped earliestCommitUnexecuted above latestCommitUnexecuted,\\n                // we have therefore run out of commits\\n                earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n            } else {\\n                earliestCommitUnexecuted = nextEarliestCommitUnexecuted;\\n            }\\n        }\\n\\n        if (direction == ScanDirection.DOWN) {\\n            uint128 nextLatestCommitUnexecuted = latestCommitUnexecuted;\\n            while (nextLatestCommitUnexecuted >= earliestCommitUnexecuted) {\\n                IPoolCommitter.Commit memory _commit = commits[nextLatestCommitUnexecuted];\\n                if (_commit.owner == address(0)) {\\n                    // Commit deleted (uncommitted) or already executed\\n                    nextLatestCommitUnexecuted -= 1;\\n                    continue;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if (nextLatestCommitUnexecuted < earliestCommitUnexecuted) {\\n                // We have just bumped earliestCommitUnexecuted above latestCommitUnexecuted,\\n                // we have therefore run out of commits\\n                earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n            } else {\\n                latestCommitUnexecuted = nextLatestCommitUnexecuted;\\n            }\\n        }\\n    }\\n\\n    function _uncommit(Commit memory _commit, uint128 _commitID) internal {\\n        // reduce pool commitment amount\\n        uint256 _commitType = uint256(_commit.commitType);\\n        shadowPools[_commitType] = shadowPools[_commitType] - _commit.amount;\\n        emit RemoveCommit(_commitID, _commit.amount, _commit.commitType);\\n\\n        delete commits[_commitID];\\n\\n        if (earliestCommitUnexecuted == _commitID) {\\n            // This is the first unexecuted commit, so we can bump this up one\\n            earliestCommitUnexecuted += 1;\\n            skipDeletedMiddleCommits(ScanDirection.UP);\\n        }\\n        if (latestCommitUnexecuted == _commitID && earliestCommitUnexecuted != NO_COMMITS_REMAINING) {\\n            // This is the latest commit unexecuted that we are trying to delete.\\n            latestCommitUnexecuted -= 1;\\n            skipDeletedMiddleCommits(ScanDirection.DOWN);\\n        }\\n\\n        // release tokens\\n        if (_commit.commitType == CommitType.LongMint || _commit.commitType == CommitType.ShortMint) {\\n            // minting: return quote tokens to the commit owner\\n            ILeveragedPool(leveragedPool).quoteTokenTransfer(msg.sender, _commit.amount);\\n        } else if (_commit.commitType == CommitType.LongBurn) {\\n            // long burning: return long pool tokens to commit owner\\n            ILeveragedPool(leveragedPool).mintTokens(0, _commit.amount, msg.sender);\\n        } else if (_commit.commitType == CommitType.ShortBurn) {\\n            // short burning: return short pool tokens to the commit owner\\n            ILeveragedPool(leveragedPool).mintTokens(1, _commit.amount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute all the pending commits of a market\\n     */\\n    function executeAllCommitments() external override onlyPool {\\n        if (earliestCommitUnexecuted == NO_COMMITS_REMAINING) {\\n            return;\\n        }\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 frontRunningInterval = pool.frontRunningInterval();\\n        uint256 updateInterval = pool.updateInterval();\\n        uint256 lastPriceTimestamp = pool.lastPriceTimestamp();\\n\\n        /**\\n         * If the queue length was reset before the frontRunningInterval that just passed, it means\\n         * there were no commitments during that frontRunningInterval, meaning we can reset queue length.\\n         */\\n        if (\\n            PoolSwapLibrary.isBeforeFrontRunningInterval(\\n                lastQueueLengthReset,\\n                lastPriceTimestamp,\\n                updateInterval,\\n                frontRunningInterval\\n            )\\n        ) {\\n            delete currentCommitQueueLength;\\n            lastQueueLengthReset = block.timestamp;\\n        }\\n        uint128 nextEarliestCommitUnexecuted;\\n\\n        uint128 _latestCommitUnexecuted = latestCommitUnexecuted;\\n        for (\\n            nextEarliestCommitUnexecuted = earliestCommitUnexecuted;\\n            nextEarliestCommitUnexecuted <= _latestCommitUnexecuted;\\n            nextEarliestCommitUnexecuted++\\n        ) {\\n            IPoolCommitter.Commit memory _commit = commits[nextEarliestCommitUnexecuted];\\n            // These two checks are so a given call to executeCommitment won't revert,\\n            // allowing us to continue iterations, as well as update nextEarliestCommitUnexecuted.\\n            if (_commit.owner == address(0)) {\\n                // Commit deleted (uncommitted) or already executed\\n                continue;\\n            }\\n            if (block.timestamp - _commit.created <= frontRunningInterval) {\\n                // This commit is the first that was too late.\\n                break;\\n            }\\n            emit ExecuteCommit(nextEarliestCommitUnexecuted);\\n            try IPoolCommitter(address(this)).executeCommitment(_commit) {\\n                delete commits[nextEarliestCommitUnexecuted];\\n            } catch {\\n                _uncommit(_commit, nextEarliestCommitUnexecuted);\\n                emit FailedCommitExecution(nextEarliestCommitUnexecuted);\\n            }\\n            if (nextEarliestCommitUnexecuted == _latestCommitUnexecuted) {\\n                // We have reached the last one\\n                earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n                return;\\n            }\\n        }\\n        earliestCommitUnexecuted = nextEarliestCommitUnexecuted;\\n    }\\n\\n    /**\\n     * @notice Executes a single commitment\\n     * @param _commit The commit to execute\\n     */\\n    function executeCommitment(Commit memory _commit) external override onlySelf {\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 shortBalance = pool.shortBalance();\\n        uint256 longBalance = pool.longBalance();\\n        uint256 _commitType = uint256(_commit.commitType);\\n        shadowPools[_commitType] = shadowPools[_commitType] - _commit.amount;\\n        if (_commit.commitType == CommitType.LongMint) {\\n            uint256 mintAmount = PoolSwapLibrary.getMintAmount(\\n                IERC20(tokens[0]).totalSupply(), // long token total supply,\\n                _commit.amount, // amount of quote tokens commited to enter\\n                longBalance, // total quote tokens in the long pull\\n                shadowPools[uint256(CommitType.LongBurn)] // total pool tokens commited to be burned\\n            );\\n\\n            pool.mintTokens(0, mintAmount, _commit.owner);\\n            // update long and short balances\\n            pool.setNewPoolBalances(longBalance + _commit.amount, shortBalance);\\n        } else if (_commit.commitType == CommitType.LongBurn) {\\n            uint256 amountOut = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n                IERC20(tokens[0]).totalSupply(),\\n                _commit.amount,\\n                longBalance,\\n                shadowPools[_commitType] + _commit.amount\\n            );\\n\\n            // update long and short balances\\n            pool.setNewPoolBalances(longBalance - amountOut, shortBalance);\\n            pool.quoteTokenTransfer(_commit.owner, amountOut);\\n        } else if (_commit.commitType == CommitType.ShortMint) {\\n            uint256 mintAmount = PoolSwapLibrary.getMintAmount(\\n                IERC20(tokens[1]).totalSupply(), // short token total supply\\n                _commit.amount,\\n                shortBalance,\\n                shadowPools[uint256(CommitType.ShortBurn)]\\n            );\\n\\n            pool.mintTokens(1, mintAmount, _commit.owner);\\n            pool.setNewPoolBalances(longBalance, shortBalance + _commit.amount);\\n        } else if (_commit.commitType == CommitType.ShortBurn) {\\n            uint256 amountOut = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n                IERC20(tokens[1]).totalSupply(),\\n                _commit.amount,\\n                shortBalance,\\n                shadowPools[_commitType] + _commit.amount\\n            );\\n\\n            // update long and short balances\\n            pool.setNewPoolBalances(longBalance, shortBalance - amountOut);\\n            pool.quoteTokenTransfer(_commit.owner, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @return A Commit of a given ID\\n     */\\n    function getCommit(uint128 _commitID) external view override returns (Commit memory) {\\n        return commits[_commitID];\\n    }\\n\\n    function setQuoteAndPool(address _quoteToken, address _leveragedPool) external override onlyFactory {\\n        require(_quoteToken != address(0), \\\"Quote token address cannot be 0 address\\\");\\n        require(_leveragedPool != address(0), \\\"Leveraged pool address cannot be 0 address\\\");\\n        leveragedPool = _leveragedPool;\\n        IERC20 _token = IERC20(_quoteToken);\\n        bool approvalSuccess = _token.approve(leveragedPool, _token.totalSupply());\\n        require(approvalSuccess, \\\"ERC20 approval failed\\\");\\n        tokens = ILeveragedPool(leveragedPool).poolTokens();\\n    }\\n\\n    function setMinimumCommitSize(uint128 _minimumCommitSize) external override onlyGov {\\n        minimumCommitSize = _minimumCommitSize;\\n        emit MinCommitSizeChanged(_minimumCommitSize);\\n    }\\n\\n    function setMaxCommitQueueLength(uint128 _maximumCommitQueueLength) external override onlyGov {\\n        require(_maximumCommitQueueLength > 0, \\\"Commit queue must be > 0\\\");\\n        maximumCommitQueueLength = _maximumCommitQueueLength;\\n        emit MaxCommitQueueLengthChanged(_maximumCommitQueueLength);\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"Committer: not factory\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(msg.sender == leveragedPool, \\\"msg.sender not leveragedPool\\\");\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"msg.sender not self\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x472218ac505c322fa1386a11d30a45a3e0a3dc823362848bc7ba067001c794a6\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolCommitterDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"./PoolCommitter.sol\\\";\\nimport \\\"../interfaces/IPoolCommitterDeployer.sol\\\";\\n\\n/// @title The deployer of the PoolCommitter contract\\ncontract PoolCommitterDeployer is IPoolCommitterDeployer {\\n    address public factory;\\n\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"Factory address cannot be null\\\");\\n        factory = _factory;\\n    }\\n\\n    function deploy(uint128 _minimumCommitSize, uint128 _maximumCommitQueueLength)\\n        external\\n        override\\n        onlyFactory\\n        returns (address)\\n    {\\n        return address(new PoolCommitter(factory, _minimumCommitSize, _maximumCommitQueueLength));\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"msg.sender not factory\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x993aa2467075330d112950952315f4a229bdaa286a0ed3a1205e617b3055a132\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolSwapLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\n\\n/// @title Library for various useful (mostly) mathematical functions\\nlibrary PoolSwapLibrary {\\n    bytes16 public constant one = 0x3fff0000000000000000000000000000;\\n    bytes16 public constant zero = 0x00000000000000000000000000000000;\\n\\n    /* ABDKMathQuad defines this but it's private */\\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n    uint256 public constant MAX_DECIMALS = 18;\\n\\n    uint256 public constant WAD_PRECISION = 10**18;\\n\\n    struct PriceChangeData {\\n        int256 oldPrice;\\n        int256 newPrice;\\n        uint256 longBalance;\\n        uint256 shortBalance;\\n        bytes16 leverageAmount;\\n        bytes16 fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the ratio between two numbers\\n     * @dev Rounds any overflow towards 0. If either parameter is zero, the ratio is 0\\n     * @param _numerator The \\\"parts per\\\" side of the equation. If this is zero, the ratio is zero\\n     * @param _denominator The \\\"per part\\\" side of the equation. If this is zero, the ratio is zero\\n     * @return the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)\\n     */\\n    function getRatio(uint256 _numerator, uint256 _denominator) public pure returns (bytes16) {\\n        // Catch the divide by zero error.\\n        if (_denominator == 0) {\\n            return 0;\\n        }\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(_numerator), ABDKMathQuad.fromUInt(_denominator));\\n    }\\n\\n    /**\\n     * @notice Gets the short and long balances after the keeper rewards have been paid out\\n     *         Keeper rewards are paid proportionally to the short and long pool\\n     * @dev Assumes shortBalance + longBalance >= reward\\n     * @param reward Amount of keeper reward\\n     * @param shortBalance Short balance of the pool\\n     * @param longBalance Long balance of the pool\\n     * @return shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid\\n     * @return longBalanceAfterFees Long balance of the pool after the keeper reward has been paid\\n     */\\n    function getBalancesAfterFees(\\n        uint256 reward,\\n        uint256 shortBalance,\\n        uint256 longBalance\\n    ) external pure returns (uint256, uint256) {\\n        bytes16 ratioShort = getRatio(shortBalance, shortBalance + longBalance);\\n\\n        uint256 shortFees = convertDecimalToUInt(multiplyDecimalByUInt(ratioShort, reward));\\n\\n        uint256 shortBalanceAfterFees = shortBalance - shortFees;\\n        uint256 longBalanceAfterFees = longBalance - (reward - shortFees);\\n\\n        // Return shortBalance and longBalance after rewards are paid out\\n        return (shortBalanceAfterFees, longBalanceAfterFees);\\n    }\\n\\n    /**\\n     * @notice Compares two decimal numbers\\n     * @param x The first number to compare\\n     * @param y The second number to compare\\n     * @return -1 if x < y, 0 if x = y, or 1 if x > y\\n     */\\n    function compareDecimals(bytes16 x, bytes16 y) public pure returns (int8) {\\n        return ABDKMathQuad.cmp(x, y);\\n    }\\n\\n    /**\\n     * @notice Converts an integer value to a compatible decimal value\\n     * @param amount The amount to convert\\n     * @return The amount as a IEEE754 quadruple precision number\\n     */\\n    function convertUIntToDecimal(uint256 amount) external pure returns (bytes16) {\\n        return ABDKMathQuad.fromUInt(amount);\\n    }\\n\\n    /**\\n     * @notice Converts a raw decimal value to a more readable uint256 value\\n     * @param ratio The value to convert\\n     * @return The converted value\\n     */\\n    function convertDecimalToUInt(bytes16 ratio) public pure returns (uint256) {\\n        return ABDKMathQuad.toUInt(ratio);\\n    }\\n\\n    /**\\n     * @notice Multiplies a decimal and an unsigned integer\\n     * @param a The first term\\n     * @param b The second term\\n     * @return The product of a*b as a decimal\\n     */\\n    function multiplyDecimalByUInt(bytes16 a, uint256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.mul(a, ABDKMathQuad.fromUInt(b));\\n    }\\n\\n    /**\\n     * @notice Divides two integers\\n     * @param a The dividend\\n     * @param b The divisor\\n     * @return The quotient\\n     */\\n    function divInt(int256 a, int256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.div(ABDKMathQuad.fromInt(a), ABDKMathQuad.fromInt(b));\\n    }\\n\\n    /**\\n     * @notice Calculates the loss multiplier to apply to the losing pool. Includes the power leverage\\n     * @param ratio The ratio of new price to old price\\n     * @param direction The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased\\n     * @param leverage The amount of leverage to apply\\n     * @return The multiplier\\n     */\\n    function getLossMultiplier(\\n        bytes16 ratio,\\n        int8 direction,\\n        bytes16 leverage\\n    ) public pure returns (bytes16) {\\n        // If decreased:  2 ^ (leverage * log2[(1 * new/old) + [(0 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2[(new/old)])\\n        // If increased:  2 ^ (leverage * log2[(0 * new/old) + [(1 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2([1 / new/old]))\\n        //              = 2 ^ (leverage * log2([old/new]))\\n        return\\n            ABDKMathQuad.pow_2(\\n                ABDKMathQuad.mul(leverage, ABDKMathQuad.log_2(direction < 0 ? ratio : ABDKMathQuad.div(one, ratio)))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to take from the losing pool\\n     * @param lossMultiplier The multiplier to use\\n     * @param balance The balance of the losing pool\\n     */\\n    function getLossAmount(bytes16 lossMultiplier, uint256 balance) public pure returns (uint256) {\\n        return\\n            ABDKMathQuad.toUInt(\\n                ABDKMathQuad.mul(ABDKMathQuad.sub(one, lossMultiplier), ABDKMathQuad.fromUInt(balance))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other.\\n     * @dev This function should be called by the LeveragedPool.\\n     * @param priceChange The struct containing necessary data to calculate price change\\n     */\\n    function calculatePriceChange(PriceChangeData memory priceChange)\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 shortBalance = priceChange.shortBalance;\\n        uint256 longBalance = priceChange.longBalance;\\n        bytes16 leverageAmount = priceChange.leverageAmount;\\n        int256 oldPrice = priceChange.oldPrice;\\n        int256 newPrice = priceChange.newPrice;\\n        bytes16 fee = priceChange.fee;\\n\\n        // Calculate fees from long and short sides\\n        uint256 longFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, longBalance)) /\\n            PoolSwapLibrary.WAD_PRECISION;\\n        uint256 shortFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, shortBalance)) /\\n            PoolSwapLibrary.WAD_PRECISION;\\n\\n        shortBalance = shortBalance - shortFeeAmount;\\n        longBalance = longBalance - longFeeAmount;\\n        uint256 totalFeeAmount = shortFeeAmount + longFeeAmount;\\n\\n        // Use the ratio to determine if the price increased or decreased and therefore which direction\\n        // the funds should be transferred towards.\\n\\n        bytes16 ratio = divInt(newPrice, oldPrice);\\n        int8 direction = compareDecimals(ratio, PoolSwapLibrary.one);\\n        // Take into account the leverage\\n        bytes16 lossMultiplier = getLossMultiplier(ratio, direction, leverageAmount);\\n\\n        if (direction >= 0 && shortBalance > 0) {\\n            // Move funds from short to long pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, shortBalance);\\n            shortBalance = shortBalance - lossAmount;\\n            longBalance = longBalance + lossAmount;\\n        } else if (direction < 0 && longBalance > 0) {\\n            // Move funds from long to short pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, longBalance);\\n            shortBalance = shortBalance + lossAmount;\\n            longBalance = longBalance - lossAmount;\\n        }\\n\\n        return (longBalance, shortBalance, totalFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns true if the given timestamp is BEFORE the frontRunningInterval starts,\\n     *         which is allowed for uncommitment.\\n     * @dev If you try to uncommit AFTER the frontRunningInterval, it should revert.\\n     * @param subjectTime The timestamp for which you want to calculate if it was beforeFrontRunningInterval\\n     * @param lastPriceTimestamp The timestamp of the last price update\\n     * @param updateInterval The interval between price updates\\n     * @param frontRunningInterval The window of time before a price udpate users can not uncommit or have their commit executed from\\n     */\\n    function isBeforeFrontRunningInterval(\\n        uint256 subjectTime,\\n        uint256 lastPriceTimestamp,\\n        uint256 updateInterval,\\n        uint256 frontRunningInterval\\n    ) external pure returns (bool) {\\n        return lastPriceTimestamp + updateInterval - frontRunningInterval > subjectTime;\\n    }\\n\\n    /**\\n     * @notice Gets the number of settlement tokens to be withdrawn based on a pool token burn amount\\n     * @dev Calculates as `balance * amountIn / (tokenSupply + shadowBalance)\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param shadowBalance Balance the shadow pool at time of mint\\n     * @return Number of settlement tokens to be withdrawn on a burn\\n     */\\n    function getWithdrawAmountOnBurn(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 shadowBalance\\n    ) external pure returns (uint256) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n\\n        // Catch the divide by zero error.\\n        if (balance == 0 || tokenSupply + shadowBalance == 0) {\\n            return amountIn;\\n        }\\n        bytes16 numerator = ABDKMathQuad.mul(ABDKMathQuad.fromUInt(balance), ABDKMathQuad.fromUInt(amountIn));\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(numerator, ABDKMathQuad.fromUInt(tokenSupply + shadowBalance)));\\n    }\\n\\n    /**\\n     * @notice Gets the number of pool tokens to be minted based on existing tokens\\n     * @dev Calculated as (tokenSupply + shadowBalance) * amountIn / balance\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param shadowBalance Balance the shadow pool at time of mint\\n     * @return Number of pool tokens to be minted\\n     */\\n    function getMintAmount(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 shadowBalance\\n    ) external pure returns (uint256) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n\\n        // Catch the divide by zero error.\\n        if (balance == 0 || tokenSupply + shadowBalance == 0) {\\n            return amountIn;\\n        }\\n\\n        bytes16 numerator = ABDKMathQuad.mul(\\n            ABDKMathQuad.fromUInt(tokenSupply + shadowBalance),\\n            ABDKMathQuad.fromUInt(amountIn)\\n        );\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(numerator, ABDKMathQuad.fromUInt(balance)));\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(uint256 _wadValue, uint256 _decimals) external pure returns (uint256) {\\n        uint256 scaler = 10**(MAX_DECIMALS - _decimals);\\n        return _wadValue / scaler;\\n    }\\n}\\n\",\"keccak256\":\"0xdb371bc69356883d7f54cdf065df2c999d71ebeab16ecd5d19276a9a7be1de85\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/ILeveragedPool.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The pool controller contract interface\\ninterface ILeveragedPool {\\n    // Initialisation parameters for new market\\n    struct Initialization {\\n        address _owner; // Owner of the contract\\n        address _keeper; // The address of the PoolKeeper contract\\n        address _oracleWrapper; // The oracle wrapper for the derivative price feed\\n        address _settlementEthOracle; // The oracle wrapper for the SettlementToken/ETH price feed\\n        address _longToken; // Address of the long pool token\\n        address _shortToken; // Address of the short pool token\\n        address _poolCommitter; // Address of the PoolCommitter contract\\n        string _poolName; // The pool identification name\\n        uint32 _frontRunningInterval; // The minimum number of seconds that must elapse before a commit is forced to wait until the next interval\\n        uint32 _updateInterval; // The minimum number of seconds that must elapse before a commit can be executed\\n        uint256 _fee; // The fund movement fee. This amount is extracted from the deposited asset with every update and sent to the fee address\\n        uint16 _leverageAmount; // The amount of exposure to price movements for the pool\\n        address _feeAddress; // The address that the fund movement fee is sent to\\n        address _quoteToken; //  The digital asset that the pool accepts. Must have a decimals() function\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when the pool is setup and ready for use\\n     * @param longToken The address of the LONG pair token\\n     * @param shortToken The address of the SHORT pair token\\n     * @param quoteToken The address of the digital asset that the pool accepts\\n     * @param poolName The pool code for the pool\\n     */\\n    event PoolInitialized(address indexed longToken, address indexed shortToken, address quoteToken, string poolName);\\n\\n    /**\\n     * @notice Creates a notification when the pool is rebalanced\\n     * @param shortBalanceChange The change of funds in the short side\\n     * @param longBalanceChange The change of funds in the long side\\n     */\\n    event PoolRebalance(int256 shortBalanceChange, int256 longBalanceChange);\\n\\n    /**\\n     * @notice Creates a notification when the pool's price execution fails\\n     * @param startPrice Price prior to price change execution\\n     * @param endPrice Price during price change execution\\n     */\\n    event PriceChangeError(int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Represents change in fee receiver's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event FeeAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in keeper's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event KeeperAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents proposed change in governance address\\n     * @param newAddress Proposed address\\n     */\\n    event ProvisionalGovernanceChanged(address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in governance address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event GovernanceAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    function leverageAmount() external view returns (bytes16);\\n\\n    function poolCommitter() external view returns (address);\\n\\n    function quoteToken() external view returns (address);\\n\\n    function oracleWrapper() external view returns (address);\\n\\n    function lastPriceTimestamp() external view returns (uint256);\\n\\n    function poolName() external view returns (string calldata);\\n\\n    function updateInterval() external view returns (uint32);\\n\\n    function shortBalance() external view returns (uint256);\\n\\n    function longBalance() external view returns (uint256);\\n\\n    function frontRunningInterval() external view returns (uint32);\\n\\n    function poolTokens() external view returns (address[2] memory);\\n\\n    function settlementEthOracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Configures the pool on deployment. The pools are EIP 1167 clones.\\n     * @dev This should only be able to be run once to prevent abuse of the pool. Use of Openzeppelin Initializable or similar is recommended\\n     * @param initialization The struct Initialization containing initialization data\\n     */\\n    function initialize(Initialization calldata initialization) external;\\n\\n    function poolUpkeep(int256 _oldPrice, int256 _newPrice) external;\\n\\n    function quoteTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function payKeeperFromBalances(address to, uint256 amount) external returns (bool);\\n\\n    function quoteTokenTransfer(address to, uint256 amount) external;\\n\\n    function setNewPoolBalances(uint256 _longBalance, uint256 _shortBalance) external;\\n\\n    /**\\n     * @return _latestPrice The oracle price\\n     * @return _data The oracleWrapper's metadata. Implementations can choose what data to return here\\n     * @return _lastPriceTimestamp The timestamp of the last upkeep\\n     * @return _updateInterval The update frequency for this pool\\n     * @dev To save gas so PoolKeeper does not have to make three external calls\\n     */\\n    function getUpkeepInformation()\\n        external\\n        view\\n        returns (\\n            int256 _latestPrice,\\n            bytes memory _data,\\n            uint256 _lastPriceTimestamp,\\n            uint256 _updateInterval\\n        );\\n\\n    function getOraclePrice() external view returns (int256);\\n\\n    function intervalPassed() external view returns (bool);\\n\\n    function balances() external view returns (uint256 _shortBalance, uint256 _longBalance);\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function transferGovernance(address _governance) external;\\n\\n    function claimGovernance() external;\\n\\n    function updateFeeAddress(address account) external;\\n\\n    function mintTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n\\n    function burnTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8aa209784b4f3199fd603406dd75777d1df639dde6fdb6ec2d6930b363457f7c\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The oracle wrapper contract interface\\ninterface IOracleWrapper {\\n    function oracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Sets the oracle for a given market\\n     * @dev Should be secured, ideally only allowing the PoolKeeper to access\\n     * @param _oracle The oracle to set for the market\\n     */\\n    function setOracle(address _oracle) external;\\n\\n    /**\\n     * @notice Returns the current price for the asset in question\\n     * @return The latest price\\n     */\\n    function getPrice() external view returns (int256);\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here\\n     */\\n    function getPriceAndMetadata() external view returns (int256 _price, bytes memory _data);\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(int256 wad) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x884ce9d1b49a7372a50ac2350ea6c1529cd7a9da8e5b1c67ecee7d032a2166f9\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolCommitter.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The interface for the contract that handles pool commitments\\ninterface IPoolCommitter {\\n    /// Type of commit\\n    enum CommitType {\\n        ShortMint,\\n        ShortBurn,\\n        LongMint,\\n        LongBurn\\n    }\\n\\n    // Commit information\\n    struct Commit {\\n        uint256 amount;\\n        CommitType commitType;\\n        uint40 created;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice Creates a notification when a commit is created\\n     * @param commitID ID of the commit\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event CreateCommit(uint128 indexed commitID, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a commit is removed (uncommitted)\\n     * @param commitID ID of the commit\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event RemoveCommit(uint128 indexed commitID, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a commit is executed\\n     * @param commitID ID of the commit that's executed\\n     */\\n    event ExecuteCommit(uint128 commitID);\\n\\n    /**\\n     * @notice Creates a notification when a commit fails to execute\\n     * @param commitID ID of the commit\\n     */\\n    event FailedCommitExecution(uint128 commitID);\\n\\n    /**\\n     * @notice Creates a notification when the min commit size changes\\n     * @param _maximumCommitQueueLength New min commit size for mints and burns\\n     */\\n    event MinCommitSizeChanged(uint128 _maximumCommitQueueLength);\\n\\n    /**\\n     * @notice Creates a notification when the max commit queue length changes\\n     * @param newMaxQueueLength New maximum queue length for an update interval\\n     */\\n    event MaxCommitQueueLengthChanged(uint128 newMaxQueueLength);\\n\\n    // #### Functions\\n\\n    function commit(CommitType commitType, uint256 amount) external;\\n\\n    function executeAllCommitments() external;\\n\\n    function executeCommitment(Commit memory _commit) external;\\n\\n    function getCommit(uint128 _commitID) external view returns (Commit memory);\\n\\n    function setQuoteAndPool(address quoteToken, address leveragedPool) external;\\n\\n    function setMinimumCommitSize(uint128 _minimumCommitSize) external;\\n\\n    function setMaxCommitQueueLength(uint128 _maximumCommitQueueLength) external;\\n}\\n\",\"keccak256\":\"0xc30993e57ab5d0c2a3a2a9f40f729361b8bb69549d3a3b27329bdd6f8c04d8ed\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolCommitterDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The PoolCommitterDeployer interface\\ninterface IPoolCommitterDeployer {\\n    function deploy(uint128 _minimumCommitSize, uint128 _maximumCommitQueueLength) external returns (address);\\n}\\n\",\"keccak256\":\"0x2aedf14a54786bb012c036739237b13741c4cf092e295037975e333481d5f68d\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The contract factory for the keeper and pool contracts. Utilizes minimal clones to keep gas costs low\\ninterface IPoolFactory {\\n    struct PoolDeployment {\\n        string poolName; // The name to identify a pool by\\n        uint32 frontRunningInterval; // The minimum number of seconds that must elapse before a commit can be executed. Must be smaller than or equal to the update interval to prevent deadlock\\n        uint32 updateInterval; // The minimum number of seconds that must elapse before a price change\\n        uint16 leverageAmount; // The amount of exposure to price movements for the pool\\n        address quoteToken; // The digital asset that the pool accepts\\n        address oracleWrapper; // The IOracleWrapper implementation for fetching price feed data\\n        address settlementEthOracle; // The oracle to fetch the price of Ether in terms of the settlement token\\n        uint128 minimumCommitSize; // The minimum amount (in settlement tokens) that a user can commit in a single commitment\\n        uint128 maximumCommitQueueLength; // The maximum number of commitments that can be made for a given updateInterval\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when a pool is deployed\\n     * @param pool Address of the new pool\\n     * @param ticker Ticker of the neew pool\\n     */\\n    event DeployPool(address indexed pool, string ticker);\\n\\n    /**\\n     * @notice Creates a notification when the pool keeper changes\\n     * @param _poolKeeper Address of the new pool keeper\\n     */\\n    event PoolKeeperChanged(address _poolKeeper);\\n\\n    /**\\n     * @notice Creates a notification when the pool committer deployer for the factory changes\\n     * @param _poolCommitterDeployer Address of the new pool committer deployer\\n     */\\n    event PoolCommitterDeployerChanged(address _poolCommitterDeployer);\\n\\n    // #### Getters for Globals\\n    function pools(uint256 id) external view returns (address);\\n\\n    function numPools() external view returns (uint256);\\n\\n    function isValidPool(address _pool) external view returns (bool);\\n\\n    // #### Functions\\n    function deployPool(PoolDeployment calldata deploymentParameters) external returns (address);\\n\\n    function getOwner() external returns (address);\\n\\n    function setPoolKeeper(address _poolKeeper) external;\\n\\n    function setMaxLeverage(uint16 newMaxLeverage) external;\\n\\n    function setFeeReceiver(address _feeReceiver) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function setPoolCommitterDeployer(address _poolCommitterDeployer) external;\\n}\\n\",\"keccak256\":\"0xfa45389b359358b86d16613332e23f778b01e777937aa299071ddf4f7bf17038\",\"license\":\"CC-BY-NC-ND-4.0\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b5060405161355c38038061355c83398101604081905261002f916100ae565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601e60248201527f466163746f727920616464726573732063616e6e6f74206265206e756c6c0000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100de565b6000602082840312156100c057600080fd5b81516001600160a01b03811681146100d757600080fd5b9392505050565b61346f806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063960419831461003b578063c45a01551461006a575b600080fd5b61004e610049366004610167565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b60005461004e906001600160a01b031681565b600080546001600160a01b031633146100d55760405162461bcd60e51b81526020600482015260166024820152756d73672e73656e646572206e6f7420666163746f727960501b604482015260640160405180910390fd5b6000546040516001600160a01b0390911690849084906100f49061013e565b6001600160a01b0390931683526001600160801b039182166020840152166040820152606001604051809103906000f080158015610136573d6000803e3d6000fd5b509392505050565b61329f8061019b83390190565b80356001600160801b038116811461016257600080fd5b919050565b6000806040838503121561017a57600080fd5b6101838361014b565b91506101916020840161014b565b9050925092905056fe6080604052600480546001600160801b0319166001600160801b031790553480156200002a57600080fd5b506040516200329f3803806200329f8339810160408190526200004d916200024f565b6200005833620001a5565b6001600160a01b038316620000b35760405162461bcd60e51b815260206004820152601e60248201527f466163746f727920616464726573732063616e6e6f74206265206e756c6c0000604482015260640160405180910390fd5b600a80546001600160a01b0319166001600160a01b038516908117909155600580546001600160801b03908116600160801b8683160217909155600680546001600160801b03191691841691909117905560408051631127a41d60e31b8152905163893d20e8916004818101926020929091908290030181600087803b1580156200013d57600080fd5b505af115801562000152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017891906200022a565b600b80546001600160a01b0319166001600160a01b03929092169190911790555050426007555062000299565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200020d57600080fd5b919050565b80516001600160801b03811681146200020d57600080fd5b6000602082840312156200023d57600080fd5b6200024882620001f5565b9392505050565b6000806000606084860312156200026557600080fd5b6200027084620001f5565b9250620002806020850162000212565b9150620002906040850162000212565b90509250925092565b612ff680620002a96000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638bf13f82116100c3578063d44b1ff31161007c578063d44b1ff31461033f578063e323aac614610359578063f2fde38b1461036c578063f9495c9c1461037f578063f9a0e14e14610392578063fd555fb9146103a557600080fd5b80638bf13f82146102bb5780638da5cb5b146102d55780639eda0cc2146102e6578063b3fecffe146102f9578063c45a01551461030c578063caf4c2c51461031f57600080fd5b80634f64b2be116101155780634f64b2be1461023c5780635aa6e6751461026757806364d536601461027a578063685544a61461028d578063715018a6146102a0578063822255de146102a857600080fd5b80631c536da41461015d57806321fe80591461016757806329075d711461018357806330f75260146101dc57806341397577146102025780634b2ec83114610222575b600080fd5b6101656103b8565b005b61017060075481565b6040519081526020015b60405180910390f35b6101cc610191366004612d45565b6008602052600090815260409020805460019091015460ff811690610100810464ffffffffff1690600160301b90046001600160a01b031684565b60405161017a9493929190612e85565b6101ea6001600160801b0381565b6040516001600160801b03909116815260200161017a565b610170610210366004612d6e565b60096020526000908152604090205481565b6005546101ea90600160801b90046001600160801b031681565b61024f61024a366004612d6e565b6108d5565b6040516001600160a01b03909116815260200161017a565b600b5461024f906001600160a01b031681565b6006546101ea906001600160801b031681565b61016561029b366004612d45565b6108f5565b6101656109a0565b6101656102b6366004612c97565b610a04565b6006546101ea90600160801b90046001600160801b031681565b6000546001600160a01b031661024f565b6004546101ea906001600160801b031681565b610165610307366004612cc1565b611558565b600a5461024f906001600160a01b031681565b61033261032d366004612d45565b611fa7565b60405161017a9190612e3e565b6004546101ea90600160801b90046001600160801b031681565b60015461024f906001600160a01b031681565b61016561037a366004612b86565b612054565b61016561038d366004612d45565b61211f565b6005546101ea906001600160801b031681565b6101656103b3366004612baa565b61221c565b6001546001600160a01b031633146104175760405162461bcd60e51b815260206004820152601c60248201527f6d73672e73656e646572206e6f74206c6576657261676564506f6f6c0000000060448201526064015b60405180910390fd5b6004546001600160801b03908116141561042d57565b60015460408051633dff3c4d60e11b815290516001600160a01b03909216916000918391637bfe789a91600480820192602092909190829003018186803b15801561047757600080fd5b505afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190612da0565b63ffffffff1690506000826001600160a01b031663fd2c80ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190612da0565b63ffffffff1690506000836001600160a01b0316637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190612d87565b6007546040516381a799db60e01b8152600481019190915260248101829052604481018490526064810185905290915073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd03906381a799db9060840160206040518083038186803b15801561060c57600080fd5b505af4158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190612c75565b1561065d57600680546001600160801b03169055426007555b6004546001600160801b0380821691600160801b9004165b806001600160801b0316826001600160801b0316116108ad576001600160801b0382166000908152600860209081526040808320815160808101909252805482526001810154919290919083019060ff1660038111156106d7576106d7612f7f565b60038111156106e8576106e8612f7f565b81526001919091015464ffffffffff61010082041660208301526001600160a01b03600160301b9091048116604090920191909152606082015191925016610730575061089b565b85816040015164ffffffffff16426107489190612f2b565b1161075357506108ad565b6040516001600160801b03841681527f53e7d7eb888194c67870ec86b8523606069fb6eeeab81f458a6065b9e88defa99060200160405180910390a16040516359ff67ff60e11b8152309063b3fecffe906107b2908490600401612e3e565b600060405180830381600087803b1580156107cc57600080fd5b505af19250505080156107dd575060015b61082c576107eb8184612527565b6040516001600160801b03841681527f089a8e68b5afa612f76f7ec1235a9d9d07e0d79462a6b0d862aaa0ac035426c19060200160405180910390a1610859565b6001600160801b038316600090815260086020526040812090815560010180546001600160d01b03191690555b816001600160801b0316836001600160801b03161415610899575050600480546001600160801b0319166001600160801b03179055506108d39350505050565b505b816108a581612f42565b925050610675565b50600480546001600160801b0319166001600160801b0392909216919091179055505050505b565b600281600281106108e557600080fd5b01546001600160a01b0316905081565b600b546001600160a01b0316331461094b5760405162461bcd60e51b81526020600482015260196024820152786d73672e73656e646572206e6f7420676f7665726e616e636560381b604482015260640161040e565b600580546001600160801b03908116600160801b918416918202179091556040519081527fef2b911e35161cb584d04278cd71ee4be726f21a5d23d879b71ecc91dc458b4c906020015b60405180910390a150565b6000546001600160a01b031633146109fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040e565b6108d3600061281f565b6006546001600160801b03808216600160801b9092041610610a685760405162461bcd60e51b815260206004820152601c60248201527f546f6f206d616e7920636f6d6d69747320696e20696e74657276616c00000000604482015260640161040e565b60008111610ab85760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d757374206e6f74206265207a65726f000000000000000000604482015260640161040e565b60015460408051637e96405760e11b815290516001600160a01b0390921691600091839163fd2c80ae91600480820192602092909190829003018186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190612da0565b63ffffffff1690506000826001600160a01b0316637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7d57600080fd5b505afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190612d87565b90506000836001600160a01b0316637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190612da0565b6007546040516381a799db60e01b81526004810191909152602481018490526044810185905263ffffffff9190911660648201819052915073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd03906381a799db9060840160206040518083038186803b158015610c9957600080fd5b505af4158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612c75565b8015610d7157506040516381a799db60e01b815242600482015260248101839052604481018490526064810182905273C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd03906381a799db9060840160206040518083038186803b158015610d3757600080fd5b505af4158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f9190612c75565b155b15610d8a57600680546001600160801b03169055426007555b6001600660108282829054906101000a90046001600160801b0316610daf9190612ec0565b82546101009290920a6001600160801b03818102199093169183160217909155600554169050610de0816001612ec0565b600560006101000a8154816001600160801b0302191690836001600160801b031602179055506040518060800160405280878152602001886003811115610e2957610e29612f7f565b815264ffffffffff4216602080830191909152336040928301526001600160801b03841660009081526008825291909120825181559082015160018083018054909160ff1990911690836003811115610e8457610e84612f7f565b02179055506040820151600190910180546060909301516001600160a01b0316600160301b026601000000000000600160d01b031964ffffffffff9093166101000292909216610100600160d01b0319909316929092171790556000876003811115610ef257610ef2612f7f565b600081815260096020526040902054909150610f0f908890612eeb565b6000828152600960205260409020556004546001600160801b039081161415610f4e57600480546001600160801b0319166001600160801b0384161790555b600480546001600160801b03808516600160801b029116179055876003811115610f7a57610f7a612f7f565b60405188906001600160801b038516907feeb519088468e5ea7765bbf8c4464c3bde5ff110d8de10ee5db057be2599d1fc90600090a46000866001600160a01b031663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b158015610feb57600080fd5b505afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110239190612d87565b90506000876001600160a01b0316637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190612d87565b905060028a60038111156110ae576110ae612f7f565b14806110cb575060008a60038111156110c9576110c9612f7f565b145b1561117357600554600160801b90046001600160801b03168910156111025760405162461bcd60e51b815260040161040e90612e07565b6001546040516307b0a0c960e41b81523360048201526001600160a01b039182166024820152604481018b905290891690637b0a0c9090606401600060405180830381600087803b15801561115657600080fd5b505af115801561116a573d6000803e3d6000fd5b5050505061154c565b60038a600381111561118757611187612f7f565b141561136157600073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363debb52df6002830160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190612d87565b6000878152600960205260409081902054905160e084901b6001600160e01b03191681526004810192909252602482018e905260448201869052606482015260840160206040518083038186803b15801561128b57600080fd5b505af415801561129f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c39190612d87565b600554909150600160801b90046001600160801b03168110156112f85760405162461bcd60e51b815260040161040e90612e07565b6040516387f9ca5d60e01b81526001600160a01b038a16906387f9ca5d90611329906000908e903390600401612de8565b600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b505050505061154c565b60018a600381111561137557611375612f7f565b141561154c57600073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363debb52df600260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e857600080fd5b505afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190612d87565b6000878152600960205260409081902054905160e084901b6001600160e01b03191681526004810192909252602482018e905260448201879052606482015260840160206040518083038186803b15801561147a57600080fd5b505af415801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190612d87565b600554909150600160801b90046001600160801b03168110156114e75760405162461bcd60e51b815260040161040e90612e07565b6040516387f9ca5d60e01b81526001600160a01b038a16906387f9ca5d90611518906001908e903390600401612de8565b600060405180830381600087803b15801561153257600080fd5b505af1158015611546573d6000803e3d6000fd5b50505050505b50505050505050505050565b33301461159d5760405162461bcd60e51b815260206004820152601360248201527236b9b39739b2b73232b9103737ba1039b2b63360691b604482015260640161040e565b60015460408051631751aa8d60e31b815290516001600160a01b0390921691600091839163ba8d546891600480820192602092909190829003018186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190612d87565b90506000826001600160a01b0316637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165c57600080fd5b505afa158015611670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116949190612d87565b90506000846020015160038111156116ae576116ae612f7f565b85516000828152600960205260409020549192506116cb91612f2b565b6000828152600960205260409020556002856020015160038111156116f2576116f2612f7f565b141561193257600073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363ab41556f6002830160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176457600080fd5b505afa158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c9190612d87565b8851600360005260096020527fc575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e7546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201879052606482015260840160206040518083038186803b15801561181557600080fd5b505af4158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190612d87565b60608701516040516375c66e2f60e01b81529192506001600160a01b038716916375c66e2f91611884916000918691600401612de8565b600060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b505087516001600160a01b0388169250633c3f825291506118d39086612eeb565b866040518363ffffffff1660e01b81526004016118fa929190918252602082015260400190565b600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b5050505050611fa0565b60038560200151600381111561194a5761194a612f7f565b1415611b4257600073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363debb52df6002830160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119bc57600080fd5b505afa1580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f49190612d87565b88516000868152600960205260409020548790611a12908390612eeb565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b158015611a5b57600080fd5b505af4158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a939190612d87565b90506001600160a01b038516633c3f8252611aae8386612f2b565b866040518363ffffffff1660e01b8152600401611ad5929190918252602082015260400190565b600060405180830381600087803b158015611aef57600080fd5b505af1158015611b03573d6000803e3d6000fd5b505050506060860151604051632c0bf86360e11b81526001600160a01b0391821660048201526024810183905290861690635817f0c6906044016118fa565b600085602001516003811115611b5a57611b5a612f7f565b1415611d6857600073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363ab41556f600260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcd57600080fd5b505afa158015611be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190612d87565b8851600160005260096020527f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201889052606482015260840160206040518083038186803b158015611c7e57600080fd5b505af4158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb69190612d87565b60608701516040516375c66e2f60e01b81529192506001600160a01b038716916375c66e2f91611ced916001918691600401612de8565b600060405180830381600087803b158015611d0757600080fd5b505af1158015611d1b573d6000803e3d6000fd5b50505050846001600160a01b0316633c3f825284886000015187611d3f9190612eeb565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016118fa565b600185602001516003811115611d8057611d80612f7f565b1415611fa057600073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363debb52df600260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611df357600080fd5b505afa158015611e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2b9190612d87565b88516000868152600960205260409020548890611e49908390612eeb565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b158015611e9257600080fd5b505af4158015611ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eca9190612d87565b90506001600160a01b038516633c3f825284611ee68488612f2b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015611f2457600080fd5b505af1158015611f38573d6000803e3d6000fd5b505050506060860151604051632c0bf86360e11b81526001600160a01b0391821660048201526024810183905290861690635817f0c690604401600060405180830381600087803b158015611f8c57600080fd5b505af115801561154c573d6000803e3d6000fd5b5050505050565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160801b038616825260088152908490208451928301909452835482526001840154929391929083019060ff16600381111561200d5761200d612f7f565b600381111561201e5761201e612f7f565b815260019190910154610100810464ffffffffff166020830152600160301b90046001600160a01b031660409091015292915050565b6000546001600160a01b031633146120ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040e565b6001600160a01b0381166121135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040e565b61211c8161281f565b50565b600b546001600160a01b031633146121755760405162461bcd60e51b81526020600482015260196024820152786d73672e73656e646572206e6f7420676f7665726e616e636560381b604482015260640161040e565b6000816001600160801b0316116121ce5760405162461bcd60e51b815260206004820152601860248201527f436f6d6d6974207175657565206d757374206265203e20300000000000000000604482015260640161040e565b600680546001600160801b0319166001600160801b0383169081179091556040519081527fdcb2c39da587e37057706c7cc170722148368fd6b3ae7daf3acb5657581c511190602001610995565b600a546001600160a01b0316331461226f5760405162461bcd60e51b8152602060048201526016602482015275436f6d6d69747465723a206e6f7420666163746f727960501b604482015260640161040e565b6001600160a01b0382166122d55760405162461bcd60e51b815260206004820152602760248201527f51756f746520746f6b656e20616464726573732063616e6e6f742062652030206044820152666164647265737360c81b606482015260840161040e565b6001600160a01b03811661233e5760405162461bcd60e51b815260206004820152602a60248201527f4c657665726167656420706f6f6c20616464726573732063616e6e6f742062656044820152692030206164647265737360b01b606482015260840161040e565b600180546001600160a01b0319166001600160a01b03838116918217909255604080516318160ddd60e01b8152905185936000939085169263095ea7b39284916318160ddd916004808301926020929190829003018186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190612d87565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561242157600080fd5b505af1158015612435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124599190612c75565b9050806124a05760405162461bcd60e51b8152602060048201526015602482015274115490cc8c08185c1c1c9bdd985b0819985a5b1959605a1b604482015260640161040e565b6001546040805163369f189f60e11b815281516001600160a01b0390931692636d3e313e92600480840193919291829003018186803b1580156124e257600080fd5b505afa1580156124f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251a9190612be3565b611fa09060029081612b05565b60008260200151600381111561253f5761253f612f7f565b835160008281526009602052604090205491925061255c91612f2b565b600082815260096020908152604090912091909155830151600381111561258557612585612f7f565b83516040516001600160801b038516907f2f2b9ec00f96da9afe52a06f4a0392b84a333e3718b29186681f51ddfe7c593b90600090a46001600160801b03808316600081815260086020526040812090815560010180546001600160d01b031916905560045490911614156126415760048054600191906000906126139084906001600160801b0316612ec0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612641600061286f565b6004546001600160801b03838116600160801b9092041614801561267157506004546001600160801b0390811614155b156126c9576001600460108282829054906101000a90046001600160801b031661269b9190612f03565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506126c9600161286f565b6002836020015160038111156126e1576126e1612f7f565b1480612702575060008360200151600381111561270057612700612f7f565b145b15612774576001548351604051632c0bf86360e11b815233600482015260248101919091526001600160a01b0390911690635817f0c6906044015b600060405180830381600087803b15801561275757600080fd5b505af115801561276b573d6000803e3d6000fd5b50505050505050565b60038360200151600381111561278c5761278c612f7f565b14156127c85760015483516040516375c66e2f60e01b81526001600160a01b03909216916375c66e2f9161273d91600091903390600401612de8565b6001836020015160038111156127e0576127e0612f7f565b141561281a576001805484516040516375c66e2f60e01b81526001600160a01b03909216926375c66e2f9261273d92903390600401612de8565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600181111561288357612883612f7f565b14156129be576004546001600160801b03165b6004546001600160801b03600160801b909104811690821611612964576001600160801b0381166000908152600860209081526040808320815160808101909252805482526001810154919290919083019060ff1660038111156128fc576128fc612f7f565b600381111561290d5761290d612f7f565b81526001919091015464ffffffffff61010082041660208301526001600160a01b03600160301b90910481166040909201919091526060820151919250166129625761295a600183612ec0565b915050612896565b505b6004546001600160801b03600160801b909104811690821611156129a057600480546001600160801b0319166001600160801b031790556129bc565b600480546001600160801b0319166001600160801b0383161790555b505b60018160018111156129d2576129d2612f7f565b141561211c57600454600160801b90046001600160801b03165b6004546001600160801b0390811690821610612ab3576001600160801b0381166000908152600860209081526040808320815160808101909252805482526001810154919290919083019060ff166003811115612a4b57612a4b612f7f565b6003811115612a5c57612a5c612f7f565b81526001919091015464ffffffffff61010082041660208301526001600160a01b03600160301b9091048116604090920191909152606082015191925016612ab157612aa9600183612f03565b9150506129ec565b505b6004546001600160801b039081169082161015612ae757600480546001600160801b0319166001600160801b031790555050565b600480546001600160801b03808416600160801b0291161790555050565b8260028101928215612b4d579160200282015b82811115612b4d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612b18565b50612b59929150612b5d565b5090565b5b80821115612b595760008155600101612b5e565b803560048110612b8157600080fd5b919050565b600060208284031215612b9857600080fd5b8135612ba381612fab565b9392505050565b60008060408385031215612bbd57600080fd5b8235612bc881612fab565b91506020830135612bd881612fab565b809150509250929050565b600060408284031215612bf557600080fd5b82601f830112612c0457600080fd5b6040516040810181811067ffffffffffffffff82111715612c2757612c27612f95565b8060405250808385604086011115612c3e57600080fd5b60005b6002811015612c6a578151612c5581612fab565b83526020928301929190910190600101612c41565b509195945050505050565b600060208284031215612c8757600080fd5b81518015158114612ba357600080fd5b60008060408385031215612caa57600080fd5b612cb383612b72565b946020939093013593505050565b600060808284031215612cd357600080fd5b6040516080810181811067ffffffffffffffff82111715612cf657612cf6612f95565b60405282358152612d0960208401612b72565b6020820152604083013564ffffffffff81168114612d2657600080fd5b60408201526060830135612d3981612fab565b60608201529392505050565b600060208284031215612d5757600080fd5b81356001600160801b0381168114612ba357600080fd5b600060208284031215612d8057600080fd5b5035919050565b600060208284031215612d9957600080fd5b5051919050565b600060208284031215612db257600080fd5b815163ffffffff81168114612ba357600080fd5b60048110612de457634e487b7160e01b600052602160045260246000fd5b9052565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526018908201527f416d6f756e74206c657373207468616e206d696e696d756d0000000000000000604082015260600190565b815181526020808301516080830191612e5990840182612dc6565b5060408381015164ffffffffff16908301526060928301516001600160a01b0316929091019190915290565b84815260808101612e996020830186612dc6565b64ffffffffff9390931660408201526001600160a01b039190911660609091015292915050565b60006001600160801b03808316818516808303821115612ee257612ee2612f69565b01949350505050565b60008219821115612efe57612efe612f69565b500190565b60006001600160801b0383811690831681811015612f2357612f23612f69565b039392505050565b600082821015612f3d57612f3d612f69565b500390565b60006001600160801b0380831681811415612f5f57612f5f612f69565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461211c57600080fdfea26469706673582212205fec828c39264f6ed4d072b305a75054e50efe6b0a2af75684e0765ec96a880d64736f6c63430008070033a26469706673582212209ca6e27d7711f10cd59ac1d336d6dceaee76ce4e50956762280d7e0235e36e8964736f6c63430008070033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063960419831461003b578063c45a01551461006a575b600080fd5b61004e610049366004610167565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b60005461004e906001600160a01b031681565b600080546001600160a01b031633146100d55760405162461bcd60e51b81526020600482015260166024820152756d73672e73656e646572206e6f7420666163746f727960501b604482015260640160405180910390fd5b6000546040516001600160a01b0390911690849084906100f49061013e565b6001600160a01b0390931683526001600160801b039182166020840152166040820152606001604051809103906000f080158015610136573d6000803e3d6000fd5b509392505050565b61329f8061019b83390190565b80356001600160801b038116811461016257600080fd5b919050565b6000806040838503121561017a57600080fd5b6101838361014b565b91506101916020840161014b565b9050925092905056fe6080604052600480546001600160801b0319166001600160801b031790553480156200002a57600080fd5b506040516200329f3803806200329f8339810160408190526200004d916200024f565b6200005833620001a5565b6001600160a01b038316620000b35760405162461bcd60e51b815260206004820152601e60248201527f466163746f727920616464726573732063616e6e6f74206265206e756c6c0000604482015260640160405180910390fd5b600a80546001600160a01b0319166001600160a01b038516908117909155600580546001600160801b03908116600160801b8683160217909155600680546001600160801b03191691841691909117905560408051631127a41d60e31b8152905163893d20e8916004818101926020929091908290030181600087803b1580156200013d57600080fd5b505af115801562000152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017891906200022a565b600b80546001600160a01b0319166001600160a01b03929092169190911790555050426007555062000299565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200020d57600080fd5b919050565b80516001600160801b03811681146200020d57600080fd5b6000602082840312156200023d57600080fd5b6200024882620001f5565b9392505050565b6000806000606084860312156200026557600080fd5b6200027084620001f5565b9250620002806020850162000212565b9150620002906040850162000212565b90509250925092565b612ff680620002a96000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638bf13f82116100c3578063d44b1ff31161007c578063d44b1ff31461033f578063e323aac614610359578063f2fde38b1461036c578063f9495c9c1461037f578063f9a0e14e14610392578063fd555fb9146103a557600080fd5b80638bf13f82146102bb5780638da5cb5b146102d55780639eda0cc2146102e6578063b3fecffe146102f9578063c45a01551461030c578063caf4c2c51461031f57600080fd5b80634f64b2be116101155780634f64b2be1461023c5780635aa6e6751461026757806364d536601461027a578063685544a61461028d578063715018a6146102a0578063822255de146102a857600080fd5b80631c536da41461015d57806321fe80591461016757806329075d711461018357806330f75260146101dc57806341397577146102025780634b2ec83114610222575b600080fd5b6101656103b8565b005b61017060075481565b6040519081526020015b60405180910390f35b6101cc610191366004612d45565b6008602052600090815260409020805460019091015460ff811690610100810464ffffffffff1690600160301b90046001600160a01b031684565b60405161017a9493929190612e85565b6101ea6001600160801b0381565b6040516001600160801b03909116815260200161017a565b610170610210366004612d6e565b60096020526000908152604090205481565b6005546101ea90600160801b90046001600160801b031681565b61024f61024a366004612d6e565b6108d5565b6040516001600160a01b03909116815260200161017a565b600b5461024f906001600160a01b031681565b6006546101ea906001600160801b031681565b61016561029b366004612d45565b6108f5565b6101656109a0565b6101656102b6366004612c97565b610a04565b6006546101ea90600160801b90046001600160801b031681565b6000546001600160a01b031661024f565b6004546101ea906001600160801b031681565b610165610307366004612cc1565b611558565b600a5461024f906001600160a01b031681565b61033261032d366004612d45565b611fa7565b60405161017a9190612e3e565b6004546101ea90600160801b90046001600160801b031681565b60015461024f906001600160a01b031681565b61016561037a366004612b86565b612054565b61016561038d366004612d45565b61211f565b6005546101ea906001600160801b031681565b6101656103b3366004612baa565b61221c565b6001546001600160a01b031633146104175760405162461bcd60e51b815260206004820152601c60248201527f6d73672e73656e646572206e6f74206c6576657261676564506f6f6c0000000060448201526064015b60405180910390fd5b6004546001600160801b03908116141561042d57565b60015460408051633dff3c4d60e11b815290516001600160a01b03909216916000918391637bfe789a91600480820192602092909190829003018186803b15801561047757600080fd5b505afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190612da0565b63ffffffff1690506000826001600160a01b031663fd2c80ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190612da0565b63ffffffff1690506000836001600160a01b0316637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190612d87565b6007546040516381a799db60e01b8152600481019190915260248101829052604481018490526064810185905290915073__$dc3b4b0a367edd91a2d74c73e2da54c142$__906381a799db9060840160206040518083038186803b15801561060c57600080fd5b505af4158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190612c75565b1561065d57600680546001600160801b03169055426007555b6004546001600160801b0380821691600160801b9004165b806001600160801b0316826001600160801b0316116108ad576001600160801b0382166000908152600860209081526040808320815160808101909252805482526001810154919290919083019060ff1660038111156106d7576106d7612f7f565b60038111156106e8576106e8612f7f565b81526001919091015464ffffffffff61010082041660208301526001600160a01b03600160301b9091048116604090920191909152606082015191925016610730575061089b565b85816040015164ffffffffff16426107489190612f2b565b1161075357506108ad565b6040516001600160801b03841681527f53e7d7eb888194c67870ec86b8523606069fb6eeeab81f458a6065b9e88defa99060200160405180910390a16040516359ff67ff60e11b8152309063b3fecffe906107b2908490600401612e3e565b600060405180830381600087803b1580156107cc57600080fd5b505af19250505080156107dd575060015b61082c576107eb8184612527565b6040516001600160801b03841681527f089a8e68b5afa612f76f7ec1235a9d9d07e0d79462a6b0d862aaa0ac035426c19060200160405180910390a1610859565b6001600160801b038316600090815260086020526040812090815560010180546001600160d01b03191690555b816001600160801b0316836001600160801b03161415610899575050600480546001600160801b0319166001600160801b03179055506108d39350505050565b505b816108a581612f42565b925050610675565b50600480546001600160801b0319166001600160801b0392909216919091179055505050505b565b600281600281106108e557600080fd5b01546001600160a01b0316905081565b600b546001600160a01b0316331461094b5760405162461bcd60e51b81526020600482015260196024820152786d73672e73656e646572206e6f7420676f7665726e616e636560381b604482015260640161040e565b600580546001600160801b03908116600160801b918416918202179091556040519081527fef2b911e35161cb584d04278cd71ee4be726f21a5d23d879b71ecc91dc458b4c906020015b60405180910390a150565b6000546001600160a01b031633146109fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040e565b6108d3600061281f565b6006546001600160801b03808216600160801b9092041610610a685760405162461bcd60e51b815260206004820152601c60248201527f546f6f206d616e7920636f6d6d69747320696e20696e74657276616c00000000604482015260640161040e565b60008111610ab85760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d757374206e6f74206265207a65726f000000000000000000604482015260640161040e565b60015460408051637e96405760e11b815290516001600160a01b0390921691600091839163fd2c80ae91600480820192602092909190829003018186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190612da0565b63ffffffff1690506000826001600160a01b0316637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7d57600080fd5b505afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190612d87565b90506000836001600160a01b0316637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190612da0565b6007546040516381a799db60e01b81526004810191909152602481018490526044810185905263ffffffff9190911660648201819052915073__$dc3b4b0a367edd91a2d74c73e2da54c142$__906381a799db9060840160206040518083038186803b158015610c9957600080fd5b505af4158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612c75565b8015610d7157506040516381a799db60e01b815242600482015260248101839052604481018490526064810182905273__$dc3b4b0a367edd91a2d74c73e2da54c142$__906381a799db9060840160206040518083038186803b158015610d3757600080fd5b505af4158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f9190612c75565b155b15610d8a57600680546001600160801b03169055426007555b6001600660108282829054906101000a90046001600160801b0316610daf9190612ec0565b82546101009290920a6001600160801b03818102199093169183160217909155600554169050610de0816001612ec0565b600560006101000a8154816001600160801b0302191690836001600160801b031602179055506040518060800160405280878152602001886003811115610e2957610e29612f7f565b815264ffffffffff4216602080830191909152336040928301526001600160801b03841660009081526008825291909120825181559082015160018083018054909160ff1990911690836003811115610e8457610e84612f7f565b02179055506040820151600190910180546060909301516001600160a01b0316600160301b026601000000000000600160d01b031964ffffffffff9093166101000292909216610100600160d01b0319909316929092171790556000876003811115610ef257610ef2612f7f565b600081815260096020526040902054909150610f0f908890612eeb565b6000828152600960205260409020556004546001600160801b039081161415610f4e57600480546001600160801b0319166001600160801b0384161790555b600480546001600160801b03808516600160801b029116179055876003811115610f7a57610f7a612f7f565b60405188906001600160801b038516907feeb519088468e5ea7765bbf8c4464c3bde5ff110d8de10ee5db057be2599d1fc90600090a46000866001600160a01b031663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b158015610feb57600080fd5b505afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110239190612d87565b90506000876001600160a01b0316637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190612d87565b905060028a60038111156110ae576110ae612f7f565b14806110cb575060008a60038111156110c9576110c9612f7f565b145b1561117357600554600160801b90046001600160801b03168910156111025760405162461bcd60e51b815260040161040e90612e07565b6001546040516307b0a0c960e41b81523360048201526001600160a01b039182166024820152604481018b905290891690637b0a0c9090606401600060405180830381600087803b15801561115657600080fd5b505af115801561116a573d6000803e3d6000fd5b5050505061154c565b60038a600381111561118757611187612f7f565b141561136157600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63debb52df6002830160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190612d87565b6000878152600960205260409081902054905160e084901b6001600160e01b03191681526004810192909252602482018e905260448201869052606482015260840160206040518083038186803b15801561128b57600080fd5b505af415801561129f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c39190612d87565b600554909150600160801b90046001600160801b03168110156112f85760405162461bcd60e51b815260040161040e90612e07565b6040516387f9ca5d60e01b81526001600160a01b038a16906387f9ca5d90611329906000908e903390600401612de8565b600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b505050505061154c565b60018a600381111561137557611375612f7f565b141561154c57600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63debb52df600260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e857600080fd5b505afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190612d87565b6000878152600960205260409081902054905160e084901b6001600160e01b03191681526004810192909252602482018e905260448201879052606482015260840160206040518083038186803b15801561147a57600080fd5b505af415801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190612d87565b600554909150600160801b90046001600160801b03168110156114e75760405162461bcd60e51b815260040161040e90612e07565b6040516387f9ca5d60e01b81526001600160a01b038a16906387f9ca5d90611518906001908e903390600401612de8565b600060405180830381600087803b15801561153257600080fd5b505af1158015611546573d6000803e3d6000fd5b50505050505b50505050505050505050565b33301461159d5760405162461bcd60e51b815260206004820152601360248201527236b9b39739b2b73232b9103737ba1039b2b63360691b604482015260640161040e565b60015460408051631751aa8d60e31b815290516001600160a01b0390921691600091839163ba8d546891600480820192602092909190829003018186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190612d87565b90506000826001600160a01b0316637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165c57600080fd5b505afa158015611670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116949190612d87565b90506000846020015160038111156116ae576116ae612f7f565b85516000828152600960205260409020549192506116cb91612f2b565b6000828152600960205260409020556002856020015160038111156116f2576116f2612f7f565b141561193257600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63ab41556f6002830160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176457600080fd5b505afa158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c9190612d87565b8851600360005260096020527fc575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e7546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201879052606482015260840160206040518083038186803b15801561181557600080fd5b505af4158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190612d87565b60608701516040516375c66e2f60e01b81529192506001600160a01b038716916375c66e2f91611884916000918691600401612de8565b600060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b505087516001600160a01b0388169250633c3f825291506118d39086612eeb565b866040518363ffffffff1660e01b81526004016118fa929190918252602082015260400190565b600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b5050505050611fa0565b60038560200151600381111561194a5761194a612f7f565b1415611b4257600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63debb52df6002830160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119bc57600080fd5b505afa1580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f49190612d87565b88516000868152600960205260409020548790611a12908390612eeb565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b158015611a5b57600080fd5b505af4158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a939190612d87565b90506001600160a01b038516633c3f8252611aae8386612f2b565b866040518363ffffffff1660e01b8152600401611ad5929190918252602082015260400190565b600060405180830381600087803b158015611aef57600080fd5b505af1158015611b03573d6000803e3d6000fd5b505050506060860151604051632c0bf86360e11b81526001600160a01b0391821660048201526024810183905290861690635817f0c6906044016118fa565b600085602001516003811115611b5a57611b5a612f7f565b1415611d6857600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63ab41556f600260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcd57600080fd5b505afa158015611be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190612d87565b8851600160005260096020527f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a36546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201889052606482015260840160206040518083038186803b158015611c7e57600080fd5b505af4158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb69190612d87565b60608701516040516375c66e2f60e01b81529192506001600160a01b038716916375c66e2f91611ced916001918691600401612de8565b600060405180830381600087803b158015611d0757600080fd5b505af1158015611d1b573d6000803e3d6000fd5b50505050846001600160a01b0316633c3f825284886000015187611d3f9190612eeb565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016118fa565b600185602001516003811115611d8057611d80612f7f565b1415611fa057600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63debb52df600260010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611df357600080fd5b505afa158015611e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2b9190612d87565b88516000868152600960205260409020548890611e49908390612eeb565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160206040518083038186803b158015611e9257600080fd5b505af4158015611ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eca9190612d87565b90506001600160a01b038516633c3f825284611ee68488612f2b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015611f2457600080fd5b505af1158015611f38573d6000803e3d6000fd5b505050506060860151604051632c0bf86360e11b81526001600160a01b0391821660048201526024810183905290861690635817f0c690604401600060405180830381600087803b158015611f8c57600080fd5b505af115801561154c573d6000803e3d6000fd5b5050505050565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160801b038616825260088152908490208451928301909452835482526001840154929391929083019060ff16600381111561200d5761200d612f7f565b600381111561201e5761201e612f7f565b815260019190910154610100810464ffffffffff166020830152600160301b90046001600160a01b031660409091015292915050565b6000546001600160a01b031633146120ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040e565b6001600160a01b0381166121135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040e565b61211c8161281f565b50565b600b546001600160a01b031633146121755760405162461bcd60e51b81526020600482015260196024820152786d73672e73656e646572206e6f7420676f7665726e616e636560381b604482015260640161040e565b6000816001600160801b0316116121ce5760405162461bcd60e51b815260206004820152601860248201527f436f6d6d6974207175657565206d757374206265203e20300000000000000000604482015260640161040e565b600680546001600160801b0319166001600160801b0383169081179091556040519081527fdcb2c39da587e37057706c7cc170722148368fd6b3ae7daf3acb5657581c511190602001610995565b600a546001600160a01b0316331461226f5760405162461bcd60e51b8152602060048201526016602482015275436f6d6d69747465723a206e6f7420666163746f727960501b604482015260640161040e565b6001600160a01b0382166122d55760405162461bcd60e51b815260206004820152602760248201527f51756f746520746f6b656e20616464726573732063616e6e6f742062652030206044820152666164647265737360c81b606482015260840161040e565b6001600160a01b03811661233e5760405162461bcd60e51b815260206004820152602a60248201527f4c657665726167656420706f6f6c20616464726573732063616e6e6f742062656044820152692030206164647265737360b01b606482015260840161040e565b600180546001600160a01b0319166001600160a01b03838116918217909255604080516318160ddd60e01b8152905185936000939085169263095ea7b39284916318160ddd916004808301926020929190829003018186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190612d87565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561242157600080fd5b505af1158015612435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124599190612c75565b9050806124a05760405162461bcd60e51b8152602060048201526015602482015274115490cc8c08185c1c1c9bdd985b0819985a5b1959605a1b604482015260640161040e565b6001546040805163369f189f60e11b815281516001600160a01b0390931692636d3e313e92600480840193919291829003018186803b1580156124e257600080fd5b505afa1580156124f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251a9190612be3565b611fa09060029081612b05565b60008260200151600381111561253f5761253f612f7f565b835160008281526009602052604090205491925061255c91612f2b565b600082815260096020908152604090912091909155830151600381111561258557612585612f7f565b83516040516001600160801b038516907f2f2b9ec00f96da9afe52a06f4a0392b84a333e3718b29186681f51ddfe7c593b90600090a46001600160801b03808316600081815260086020526040812090815560010180546001600160d01b031916905560045490911614156126415760048054600191906000906126139084906001600160801b0316612ec0565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612641600061286f565b6004546001600160801b03838116600160801b9092041614801561267157506004546001600160801b0390811614155b156126c9576001600460108282829054906101000a90046001600160801b031661269b9190612f03565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506126c9600161286f565b6002836020015160038111156126e1576126e1612f7f565b1480612702575060008360200151600381111561270057612700612f7f565b145b15612774576001548351604051632c0bf86360e11b815233600482015260248101919091526001600160a01b0390911690635817f0c6906044015b600060405180830381600087803b15801561275757600080fd5b505af115801561276b573d6000803e3d6000fd5b50505050505050565b60038360200151600381111561278c5761278c612f7f565b14156127c85760015483516040516375c66e2f60e01b81526001600160a01b03909216916375c66e2f9161273d91600091903390600401612de8565b6001836020015160038111156127e0576127e0612f7f565b141561281a576001805484516040516375c66e2f60e01b81526001600160a01b03909216926375c66e2f9261273d92903390600401612de8565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600181111561288357612883612f7f565b14156129be576004546001600160801b03165b6004546001600160801b03600160801b909104811690821611612964576001600160801b0381166000908152600860209081526040808320815160808101909252805482526001810154919290919083019060ff1660038111156128fc576128fc612f7f565b600381111561290d5761290d612f7f565b81526001919091015464ffffffffff61010082041660208301526001600160a01b03600160301b90910481166040909201919091526060820151919250166129625761295a600183612ec0565b915050612896565b505b6004546001600160801b03600160801b909104811690821611156129a057600480546001600160801b0319166001600160801b031790556129bc565b600480546001600160801b0319166001600160801b0383161790555b505b60018160018111156129d2576129d2612f7f565b141561211c57600454600160801b90046001600160801b03165b6004546001600160801b0390811690821610612ab3576001600160801b0381166000908152600860209081526040808320815160808101909252805482526001810154919290919083019060ff166003811115612a4b57612a4b612f7f565b6003811115612a5c57612a5c612f7f565b81526001919091015464ffffffffff61010082041660208301526001600160a01b03600160301b9091048116604090920191909152606082015191925016612ab157612aa9600183612f03565b9150506129ec565b505b6004546001600160801b039081169082161015612ae757600480546001600160801b0319166001600160801b031790555050565b600480546001600160801b03808416600160801b0291161790555050565b8260028101928215612b4d579160200282015b82811115612b4d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612b18565b50612b59929150612b5d565b5090565b5b80821115612b595760008155600101612b5e565b803560048110612b8157600080fd5b919050565b600060208284031215612b9857600080fd5b8135612ba381612fab565b9392505050565b60008060408385031215612bbd57600080fd5b8235612bc881612fab565b91506020830135612bd881612fab565b809150509250929050565b600060408284031215612bf557600080fd5b82601f830112612c0457600080fd5b6040516040810181811067ffffffffffffffff82111715612c2757612c27612f95565b8060405250808385604086011115612c3e57600080fd5b60005b6002811015612c6a578151612c5581612fab565b83526020928301929190910190600101612c41565b509195945050505050565b600060208284031215612c8757600080fd5b81518015158114612ba357600080fd5b60008060408385031215612caa57600080fd5b612cb383612b72565b946020939093013593505050565b600060808284031215612cd357600080fd5b6040516080810181811067ffffffffffffffff82111715612cf657612cf6612f95565b60405282358152612d0960208401612b72565b6020820152604083013564ffffffffff81168114612d2657600080fd5b60408201526060830135612d3981612fab565b60608201529392505050565b600060208284031215612d5757600080fd5b81356001600160801b0381168114612ba357600080fd5b600060208284031215612d8057600080fd5b5035919050565b600060208284031215612d9957600080fd5b5051919050565b600060208284031215612db257600080fd5b815163ffffffff81168114612ba357600080fd5b60048110612de457634e487b7160e01b600052602160045260246000fd5b9052565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526018908201527f416d6f756e74206c657373207468616e206d696e696d756d0000000000000000604082015260600190565b815181526020808301516080830191612e5990840182612dc6565b5060408381015164ffffffffff16908301526060928301516001600160a01b0316929091019190915290565b84815260808101612e996020830186612dc6565b64ffffffffff9390931660408201526001600160a01b039190911660609091015292915050565b60006001600160801b03808316818516808303821115612ee257612ee2612f69565b01949350505050565b60008219821115612efe57612efe612f69565b500190565b60006001600160801b0383811690831681811015612f2357612f23612f69565b039392505050565b600082821015612f3d57612f3d612f69565b500390565b60006001600160801b0380831681811415612f5f57612f5f612f69565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461211c57600080fdfea26469706673582212205fec828c39264f6ed4d072b305a75054e50efe6b0a2af75684e0765ec96a880d64736f6c63430008070033a26469706673582212209ca6e27d7711f10cd59ac1d336d6dceaee76ce4e50956762280d7e0235e36e8964736f6c63430008070033",
    "libraries": {
        "PoolSwapLibrary": "0xC793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd03"
    },
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "title": "The deployer of the PoolCommitter contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 9147,
                "contract": "contracts/implementation/PoolCommitterDeployer.sol:PoolCommitterDeployer",
                "label": "factory",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            }
        }
    }
}
