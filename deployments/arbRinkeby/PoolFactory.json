{
    "address": "0x5B1B8eEB1401aAC76bA3e02885FCb725109E3F9b",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_feeReceiver",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pool",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "string",
                    "name": "ticker",
                    "type": "string"
                }
            ],
            "name": "DeployPool",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_poolCommitterDeployer",
                    "type": "address"
                }
            ],
            "name": "PoolCommitterDeployerChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_poolKeeper",
                    "type": "address"
                }
            ],
            "name": "PoolKeeperChanged",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "string",
                            "name": "poolName",
                            "type": "string"
                        },
                        {
                            "internalType": "uint32",
                            "name": "frontRunningInterval",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint32",
                            "name": "updateInterval",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint16",
                            "name": "leverageAmount",
                            "type": "uint16"
                        },
                        {
                            "internalType": "address",
                            "name": "quoteToken",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleWrapper",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "settlementEthOracle",
                            "type": "address"
                        },
                        {
                            "internalType": "uint128",
                            "name": "minimumCommitSize",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint128",
                            "name": "maximumCommitQueueLength",
                            "type": "uint128"
                        }
                    ],
                    "internalType": "struct IPoolFactory.PoolDeployment",
                    "name": "deploymentParameters",
                    "type": "tuple"
                }
            ],
            "name": "deployPool",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "feeReceiver",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "isValidPool",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "maxLeverage",
            "outputs": [
                {
                    "internalType": "uint16",
                    "name": "",
                    "type": "uint16"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "numPools",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pairTokenBase",
            "outputs": [
                {
                    "internalType": "contract PoolToken",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pairTokenBaseAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolBase",
            "outputs": [
                {
                    "internalType": "contract LeveragedPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolBaseAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolCommitterDeployer",
            "outputs": [
                {
                    "internalType": "contract IPoolCommitterDeployer",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolKeeper",
            "outputs": [
                {
                    "internalType": "contract IPoolKeeper",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "pools",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_fee",
                    "type": "uint256"
                }
            ],
            "name": "setFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_feeReceiver",
                    "type": "address"
                }
            ],
            "name": "setFeeReceiver",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint16",
                    "name": "newMaxLeverage",
                    "type": "uint16"
                }
            ],
            "name": "setMaxLeverage",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_poolCommitterDeployer",
                    "type": "address"
                }
            ],
            "name": "setPoolCommitterDeployer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_poolKeeper",
                    "type": "address"
                }
            ],
            "name": "setPoolKeeper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xbc63a163928c89de1b5ee008408bbae970d533f246d6f9f64bb45e981ac69739",
    "receipt": {
        "to": null,
        "from": "0x73A7Eb4fedcA6561F124d55A95f474c6A4ea7157",
        "contractAddress": "0x5B1B8eEB1401aAC76bA3e02885FCb725109E3F9b",
        "transactionIndex": 0,
        "gasUsed": "85892061",
        "logsBloom": "0x
        "blockHash": "0x261367a529d0bbcd43e5465048804c41fe3b761b68194d90b37bd5b6144c839f",
        "transactionHash": "0xbc63a163928c89de1b5ee008408bbae970d533f246d6f9f64bb45e981ac69739",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 7353584,
                "transactionHash": "0xbc63a163928c89de1b5ee008408bbae970d533f246d6f9f64bb45e981ac69739",
                "address": "0x5B1B8eEB1401aAC76bA3e02885FCb725109E3F9b",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000073a7eb4fedca6561f124d55a95f474c6a4ea7157"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0x261367a529d0bbcd43e5465048804c41fe3b761b68194d90b37bd5b6144c839f"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 7353584,
                "transactionHash": "0xbc63a163928c89de1b5ee008408bbae970d533f246d6f9f64bb45e981ac69739",
                "address": "0x3CC33Bd9089169b0e0701F2e4C3797E1DC463aEc",
                "topics": [
                    "0xbc8bd61e5dd69ff5cb8c389529c029503515ba368eaafbdaa406e072fdd36072",
                    "0x0000000000000000000000005b1b8eeb1401aac76ba3e02885fcb725109e3f9b",
                    "0x0000000000000000000000005b1b8eeb1401aac76ba3e02885fcb725109e3f9b"
                ],
                "data": "0x0000000000000000000000005b1b8eeb1401aac76ba3e02885fcb725109e3f9b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000009424153455f504f4f4c0000000000000000000000000000000000000000000000",
                "logIndex": 1,
                "blockHash": "0x261367a529d0bbcd43e5465048804c41fe3b761b68194d90b37bd5b6144c839f"
            }
        ],
        "blockNumber": 7353584,
        "cumulativeGasUsed": "43442799",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x0f79e82aE88E1318B8cfC8b4A205fE2F982B928A"],
    "solcInputHash": "9fa5c19a38f0b8dd3ef7cd9e4cdd4bc0",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"DeployPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolCommitterDeployer\",\"type\":\"address\"}],\"name\":\"PoolCommitterDeployerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolKeeper\",\"type\":\"address\"}],\"name\":\"PoolKeeperChanged\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"frontRunningInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"leverageAmount\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementEthOracle\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minimumCommitSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maximumCommitQueueLength\",\"type\":\"uint128\"}],\"internalType\":\"struct IPoolFactory.PoolDeployment\",\"name\":\"deploymentParameters\",\"type\":\"tuple\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenBase\",\"outputs\":[{\"internalType\":\"contract PoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenBaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBase\",\"outputs\":[{\"internalType\":\"contract LeveragedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCommitterDeployer\",\"outputs\":[{\"internalType\":\"contract IPoolCommitterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolKeeper\",\"outputs\":[{\"internalType\":\"contract IPoolKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMaxLeverage\",\"type\":\"uint16\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolCommitterDeployer\",\"type\":\"address\"}],\"name\":\"setPoolCommitterDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolKeeper\",\"type\":\"address\"}],\"name\":\"setPoolKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployPool((string,uint32,uint32,uint16,address,address,address,uint128,uint128))\":{\"params\":{\"deploymentParameters\":\"Deployment parameters of the market. Some may be reconfigurable\"},\"returns\":{\"_0\":\"Address of the created pool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"The fee amount as a percentage multiplied by 10^18\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"The pool factory contract\",\"version\":1},\"userdoc\":{\"events\":{\"DeployPool(address,string)\":{\"notice\":\"Creates a notification when a pool is deployed\"},\"PoolCommitterDeployerChanged(address)\":{\"notice\":\"Creates a notification when the pool committer deployer for the factory changes\"},\"PoolKeeperChanged(address)\":{\"notice\":\"Creates a notification when the pool keeper changes\"}},\"kind\":\"user\",\"methods\":{\"deployPool((string,uint32,uint32,uint16,address,address,address,uint128,uint128))\":{\"notice\":\"Deploy a leveraged pool with given parameters\"},\"isValidPool(address)\":{\"notice\":\"Format: Pool address => validity\"},\"pools(uint256)\":{\"notice\":\"Format: Pool counter => pool address\"},\"setFee(uint256)\":{\"notice\":\"Set the fee amount. This is a percentage multiplied by 10^18.         e.g. 5% is 0.05 * 10^18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xe8f8d98b515366730824d24269c7267eee7f0288cf737db8659acbb0c751eb53\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"abdk-libraries-solidity/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n  /*\\n   * 0.\\n   */\\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n  /*\\n   * -0.\\n   */\\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n  /*\\n   * +Infinity.\\n   */\\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n  /*\\n   * -Infinity.\\n   */\\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n  /*\\n   * Canonical NaN value.\\n   */\\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n  /**\\n   * Convert signed 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromInt (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 256-bit integer number\\n   * rounding towards zero.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 256-bit integer number\\n   */\\n  function toInt (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16638); // Overflow\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        uint256 result = x;\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into unsigned 256-bit integer number\\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n   * without error, because they are rounded to zero.\\n   *\\n   * @param x quadruple precision number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function toUInt (bytes16 x) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\\n\\n      require (exponent <= 16638); // Overflow\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 128.128 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from128x128 (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 128.128 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 128.128 bit fixed point number\\n   */\\n  function to128x128 (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16510); // Overflow\\n      if (exponent < 16255) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16367) result >>= 16367 - exponent;\\n      else if (exponent > 16367) result <<= exponent - 16367;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 64.64 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from64x64 (int128 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint128 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 64.64 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 64.64 bit fixed point number\\n   */\\n  function to64x64 (bytes16 x) internal pure returns (int128) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16446); // Overflow\\n      if (exponent < 16319) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16431) result >>= 16431 - exponent;\\n      else if (exponent > 16431) result <<= exponent - 16431;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x80000000000000000000000000000000);\\n        return -int128 (int256 (result)); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (int256 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert octuple precision number into quadruple precision number.\\n   *\\n   * @param x octuple precision number\\n   * @return quadruple precision number\\n   */\\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n      uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\\n      uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFFF) {\\n        if (significand > 0) return NaN;\\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      }\\n\\n      if (exponent > 278526)\\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      else if (exponent < 245649)\\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n      else if (exponent < 245761) {\\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 124;\\n        exponent -= 245760;\\n      }\\n\\n      uint128 result = uint128 (significand | exponent << 112);\\n      if (negative) result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into octuple precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return octuple precision number\\n   */\\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 245649 + msb;\\n        }\\n      } else {\\n        result <<= 124;\\n        exponent += 245760;\\n      }\\n\\n      result |= exponent << 236;\\n      if (uint128 (x) >= 0x80000000000000000000000000000000)\\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n      return bytes32 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert double precision number into quadruple precision number.\\n   *\\n   * @param x double precision number\\n   * @return quadruple precision number\\n   */\\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 exponent = uint64 (x) >> 52 & 0x7FF;\\n\\n      uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 15309 + msb;\\n        }\\n      } else {\\n        result <<= 60;\\n        exponent += 15360;\\n      }\\n\\n      result |= exponent << 112;\\n      if (x & 0x8000000000000000 > 0)\\n        result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (uint128 (result));\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into double precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return double precision number\\n   */\\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\\n    unchecked {\\n      bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\\n\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) {\\n        if (significand > 0) return 0x7FF8000000000000; // NaN\\n        else return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      }\\n\\n      if (exponent > 17406)\\n        return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      else if (exponent < 15309)\\n        return negative ?\\n            bytes8 (0x8000000000000000) : // -0\\n            bytes8 (0x0000000000000000); // 0\\n      else if (exponent < 15361) {\\n        significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 60;\\n        exponent -= 15360;\\n      }\\n\\n      uint64 result = uint64 (significand | exponent << 52);\\n      if (negative) result |= 0x8000000000000000;\\n\\n      return bytes8 (result);\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is NaN, false otherwise\\n   */\\n  function isNaN (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is positive or negative\\n   * infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is positive or negative infinity, false otherwise\\n   */\\n  function isInfinity (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \\n   *\\n   * @param x quadruple precision number\\n   * @return sign of x\\n   */\\n  function sign (bytes16 x) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      if (absoluteX == 0) return 0;\\n      else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\\n      else return 1;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n   * arguments are infinities of the same sign. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return sign (x - y)\\n   */\\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      // Not infinities of the same sign\\n      require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n      if (x == y) return 0;\\n      else {\\n        bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\\n        bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\\n\\n        if (negativeX) {\\n          if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\\n          else return -1; \\n        } else {\\n          if (negativeY) return 1;\\n          else return absoluteX > absoluteY ? int8 (1) : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n   * anything. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return true if x equals to y, false otherwise\\n   */\\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\\n    unchecked {\\n      if (x == y) {\\n        return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n          0x7FFF0000000000000000000000000000;\\n      } else return false;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Special values behave in the following way:\\n   *\\n   * NaN + x = NaN for any x.\\n   * Infinity + x = Infinity for any finite x.\\n   * -Infinity + x = -Infinity for any finite x.\\n   * Infinity + Infinity = Infinity.\\n   * -Infinity + -Infinity = -Infinity.\\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) { \\n          if (x == y) return x;\\n          else return NaN;\\n        } else return x; \\n      } else if (yExponent == 0x7FFF) return y;\\n      else {\\n        bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n        else {\\n          int256 delta = int256 (xExponent) - int256 (yExponent);\\n  \\n          if (xSign == ySign) {\\n            if (delta > 112) return x;\\n            else if (delta > 0) ySignifier >>= uint256 (delta);\\n            else if (delta < -112) return y;\\n            else if (delta < 0) {\\n              xSignifier >>= uint256 (-delta);\\n              xExponent = yExponent;\\n            }\\n  \\n            xSignifier += ySignifier;\\n  \\n            if (xSignifier >= 0x20000000000000000000000000000) {\\n              xSignifier >>= 1;\\n              xExponent += 1;\\n            }\\n  \\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else {\\n              if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n              else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  \\n              return bytes16 (uint128 (\\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                  (xExponent << 112) |\\n                  xSignifier)); \\n            }\\n          } else {\\n            if (delta > 0) {\\n              xSignifier <<= 1;\\n              xExponent -= 1;\\n            } else if (delta < 0) {\\n              ySignifier <<= 1;\\n              xExponent = yExponent - 1;\\n            }\\n\\n            if (delta > 112) ySignifier = 1;\\n            else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\\n            else if (delta < -112) xSignifier = 1;\\n            else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\\n\\n            if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n            else {\\n              xSignifier = ySignifier - xSignifier;\\n              xSign = ySign;\\n            }\\n\\n            if (xSignifier == 0)\\n              return POSITIVE_ZERO;\\n\\n            uint256 msb = mostSignificantBit (xSignifier);\\n\\n            if (msb == 113) {\\n              xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n              xExponent += 1;\\n            } else if (msb < 112) {\\n              uint256 shift = 112 - msb;\\n              if (xExponent > shift) {\\n                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                xExponent -= shift;\\n              } else {\\n                xSignifier <<= xExponent - 1;\\n                xExponent = 0;\\n              }\\n            } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else return bytes16 (uint128 (\\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                (xExponent << 112) |\\n                xSignifier));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Special values behave in the following way:\\n   *\\n   * NaN - x = NaN for any x.\\n   * Infinity - x = Infinity for any finite x.\\n   * -Infinity - x = -Infinity for any finite x.\\n   * Infinity - -Infinity = Infinity.\\n   * -Infinity - Infinity = -Infinity.\\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      return add (x, y ^ 0x80000000000000000000000000000000);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y.  Special values behave in the following way:\\n   *\\n   * NaN * x = NaN for any x.\\n   * Infinity * x = Infinity for any finite positive x.\\n   * Infinity * x = -Infinity for any finite negative x.\\n   * -Infinity * x = -Infinity for any finite positive x.\\n   * -Infinity * x = Infinity for any finite negative x.\\n   * Infinity * 0 = NaN.\\n   * -Infinity * 0 = NaN.\\n   * Infinity * Infinity = Infinity.\\n   * Infinity * -Infinity = -Infinity.\\n   * -Infinity * Infinity = -Infinity.\\n   * -Infinity * -Infinity = Infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) {\\n          if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n          else return NaN;\\n        } else {\\n          if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return x ^ y & 0x80000000000000000000000000000000;\\n        }\\n      } else if (yExponent == 0x7FFF) {\\n          if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return y ^ x & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        xSignifier *= ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        xExponent += yExponent;\\n\\n        uint256 msb =\\n          xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\\n          xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\\n          mostSignificantBit (xSignifier);\\n\\n        if (xExponent + msb < 16496) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb < 16608) { // Subnormal\\n          if (xExponent < 16496)\\n            xSignifier >>= 16496 - xExponent;\\n          else if (xExponent > 16496)\\n            xSignifier <<= xExponent - 16496;\\n          xExponent = 0;\\n        } else if (xExponent + msb > 49373) {\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else {\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n          else if (msb < 112)\\n            xSignifier <<= 112 - msb;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb - 16607;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y.  Special values behave in the following way:\\n   *\\n   * NaN / x = NaN for any x.\\n   * x / NaN = NaN for any x.\\n   * Infinity / x = Infinity for any finite non-negative x.\\n   * Infinity / x = -Infinity for any finite negative x including -0.\\n   * -Infinity / x = -Infinity for any finite non-negative x.\\n   * -Infinity / x = Infinity for any finite negative x including -0.\\n   * x / Infinity = 0 for any finite non-negative x.\\n   * x / -Infinity = -0 for any finite non-negative x.\\n   * x / Infinity = -0 for any finite non-negative x including -0.\\n   * x / -Infinity = 0 for any finite non-negative x including -0.\\n   * \\n   * Infinity / Infinity = NaN.\\n   * Infinity / -Infinity = -NaN.\\n   * -Infinity / Infinity = -NaN.\\n   * -Infinity / -Infinity = NaN.\\n   *\\n   * Division by zero behaves in the following way:\\n   *\\n   * x / 0 = Infinity for any finite positive x.\\n   * x / -0 = -Infinity for any finite positive x.\\n   * x / 0 = -Infinity for any finite negative x.\\n   * x / -0 = Infinity for any finite negative x.\\n   * 0 / 0 = NaN.\\n   * 0 / -0 = NaN.\\n   * -0 / 0 = NaN.\\n   * -0 / -0 = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) return NaN;\\n        else return x ^ y & 0x80000000000000000000000000000000;\\n      } else if (yExponent == 0x7FFF) {\\n        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) {\\n          if (xSignifier != 0) {\\n            uint shift = 226 - mostSignificantBit (xSignifier);\\n\\n            xSignifier <<= shift;\\n\\n            xExponent = 1;\\n            yExponent += shift - 114;\\n          }\\n        }\\n        else {\\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n        }\\n\\n        xSignifier = xSignifier / ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        assert (xSignifier >= 0x1000000000000000000000000000);\\n\\n        uint256 msb =\\n          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\\n          xSignifier >= 0x40000000000000000000000000000 ? 114 :\\n          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n        if (xExponent + msb > yExponent + 16497) { // Overflow\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16380  < yExponent) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\\n          if (xExponent + 16380 > yExponent)\\n            xSignifier <<= xExponent + 16380 - yExponent;\\n          else if (xExponent + 16380 < yExponent)\\n            xSignifier >>= yExponent - xExponent - 16380;\\n\\n          xExponent = 0;\\n        } else { // Normal\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb + 16269 - yExponent;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function neg (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x ^ 0x80000000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function abs (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n  }\\n\\n  /**\\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n          bool oddExponent = xExponent & 0x1 == 0;\\n          xExponent = xExponent + 16383 >> 1;\\n\\n          if (oddExponent) {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 113;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (226 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          } else {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 112;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (225 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          }\\n\\n          uint256 r = 0x10000000000000000000000000000;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n          uint256 r1 = xSignifier / r;\\n          if (r1 < r) r = r1;\\n\\n          return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n          bool resultNegative;\\n          uint256 resultExponent = 16495;\\n          uint256 resultSignifier;\\n\\n          if (xExponent >= 0x3FFF) {\\n            resultNegative = false;\\n            resultSignifier = xExponent - 0x3FFF;\\n            xSignifier <<= 15;\\n          } else {\\n            resultNegative = true;\\n            if (xSignifier >= 0x10000000000000000000000000000) {\\n              resultSignifier = 0x3FFE - xExponent;\\n              xSignifier <<= 15;\\n            } else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              resultSignifier = 16493 - msb;\\n              xSignifier <<= 127 - msb;\\n            }\\n          }\\n\\n          if (xSignifier == 0x80000000000000000000000000000000) {\\n            if (resultNegative) resultSignifier += 1;\\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\\n            resultSignifier <<= shift;\\n            resultExponent -= shift;\\n          } else {\\n            uint256 bb = resultNegative ? 1 : 0;\\n            while (resultSignifier < 0x10000000000000000000000000000) {\\n              resultSignifier <<= 1;\\n              resultExponent -= 1;\\n  \\n              xSignifier *= xSignifier;\\n              uint256 b = xSignifier >> 255;\\n              resultSignifier += b ^ bb;\\n              xSignifier >>= 127 + b;\\n            }\\n          }\\n\\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\\n              resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function ln (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n    }\\n  }\\n\\n  /**\\n   * Calculate 2^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n      else if (xExponent > 16397)\\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n      else if (xExponent < 16255)\\n        return 0x3FFF0000000000000000000000000000;\\n      else {\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        if (xExponent > 16367)\\n          xSignifier <<= xExponent - 16367;\\n        else if (xExponent < 16367)\\n          xSignifier >>= 16367 - xExponent;\\n\\n        if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\\n          return POSITIVE_ZERO;\\n\\n        if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n          return POSITIVE_INFINITY;\\n\\n        uint256 resultExponent = xSignifier >> 128;\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xNegative && xSignifier != 0) {\\n          xSignifier = ~xSignifier;\\n          resultExponent += 1;\\n        }\\n\\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\\n        if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n        if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n        if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n        if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n        if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n        if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n        if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n        if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n        if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n        if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n        if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n        if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n        if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n        if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n        if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n        if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n        if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n        if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n        if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n        if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n        if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n        if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n        if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n        if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n        if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n        if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n        if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n        if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n        if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n        if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n        if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n        if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n        if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n        if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n        if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n        if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n        if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n        if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n        if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n        if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n        if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n        if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n        if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n        if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n        if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n        if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n        if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n        if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n        if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n        if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n        if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n        if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n        if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n        if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n        if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n        if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n        if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n        if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n        if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n        if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n        if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n        if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n        if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n\\n        if (!xNegative) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent += 0x3FFF;\\n        } else if (resultExponent <= 0x3FFE) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent = 0x3FFF - resultExponent;\\n        } else {\\n          resultSignifier = resultSignifier >> resultExponent - 16367;\\n          resultExponent = 0;\\n        }\\n\\n        return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate e^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function exp (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n    }\\n  }\\n\\n  /**\\n   * Get index of the most significant non-zero bit in binary representation of\\n   * x.  Reverts if x is zero.\\n   *\\n   * @return index of the most significant non-zero bit in binary representation\\n   *         of x\\n   */\\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\\n    unchecked {\\n      require (x > 0);\\n\\n      uint256 result = 0;\\n\\n      if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\\n      if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\\n      if (x >= 0x100000000) { x >>= 32; result += 32; }\\n      if (x >= 0x10000) { x >>= 16; result += 16; }\\n      if (x >= 0x100) { x >>= 8; result += 8; }\\n      if (x >= 0x10) { x >>= 4; result += 4; }\\n      if (x >= 0x4) { x >>= 2; result += 2; }\\n      if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n      return result;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9694a9f6fcadd4fa917efa674de42a74b8fbab8d68924f771ea5cc5e1a301434\",\"license\":\"BSD-4-Clause\"},\"contracts/implementation/LeveragedPool.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/IPoolToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./PoolSwapLibrary.sol\\\";\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\n\\n/// @title The pool contract itself\\ncontract LeveragedPool is ILeveragedPool, Initializable {\\n    using SafeERC20 for IERC20;\\n    // #### Globals\\n\\n    // Each balance is the amount of quote tokens in the pair\\n    uint256 public override shortBalance;\\n    uint256 public override longBalance;\\n    uint32 public override frontRunningInterval;\\n    uint32 public override updateInterval;\\n\\n    bytes16 public fee;\\n    bytes16 public override leverageAmount;\\n\\n    // Index 0 is the LONG token, index 1 is the SHORT token\\n    address[2] public tokens;\\n\\n    address public governance;\\n    address public keeper;\\n    address public feeAddress;\\n    address public override quoteToken;\\n    address public override poolCommitter;\\n    uint256 public override lastPriceTimestamp; // The last time the pool was upkept\\n\\n    string public override poolName;\\n    address public override oracleWrapper;\\n    address public override settlementEthOracle;\\n\\n    address public provisionalGovernance;\\n    bool public governanceTransferInProgress;\\n    bool public paused;\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    // #### Functions\\n\\n    function initialize(ILeveragedPool.Initialization calldata initialization) external override initializer {\\n        require(initialization._feeAddress != address(0), \\\"Fee address cannot be 0 address\\\");\\n        require(initialization._quoteToken != address(0), \\\"Quote token cannot be 0 address\\\");\\n        require(initialization._oracleWrapper != address(0), \\\"Oracle wrapper cannot be 0 address\\\");\\n        require(initialization._settlementEthOracle != address(0), \\\"Keeper oracle cannot be 0 address\\\");\\n        require(initialization._owner != address(0), \\\"Owner cannot be 0 address\\\");\\n        require(initialization._keeper != address(0), \\\"Keeper cannot be 0 address\\\");\\n        require(initialization._longToken != address(0), \\\"Long token cannot be 0 address\\\");\\n        require(initialization._shortToken != address(0), \\\"Short token cannot be 0 address\\\");\\n        require(initialization._poolCommitter != address(0), \\\"PoolCommitter cannot be 0 address\\\");\\n        require(initialization._frontRunningInterval < initialization._updateInterval, \\\"frontRunning > updateInterval\\\");\\n\\n        require(initialization._fee < 1 * PoolSwapLibrary.WAD_PRECISION, \\\"Fee >= 100%\\\");\\n\\n        // set the owner of the pool. This is governance when deployed from the factory\\n        governance = initialization._owner;\\n\\n        // Setup variables\\n        keeper = initialization._keeper;\\n        oracleWrapper = initialization._oracleWrapper;\\n        settlementEthOracle = initialization._settlementEthOracle;\\n        quoteToken = initialization._quoteToken;\\n        frontRunningInterval = initialization._frontRunningInterval;\\n        updateInterval = initialization._updateInterval;\\n        fee = PoolSwapLibrary.convertUIntToDecimal(initialization._fee);\\n        leverageAmount = PoolSwapLibrary.convertUIntToDecimal(initialization._leverageAmount);\\n        feeAddress = initialization._feeAddress;\\n        lastPriceTimestamp = block.timestamp;\\n        poolName = initialization._poolName;\\n        tokens[0] = initialization._longToken;\\n        tokens[1] = initialization._shortToken;\\n        poolCommitter = initialization._poolCommitter;\\n        emit PoolInitialized(\\n            initialization._longToken,\\n            initialization._shortToken,\\n            initialization._quoteToken,\\n            initialization._poolName\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute a price change, then execute all commits in PoolCommitter\\n     * @dev This is the entry point to upkeep a market\\n     */\\n    function poolUpkeep(int256 _oldPrice, int256 _newPrice) external override onlyKeeper onlyUnpaused {\\n        require(intervalPassed(), \\\"Update interval hasn't passed\\\");\\n        // perform price change and update pool balances\\n        executePriceChange(_oldPrice, _newPrice);\\n        // execute pending commitments to enter and exit the pool\\n        IPoolCommitter(poolCommitter).executeAllCommitments();\\n        lastPriceTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Pay keeper some amount in the collateral token for the perpetual pools market\\n     * @param to Address of the pool keeper to pay\\n     * @param amount Amount to pay the pool keeper\\n     * @return Whether the keeper is going to be paid; false if the amount exceeds the balances of the\\n     *         long and short pool, and true if the keeper can successfully be paid out\\n     */\\n    function payKeeperFromBalances(address to, uint256 amount)\\n        external\\n        override\\n        onlyKeeper\\n        onlyUnpaused\\n        returns (bool)\\n    {\\n        require(to != address(0), \\\"Receipient address cannot be null\\\");\\n        uint256 _shortBalance = shortBalance;\\n        uint256 _longBalance = longBalance;\\n\\n        // If the rewards are more than the balances of the pool, the keeper does not get paid\\n        if (amount >= _shortBalance + _longBalance) {\\n            return false;\\n        }\\n\\n        (uint256 shortBalanceAfterRewards, uint256 longBalanceAfterRewards) = PoolSwapLibrary.getBalancesAfterFees(\\n            amount,\\n            _shortBalance,\\n            _longBalance\\n        );\\n\\n        shortBalance = shortBalanceAfterRewards;\\n        longBalance = longBalanceAfterRewards;\\n\\n        // Pay keeper\\n        IERC20(quoteToken).safeTransfer(to, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from pool to user\\n     * @param to Address of account to transfer to\\n     * @param amount Amount of quote tokens being transferred\\n     */\\n    function quoteTokenTransfer(address to, uint256 amount) external override onlyPoolCommitter onlyUnpaused {\\n        require(to != address(0), \\\"To address cannot be 0 address\\\");\\n        IERC20(quoteToken).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from user to account\\n     * @param from The account that's transferring quote tokens\\n     * @param to Address of account to transfer to\\n     * @param amount Amount of quote tokens being transferred\\n     */\\n    function quoteTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override onlyPoolCommitter onlyUnpaused {\\n        require(from != address(0), \\\"From address cannot be 0 address\\\");\\n        require(to != address(0), \\\"To address cannot be 0 address\\\");\\n        IERC20(quoteToken).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Execute the price change once the interval period ticks over, updating the long & short\\n     *         balances based on the change of the feed (upwards or downwards) and paying fees\\n     * @dev Can only be called by poolUpkeep; emits PriceChangeError if execution does not take place\\n     * @param _oldPrice Old price from the oracle\\n     * @param _newPrice New price from the oracle\\n     */\\n    function executePriceChange(int256 _oldPrice, int256 _newPrice) internal onlyUnpaused {\\n        // prevent a division by 0 in computing the price change\\n        // prevent negative pricing\\n        if (_oldPrice <= 0 || _newPrice <= 0) {\\n            emit PriceChangeError(_oldPrice, _newPrice);\\n        } else {\\n            uint256 _shortBalance = shortBalance;\\n            uint256 _longBalance = longBalance;\\n            PoolSwapLibrary.PriceChangeData memory priceChangeData = PoolSwapLibrary.PriceChangeData(\\n                _oldPrice,\\n                _newPrice,\\n                _longBalance,\\n                _shortBalance,\\n                leverageAmount,\\n                fee\\n            );\\n            (uint256 newLongBalance, uint256 newShortBalance, uint256 totalFeeAmount) = PoolSwapLibrary\\n                .calculatePriceChange(priceChangeData);\\n\\n            emit PoolRebalance(\\n                int256(newShortBalance) - int256(_shortBalance),\\n                int256(newLongBalance) - int256(_longBalance)\\n            );\\n            // Update pool balances\\n            longBalance = newLongBalance;\\n            shortBalance = newShortBalance;\\n            // Pay the fee\\n            IERC20(quoteToken).safeTransfer(feeAddress, totalFeeAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the long and short balances of the pools\\n     * @dev Can only be called by & used by the pool committer\\n     * @param _longBalance New balance of the long pool\\n     * @param _shortBalance New balancee of the short pool\\n     */\\n    function setNewPoolBalances(uint256 _longBalance, uint256 _shortBalance)\\n        external\\n        override\\n        onlyPoolCommitter\\n        onlyUnpaused\\n    {\\n        longBalance = _longBalance;\\n        shortBalance = _shortBalance;\\n    }\\n\\n    /**\\n     * @notice Mint tokens to a user\\n     * @dev Can only be called by & used by the pool committer\\n     * @param token Index of token\\n     * @param amount Amount of tokens to mint\\n     * @param minter Address of user/minter\\n     */\\n    function mintTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address minter\\n    ) external override onlyPoolCommitter onlyUnpaused {\\n        require(minter != address(0), \\\"Minter address cannot be 0 address\\\");\\n        require(token == 0 || token == 1, \\\"Pool: token out of range\\\");\\n        require(IPoolToken(tokens[token]).mint(amount, minter), \\\"Mint failed\\\");\\n    }\\n\\n    /**\\n     * @notice Burn tokens by a user\\n     * @dev Can only be called by & used by the pool committer\\n     * @param token Index of token\\n     * @param amount Amount of tokens to burn\\n     * @param burner Address of user/burner\\n     */\\n    function burnTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external override onlyPoolCommitter onlyUnpaused {\\n        require(burner != address(0), \\\"Burner address cannot be 0 address\\\");\\n        require(token == 0 || token == 1, \\\"Pool: token out of range\\\");\\n        require(IPoolToken(tokens[token]).burn(amount, burner), \\\"Burn failed\\\");\\n    }\\n\\n    /**\\n     * @return true if the price was last updated more than updateInterval seconds ago\\n     */\\n    function intervalPassed() public view override returns (bool) {\\n        return block.timestamp >= lastPriceTimestamp + updateInterval;\\n    }\\n\\n    /**\\n     * @notice Updates the fee address of the pool\\n     * @param account New address of the fee address/receiver\\n     */\\n    function updateFeeAddress(address account) external override onlyGov onlyUnpaused {\\n        require(account != address(0), \\\"Account cannot be 0 address\\\");\\n        address oldFeeAddress = feeAddress;\\n        feeAddress = account;\\n        emit FeeAddressUpdated(oldFeeAddress, feeAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the keeper contract of the pool\\n     * @param _keeper New address of the keeper contract\\n     */\\n    function setKeeper(address _keeper) external override onlyGov onlyUnpaused {\\n        require(_keeper != address(0), \\\"Keeper address cannot be 0 address\\\");\\n        address oldKeeper = keeper;\\n        keeper = _keeper;\\n        emit KeeperAddressChanged(oldKeeper, keeper);\\n    }\\n\\n    /**\\n     * @notice Starts to transfer governance of the pool. The new governance\\n     *          address must call `claimGovernance` in order for this to take\\n     *          effect. Until this occurs, the existing governance address\\n     *          remains in control of the pool.\\n     * @param _governance New address of the governance of the pool\\n     * @dev First step of the two-step governance transfer process\\n     * @dev Sets the governance transfer flag to true\\n     * @dev See `claimGovernance`\\n     */\\n    function transferGovernance(address _governance) external override onlyGov onlyUnpaused {\\n        require(_governance != address(0), \\\"Governance address cannot be 0 address\\\");\\n        provisionalGovernance = _governance;\\n        governanceTransferInProgress = true;\\n        emit ProvisionalGovernanceChanged(provisionalGovernance);\\n    }\\n\\n    /**\\n     * @notice Completes transfer of governance by actually changing permissions\\n     *          over the pool.\\n     * @dev Second and final step of the two-step governance transfer process\\n     * @dev See `transferGovernance`\\n     * @dev Sets the governance transfer flag to false\\n     * @dev After a successful call to this function, the actual governance\\n     *      address and the provisional governance address MUST be equal.\\n     */\\n    function claimGovernance() external override onlyUnpaused {\\n        require(governanceTransferInProgress, \\\"No governance change active\\\");\\n        require(msg.sender == provisionalGovernance, \\\"Not provisional governor\\\");\\n        address oldGovernance = governance; /* for later event emission */\\n        governance = provisionalGovernance;\\n        governanceTransferInProgress = false;\\n        emit GovernanceAddressChanged(oldGovernance, governance);\\n    }\\n\\n    /**\\n     * @return _latestPrice The oracle price\\n     * @return _data The oracleWrapper's metadata. Implementations can choose what data to return here\\n     * @return _lastPriceTimestamp The timestamp of the last upkeep\\n     * @return _updateInterval The update frequency for this pool\\n     * @dev To save gas so PoolKeeper does not have to make three external calls\\n     */\\n    function getUpkeepInformation()\\n        external\\n        view\\n        override\\n        returns (\\n            int256 _latestPrice,\\n            bytes memory _data,\\n            uint256 _lastPriceTimestamp,\\n            uint256 _updateInterval\\n        )\\n    {\\n        (_latestPrice, _data) = IOracleWrapper(oracleWrapper).getPriceAndMetadata();\\n        return (_latestPrice, _data, lastPriceTimestamp, updateInterval);\\n    }\\n\\n    /**\\n     * @return The price of the pool's feed oracle\\n     */\\n    function getOraclePrice() external view override returns (int256) {\\n        return IOracleWrapper(oracleWrapper).getPrice();\\n    }\\n\\n    function poolTokens() external view override returns (address[2] memory) {\\n        return tokens;\\n    }\\n\\n    function balances() external view override returns (uint256 _shortBalance, uint256 _longBalance) {\\n        return (shortBalance, longBalance);\\n    }\\n\\n    /**\\n     * @notice Withdraws all available quote asset from the pool\\n     * @dev Pool must not be paused\\n     * @dev ERC20 transfer\\n     */\\n    function withdrawQuote() external onlyGov {\\n        require(paused, \\\"Pool is live\\\");\\n        IERC20 quoteERC = IERC20(quoteToken);\\n        uint256 balance = quoteERC.balanceOf(address(this));\\n        IERC20(quoteToken).safeTransfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Pauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function pause() external onlyGov {\\n        paused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @notice Unpauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function unpause() external onlyGov {\\n        paused = false;\\n        emit Unpaused();\\n    }\\n\\n    // #### Modifiers\\n    modifier onlyUnpaused() {\\n        require(!paused, \\\"Pool is paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"msg.sender not keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolCommitter() {\\n        require(msg.sender == poolCommitter, \\\"msg.sender not poolCommitter\\\");\\n        _;\\n    }\\n\\n    modifier onlyFeeReceiver() {\\n        require(msg.sender == feeAddress, \\\"msg.sender not feeReceiver\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xed7a8ff46915ae32bf88fbd7ff9fab5bd7f456556ed2c93a0115197e631e95e4\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolFactory.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolCommitterDeployer.sol\\\";\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/IERC20DecimalsWrapper.sol\\\";\\nimport \\\"./LeveragedPool.sol\\\";\\nimport \\\"./PoolToken.sol\\\";\\nimport \\\"./PoolKeeper.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title The pool factory contract\\ncontract PoolFactory is IPoolFactory, Ownable {\\n    // #### Globals\\n    PoolToken public pairTokenBase;\\n    address public immutable pairTokenBaseAddress;\\n    LeveragedPool public poolBase;\\n    address public immutable poolBaseAddress;\\n    IPoolKeeper public poolKeeper;\\n    IPoolCommitterDeployer public poolCommitterDeployer;\\n\\n    // Default max leverage of 10\\n    uint16 public maxLeverage = 10;\\n    // Contract address to receive protocol fees\\n    address public feeReceiver;\\n    // Default fee; Fee value as a decimal multiplied by 10^18. For example, 0.5% is represented as 0.5 * 10^18\\n    uint256 public fee;\\n\\n    // This is required because we must pass along *some* value for decimal\\n    // precision to the base pool tokens as we use the Cloneable pattern\\n    uint8 constant DEFAULT_NUM_DECIMALS = 18;\\n\\n    /**\\n     * @notice Format: Pool counter => pool address\\n     */\\n    mapping(uint256 => address) public override pools;\\n    uint256 public override numPools;\\n\\n    /**\\n     * @notice Format: Pool address => validity\\n     */\\n    mapping(address => bool) public override isValidPool;\\n\\n    // #### Functions\\n    constructor(address _feeReceiver) {\\n        // Deploy base contracts\\n        pairTokenBase = new PoolToken(DEFAULT_NUM_DECIMALS);\\n        pairTokenBaseAddress = address(pairTokenBase);\\n        poolBase = new LeveragedPool();\\n        poolBaseAddress = address(poolBase);\\n\\n        ILeveragedPool.Initialization memory baseInitialization = ILeveragedPool.Initialization(\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            \\\"BASE_POOL\\\",\\n            15,\\n            30,\\n            0,\\n            1,\\n            address(this),\\n            address(this)\\n        );\\n        // Init bases\\n        poolBase.initialize(baseInitialization);\\n\\n        pairTokenBase.initialize(address(this), \\\"BASE_TOKEN\\\", \\\"BASE\\\", DEFAULT_NUM_DECIMALS);\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /**\\n     * @notice Deploy a leveraged pool with given parameters\\n     * @param deploymentParameters Deployment parameters of the market. Some may be reconfigurable\\n     * @return Address of the created pool\\n     */\\n    function deployPool(PoolDeployment calldata deploymentParameters) external override onlyGov returns (address) {\\n        address _poolKeeper = address(poolKeeper);\\n        require(_poolKeeper != address(0), \\\"PoolKeeper not set\\\");\\n        require(address(poolCommitterDeployer) != address(0), \\\"PoolCommitterDeployer not set\\\");\\n        address poolCommitter = poolCommitterDeployer.deploy(\\n            deploymentParameters.minimumCommitSize,\\n            deploymentParameters.maximumCommitQueueLength\\n        );\\n        require(\\n            deploymentParameters.leverageAmount >= 1 && deploymentParameters.leverageAmount <= maxLeverage,\\n            \\\"PoolKeeper: leveraged amount invalid\\\"\\n        );\\n        require(IERC20DecimalsWrapper(deploymentParameters.quoteToken).decimals() <= 18, \\\"Token decimals > 18\\\");\\n        LeveragedPool pool = LeveragedPool(Clones.clone(poolBaseAddress));\\n        address _pool = address(pool);\\n        emit DeployPool(_pool, deploymentParameters.poolName);\\n\\n        string memory leverage = uint2str(deploymentParameters.leverageAmount);\\n        string memory longString = string(abi.encodePacked(leverage, \\\"L-\\\", deploymentParameters.poolName));\\n        string memory shortString = string(abi.encodePacked(leverage, \\\"S-\\\", deploymentParameters.poolName));\\n\\n        uint8 settlementDecimals = IERC20DecimalsWrapper(deploymentParameters.quoteToken).decimals();\\n        address shortToken = deployPairToken(_pool, shortString, shortString, settlementDecimals);\\n        address longToken = deployPairToken(_pool, longString, longString, settlementDecimals);\\n        ILeveragedPool.Initialization memory initialization = ILeveragedPool.Initialization(\\n            owner(), // governance is the owner of pools -- if this changes, `onlyGov` breaks\\n            _poolKeeper,\\n            deploymentParameters.oracleWrapper,\\n            deploymentParameters.settlementEthOracle,\\n            longToken,\\n            shortToken,\\n            poolCommitter,\\n            string(abi.encodePacked(leverage, \\\"-\\\", deploymentParameters.poolName)),\\n            deploymentParameters.frontRunningInterval,\\n            deploymentParameters.updateInterval,\\n            fee,\\n            deploymentParameters.leverageAmount,\\n            feeReceiver,\\n            deploymentParameters.quoteToken\\n        );\\n\\n        // approve the quote token on the pool committer to finalise linking\\n        // this also stores the pool address in the committer\\n        // finalise pool setup\\n        pool.initialize(initialization);\\n        // approve the quote token on the pool commiter to finalise linking\\n        // this also stores the pool address in the commiter\\n        IPoolCommitter(poolCommitter).setQuoteAndPool(deploymentParameters.quoteToken, _pool);\\n        poolKeeper.newPool(_pool);\\n        pools[numPools] = _pool;\\n        numPools += 1;\\n        isValidPool[_pool] = true;\\n        return _pool;\\n    }\\n\\n    /**\\n     * @notice Deploy a contract for pool tokens\\n     * @param name Name of the token\\n     * @param symbol Symbol of the token\\n     * @param decimals Number of decimal places to be supported\\n     * @return Address of the pool token\\n     */\\n    function deployPairToken(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) internal returns (address) {\\n        PoolToken pairToken = PoolToken(Clones.clone(pairTokenBaseAddress));\\n        pairToken.initialize(owner, name, symbol, decimals);\\n\\n        return address(pairToken);\\n    }\\n\\n    function setPoolKeeper(address _poolKeeper) external override onlyOwner {\\n        require(_poolKeeper != address(0), \\\"address cannot be null\\\");\\n        poolKeeper = IPoolKeeper(_poolKeeper);\\n        emit PoolKeeperChanged(_poolKeeper);\\n    }\\n\\n    function setMaxLeverage(uint16 newMaxLeverage) external override onlyOwner {\\n        require(newMaxLeverage > 0, \\\"Maximum leverage must be non-zero\\\");\\n        maxLeverage = newMaxLeverage;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external override onlyOwner {\\n        require(_feeReceiver != address(0), \\\"address cannot be null\\\");\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /**\\n     * @notice Set the fee amount. This is a percentage multiplied by 10^18.\\n     *         e.g. 5% is 0.05 * 10^18\\n     * @param _fee The fee amount as a percentage multiplied by 10^18\\n     */\\n    function setFee(uint256 _fee) external override onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function setPoolCommitterDeployer(address _poolCommitterDeployer) external override onlyOwner {\\n        require(_poolCommitterDeployer != address(0), \\\"address cannot be null\\\");\\n        poolCommitterDeployer = IPoolCommitterDeployer(_poolCommitterDeployer);\\n        emit PoolCommitterDeployerChanged(_poolCommitterDeployer);\\n    }\\n\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @notice Converts a uint to a str\\n     * @dev Assumes ASCII strings\\n     * @return raw string representation of the uint\\n     */\\n    function uint2str(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == owner(), \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd79fef9315df81ac29e1fa328ba3380acb6080bb91c5f3567c26e5d95536397b\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolKeeper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolKeeper.sol\\\";\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IERC20DecimalsWrapper.sol\\\";\\nimport \\\"../interfaces/IERC20DecimalsWrapper.sol\\\";\\nimport \\\"./PoolSwapLibrary.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title The manager contract for multiple markets and the pools in them\\ncontract PoolKeeper is IPoolKeeper, Ownable {\\n    /* Constants */\\n    uint256 public constant BASE_TIP = 5; // 5% base tip\\n    uint256 public constant TIP_DELTA_PER_BLOCK = 5; // 5% increase per block\\n    uint256 public constant BLOCK_TIME = 13; /* in seconds */\\n    uint256 public constant MAX_DECIMALS = 18;\\n\\n    // #### Global variables\\n    /**\\n     * @notice Format: Pool address => last executionPrice\\n     */\\n    mapping(address => int256) public executionPrice;\\n\\n    IPoolFactory public factory;\\n    bytes16 constant fixedPoint = 0x403abc16d674ec800000000000000000; // 1 ether\\n\\n    uint256 public gasPrice = 10 gwei;\\n\\n    // #### Functions\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"Factory cannot be 0 address\\\");\\n        factory = IPoolFactory(_factory);\\n    }\\n\\n    /**\\n     * @notice When a pool is created, this function is called by the factory to initiate price trackings\\n     * @param _poolAddress The address of the newly-created pools\\n     */\\n    function newPool(address _poolAddress) external override onlyFactory {\\n        address oracleWrapper = ILeveragedPool(_poolAddress).oracleWrapper();\\n        int256 firstPrice = IOracleWrapper(oracleWrapper).getPrice();\\n        require(firstPrice > 0, \\\"First price is non-positive\\\");\\n        int256 startingPrice = ABDKMathQuad.toInt(ABDKMathQuad.mul(ABDKMathQuad.fromInt(firstPrice), fixedPoint));\\n        emit PoolAdded(_poolAddress, firstPrice);\\n        executionPrice[_poolAddress] = startingPrice;\\n    }\\n\\n    // Keeper network\\n    /**\\n     * @notice Check if upkeep is required\\n     * @param _pool The address of the pool to upkeep\\n     * @return upkeepNeeded Whether or not upkeep is needed for this single pool\\n     */\\n    function checkUpkeepSinglePool(address _pool) public view override returns (bool) {\\n        if (!factory.isValidPool(_pool)) {\\n            return false;\\n        }\\n\\n        // The update interval has passed\\n        return ILeveragedPool(_pool).intervalPassed();\\n    }\\n\\n    /**\\n     * @notice Checks multiple pools if any of them need updating\\n     * @param _pools The array of pools to check\\n     * @return upkeepNeeded Whether or not at least one pool needs upkeeping\\n     */\\n    function checkUpkeepMultiplePools(address[] calldata _pools) external view override returns (bool) {\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            if (checkUpkeepSinglePool(_pools[i])) {\\n                // One has been found that requires upkeeping\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Called by keepers to perform an update on a single pool\\n     * @param _pool The pool code to perform the update for\\n     */\\n    function performUpkeepSinglePool(address _pool) public override {\\n        uint256 startGas = gasleft();\\n\\n        // validate the pool, check that the interval time has passed\\n        if (!checkUpkeepSinglePool(_pool)) {\\n            return;\\n        }\\n        ILeveragedPool pool = ILeveragedPool(_pool);\\n        (int256 latestPrice, bytes memory data, uint256 savedPreviousUpdatedTimestamp, uint256 updateInterval) = pool\\n            .getUpkeepInformation();\\n\\n        // Start a new round\\n        // Get price in WAD format\\n        int256 lastExecutionPrice = executionPrice[_pool];\\n        executionPrice[_pool] = latestPrice;\\n\\n        // This allows us to still batch multiple calls to executePriceChange, even if some are invalid\\n        // Without reverting the entire transaction\\n        try pool.poolUpkeep(lastExecutionPrice, latestPrice) {\\n            // If poolUpkeep is successful, refund the keeper for their gas costs\\n            uint256 gasSpent = startGas - gasleft();\\n\\n            payKeeper(_pool, gasPrice, gasSpent, savedPreviousUpdatedTimestamp, updateInterval);\\n            emit UpkeepSuccessful(_pool, data, lastExecutionPrice, latestPrice);\\n        } catch Error(string memory reason) {\\n            // If poolUpkeep fails for any other reason, emit event\\n            emit PoolUpkeepError(_pool, reason);\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by keepers to perform an update on multiple pools\\n     * @param pools pool codes to perform the update for\\n     */\\n    function performUpkeepMultiplePools(address[] calldata pools) external override {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            performUpkeepSinglePool(pools[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pay keeper for upkeep\\n     * @param _pool Address of the given pool\\n     * @param _gasPrice Price of a single gas unit (in ETH)\\n     * @param _gasSpent Number of gas units spent\\n     * @param _savedPreviousUpdatedTimestamp Last timestamp when the pool's price execution happened\\n     * @param _updateInterval Pool interval of the given pool\\n     */\\n    function payKeeper(\\n        address _pool,\\n        uint256 _gasPrice,\\n        uint256 _gasSpent,\\n        uint256 _savedPreviousUpdatedTimestamp,\\n        uint256 _updateInterval\\n    ) internal {\\n        uint256 reward = keeperReward(_pool, _gasPrice, _gasSpent, _savedPreviousUpdatedTimestamp, _updateInterval);\\n        if (ILeveragedPool(_pool).payKeeperFromBalances(msg.sender, reward)) {\\n            emit KeeperPaid(_pool, msg.sender, reward);\\n        } else {\\n            // Usually occurs if pool just started and does not have any funds\\n            emit KeeperPaymentError(_pool, msg.sender, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Payment keeper receives for performing upkeep on a given pool\\n     * @param _pool Address of the given pool\\n     * @param _gasPrice Price of a single gas unit (in ETH)\\n     * @param _gasSpent Number of gas units spent\\n     * @param _savedPreviousUpdatedTimestamp Last timestamp when the pool's price execution happened\\n     * @param _poolInterval Pool interval of the given pool\\n     * @return Number of settlement tokens to give to the keeper for work performed\\n     */\\n    function keeperReward(\\n        address _pool,\\n        uint256 _gasPrice,\\n        uint256 _gasSpent,\\n        uint256 _savedPreviousUpdatedTimestamp,\\n        uint256 _poolInterval\\n    ) public view returns (uint256) {\\n        // keeper gas cost in wei. WAD formatted\\n        uint256 _keeperGas = keeperGas(_pool, _gasPrice, _gasSpent);\\n\\n        // tip percent in wad units\\n        bytes16 _tipPercent = ABDKMathQuad.fromUInt(keeperTip(_savedPreviousUpdatedTimestamp, _poolInterval));\\n\\n        // amount of settlement tokens to give to the keeper\\n        _tipPercent = ABDKMathQuad.div(_tipPercent, ABDKMathQuad.fromUInt(100));\\n        int256 wadRewardValue = ABDKMathQuad.toInt(\\n            ABDKMathQuad.add(\\n                ABDKMathQuad.fromUInt(_keeperGas),\\n                ABDKMathQuad.div((ABDKMathQuad.mul(ABDKMathQuad.fromUInt(_keeperGas), _tipPercent)), fixedPoint)\\n            )\\n        );\\n        uint256 decimals = IERC20DecimalsWrapper(ILeveragedPool(_pool).quoteToken()).decimals();\\n        uint256 deWadifiedReward = PoolSwapLibrary.fromWad(uint256(wadRewardValue), decimals);\\n        // _keeperGas + _keeperGas * percentTip\\n        return deWadifiedReward;\\n    }\\n\\n    /**\\n     * @notice Compensation a keeper will receive for their gas expenditure\\n     * @param _pool Address of the given pool\\n     * @param _gasPrice Price of a single gas unit (in ETH)\\n     * @param _gasSpent Number of gas units spent\\n     * @return Keeper's gas compensation\\n     */\\n    function keeperGas(\\n        address _pool,\\n        uint256 _gasPrice,\\n        uint256 _gasSpent\\n    ) public view returns (uint256) {\\n        int256 settlementTokenPrice = IOracleWrapper(ILeveragedPool(_pool).settlementEthOracle()).getPrice();\\n\\n        if (settlementTokenPrice <= 0) {\\n            return 0;\\n        } else {\\n            /* safe due to explicit bounds check above */\\n            /* (wei * Settlement / ETH) / fixed point (10^18) = amount in settlement */\\n            bytes16 _weiSpent = ABDKMathQuad.fromUInt(_gasPrice * _gasSpent);\\n            bytes16 _settlementTokenPrice = ABDKMathQuad.fromUInt(uint256(settlementTokenPrice));\\n            return\\n                ABDKMathQuad.toUInt(ABDKMathQuad.div(ABDKMathQuad.mul(_weiSpent, _settlementTokenPrice), fixedPoint));\\n        }\\n    }\\n\\n    /**\\n     * @notice Tip a keeper will receive for successfully updating the specified pool\\n     * @param _savedPreviousUpdatedTimestamp Last timestamp when the pool's price execution happened\\n     * @param _poolInterval Pool interval of the given pool\\n     * @return Percent of the `keeperGas` cost to add to payment, as a percent\\n     */\\n    function keeperTip(uint256 _savedPreviousUpdatedTimestamp, uint256 _poolInterval) public view returns (uint256) {\\n        /* the number of blocks that have elapsed since the given pool's updateInterval passed */\\n        uint256 elapsedBlocksNumerator = (block.timestamp - (_savedPreviousUpdatedTimestamp + _poolInterval));\\n\\n        uint256 keeperTip = BASE_TIP + (TIP_DELTA_PER_BLOCK * elapsedBlocksNumerator) / BLOCK_TIME;\\n\\n        // In case of network outages or otherwise, we want to cap the tip so that the keeper cost isn't unbounded\\n        if (keeperTip > 100) {\\n            return 100;\\n        } else {\\n            return keeperTip;\\n        }\\n    }\\n\\n    function setFactory(address _factory) external override onlyOwner {\\n        factory = IPoolFactory(_factory);\\n    }\\n\\n    /**\\n     * @notice Sets the gas price to be used in compensating keepers for successful upkeep\\n     * @param _price Price (in ETH) per unit gas\\n     * @dev Only owner\\n     */\\n    function setGasPrice(uint256 _price) external onlyOwner {\\n        gasPrice = _price;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"Caller not factory\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x001eec712a08612e288ed286d26764e1bbb229aa57f20c48a8ec30a4fccab515\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolSwapLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\n\\n/// @title Library for various useful (mostly) mathematical functions\\nlibrary PoolSwapLibrary {\\n    bytes16 public constant one = 0x3fff0000000000000000000000000000;\\n    bytes16 public constant zero = 0x00000000000000000000000000000000;\\n\\n    /* ABDKMathQuad defines this but it's private */\\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n    uint256 public constant MAX_DECIMALS = 18;\\n\\n    uint256 public constant WAD_PRECISION = 10**18;\\n\\n    struct PriceChangeData {\\n        int256 oldPrice;\\n        int256 newPrice;\\n        uint256 longBalance;\\n        uint256 shortBalance;\\n        bytes16 leverageAmount;\\n        bytes16 fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the ratio between two numbers\\n     * @dev Rounds any overflow towards 0. If either parameter is zero, the ratio is 0\\n     * @param _numerator The \\\"parts per\\\" side of the equation. If this is zero, the ratio is zero\\n     * @param _denominator The \\\"per part\\\" side of the equation. If this is zero, the ratio is zero\\n     * @return the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)\\n     */\\n    function getRatio(uint256 _numerator, uint256 _denominator) public pure returns (bytes16) {\\n        // Catch the divide by zero error.\\n        if (_denominator == 0) {\\n            return 0;\\n        }\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(_numerator), ABDKMathQuad.fromUInt(_denominator));\\n    }\\n\\n    /**\\n     * @notice Gets the short and long balances after the keeper rewards have been paid out\\n     *         Keeper rewards are paid proportionally to the short and long pool\\n     * @dev Assumes shortBalance + longBalance >= reward\\n     * @param reward Amount of keeper reward\\n     * @param shortBalance Short balance of the pool\\n     * @param longBalance Long balance of the pool\\n     * @return shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid\\n     * @return longBalanceAfterFees Long balance of the pool after the keeper reward has been paid\\n     */\\n    function getBalancesAfterFees(\\n        uint256 reward,\\n        uint256 shortBalance,\\n        uint256 longBalance\\n    ) external pure returns (uint256, uint256) {\\n        bytes16 ratioShort = getRatio(shortBalance, shortBalance + longBalance);\\n\\n        uint256 shortFees = convertDecimalToUInt(multiplyDecimalByUInt(ratioShort, reward));\\n\\n        uint256 shortBalanceAfterFees = shortBalance - shortFees;\\n        uint256 longBalanceAfterFees = longBalance - (reward - shortFees);\\n\\n        // Return shortBalance and longBalance after rewards are paid out\\n        return (shortBalanceAfterFees, longBalanceAfterFees);\\n    }\\n\\n    /**\\n     * @notice Compares two decimal numbers\\n     * @param x The first number to compare\\n     * @param y The second number to compare\\n     * @return -1 if x < y, 0 if x = y, or 1 if x > y\\n     */\\n    function compareDecimals(bytes16 x, bytes16 y) public pure returns (int8) {\\n        return ABDKMathQuad.cmp(x, y);\\n    }\\n\\n    /**\\n     * @notice Converts an integer value to a compatible decimal value\\n     * @param amount The amount to convert\\n     * @return The amount as a IEEE754 quadruple precision number\\n     */\\n    function convertUIntToDecimal(uint256 amount) external pure returns (bytes16) {\\n        return ABDKMathQuad.fromUInt(amount);\\n    }\\n\\n    /**\\n     * @notice Converts a raw decimal value to a more readable uint256 value\\n     * @param ratio The value to convert\\n     * @return The converted value\\n     */\\n    function convertDecimalToUInt(bytes16 ratio) public pure returns (uint256) {\\n        return ABDKMathQuad.toUInt(ratio);\\n    }\\n\\n    /**\\n     * @notice Multiplies a decimal and an unsigned integer\\n     * @param a The first term\\n     * @param b The second term\\n     * @return The product of a*b as a decimal\\n     */\\n    function multiplyDecimalByUInt(bytes16 a, uint256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.mul(a, ABDKMathQuad.fromUInt(b));\\n    }\\n\\n    /**\\n     * @notice Divides two integers\\n     * @param a The dividend\\n     * @param b The divisor\\n     * @return The quotient\\n     */\\n    function divInt(int256 a, int256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.div(ABDKMathQuad.fromInt(a), ABDKMathQuad.fromInt(b));\\n    }\\n\\n    /**\\n     * @notice Calculates the loss multiplier to apply to the losing pool. Includes the power leverage\\n     * @param ratio The ratio of new price to old price\\n     * @param direction The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased\\n     * @param leverage The amount of leverage to apply\\n     * @return The multiplier\\n     */\\n    function getLossMultiplier(\\n        bytes16 ratio,\\n        int8 direction,\\n        bytes16 leverage\\n    ) public pure returns (bytes16) {\\n        // If decreased:  2 ^ (leverage * log2[(1 * new/old) + [(0 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2[(new/old)])\\n        // If increased:  2 ^ (leverage * log2[(0 * new/old) + [(1 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2([1 / new/old]))\\n        //              = 2 ^ (leverage * log2([old/new]))\\n        return\\n            ABDKMathQuad.pow_2(\\n                ABDKMathQuad.mul(leverage, ABDKMathQuad.log_2(direction < 0 ? ratio : ABDKMathQuad.div(one, ratio)))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to take from the losing pool\\n     * @param lossMultiplier The multiplier to use\\n     * @param balance The balance of the losing pool\\n     */\\n    function getLossAmount(bytes16 lossMultiplier, uint256 balance) public pure returns (uint256) {\\n        return\\n            ABDKMathQuad.toUInt(\\n                ABDKMathQuad.mul(ABDKMathQuad.sub(one, lossMultiplier), ABDKMathQuad.fromUInt(balance))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other.\\n     * @dev This function should be called by the LeveragedPool.\\n     * @param priceChange The struct containing necessary data to calculate price change\\n     */\\n    function calculatePriceChange(PriceChangeData memory priceChange)\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 shortBalance = priceChange.shortBalance;\\n        uint256 longBalance = priceChange.longBalance;\\n        bytes16 leverageAmount = priceChange.leverageAmount;\\n        int256 oldPrice = priceChange.oldPrice;\\n        int256 newPrice = priceChange.newPrice;\\n        bytes16 fee = priceChange.fee;\\n\\n        // Calculate fees from long and short sides\\n        uint256 longFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, longBalance)) /\\n            PoolSwapLibrary.WAD_PRECISION;\\n        uint256 shortFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, shortBalance)) /\\n            PoolSwapLibrary.WAD_PRECISION;\\n\\n        shortBalance = shortBalance - shortFeeAmount;\\n        longBalance = longBalance - longFeeAmount;\\n        uint256 totalFeeAmount = shortFeeAmount + longFeeAmount;\\n\\n        // Use the ratio to determine if the price increased or decreased and therefore which direction\\n        // the funds should be transferred towards.\\n\\n        bytes16 ratio = divInt(newPrice, oldPrice);\\n        int8 direction = compareDecimals(ratio, PoolSwapLibrary.one);\\n        // Take into account the leverage\\n        bytes16 lossMultiplier = getLossMultiplier(ratio, direction, leverageAmount);\\n\\n        if (direction >= 0 && shortBalance > 0) {\\n            // Move funds from short to long pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, shortBalance);\\n            shortBalance = shortBalance - lossAmount;\\n            longBalance = longBalance + lossAmount;\\n        } else if (direction < 0 && longBalance > 0) {\\n            // Move funds from long to short pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, longBalance);\\n            shortBalance = shortBalance + lossAmount;\\n            longBalance = longBalance - lossAmount;\\n        }\\n\\n        return (longBalance, shortBalance, totalFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns true if the given timestamp is BEFORE the frontRunningInterval starts,\\n     *         which is allowed for uncommitment.\\n     * @dev If you try to uncommit AFTER the frontRunningInterval, it should revert.\\n     * @param subjectTime The timestamp for which you want to calculate if it was beforeFrontRunningInterval\\n     * @param lastPriceTimestamp The timestamp of the last price update\\n     * @param updateInterval The interval between price updates\\n     * @param frontRunningInterval The window of time before a price udpate users can not uncommit or have their commit executed from\\n     */\\n    function isBeforeFrontRunningInterval(\\n        uint256 subjectTime,\\n        uint256 lastPriceTimestamp,\\n        uint256 updateInterval,\\n        uint256 frontRunningInterval\\n    ) external pure returns (bool) {\\n        return lastPriceTimestamp + updateInterval - frontRunningInterval > subjectTime;\\n    }\\n\\n    /**\\n     * @notice Gets the number of settlement tokens to be withdrawn based on a pool token burn amount\\n     * @dev Calculates as `balance * amountIn / (tokenSupply + shadowBalance)\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param shadowBalance Balance the shadow pool at time of mint\\n     * @return Number of settlement tokens to be withdrawn on a burn\\n     */\\n    function getWithdrawAmountOnBurn(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 shadowBalance\\n    ) external pure returns (uint256) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n\\n        // Catch the divide by zero error.\\n        if (balance == 0 || tokenSupply + shadowBalance == 0) {\\n            return amountIn;\\n        }\\n        bytes16 numerator = ABDKMathQuad.mul(ABDKMathQuad.fromUInt(balance), ABDKMathQuad.fromUInt(amountIn));\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(numerator, ABDKMathQuad.fromUInt(tokenSupply + shadowBalance)));\\n    }\\n\\n    /**\\n     * @notice Gets the number of pool tokens to be minted based on existing tokens\\n     * @dev Calculated as (tokenSupply + shadowBalance) * amountIn / balance\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param shadowBalance Balance the shadow pool at time of mint\\n     * @return Number of pool tokens to be minted\\n     */\\n    function getMintAmount(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 shadowBalance\\n    ) external pure returns (uint256) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n\\n        // Catch the divide by zero error.\\n        if (balance == 0 || tokenSupply + shadowBalance == 0) {\\n            return amountIn;\\n        }\\n\\n        bytes16 numerator = ABDKMathQuad.mul(\\n            ABDKMathQuad.fromUInt(tokenSupply + shadowBalance),\\n            ABDKMathQuad.fromUInt(amountIn)\\n        );\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(numerator, ABDKMathQuad.fromUInt(balance)));\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(uint256 _wadValue, uint256 _decimals) external pure returns (uint256) {\\n        uint256 scaler = 10**(MAX_DECIMALS - _decimals);\\n        return _wadValue / scaler;\\n    }\\n}\\n\",\"keccak256\":\"0xdb371bc69356883d7f54cdf065df2c999d71ebeab16ecd5d19276a9a7be1de85\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolToken.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../vendors/ERC20_Cloneable.sol\\\";\\nimport \\\"../interfaces/IPoolToken.sol\\\";\\n\\n/// @title The pool token; used for ownership/shares of the underlying tokens of the long/short pool\\n/// @dev ERC_20_Cloneable contains onlyOwner code implemented for use with the cloneable setup\\ncontract PoolToken is ERC20_Cloneable, IPoolToken {\\n    // #### Global state\\n\\n    // #### Functions\\n\\n    constructor(uint8 _decimals) ERC20_Cloneable(\\\"BASE_TOKEN\\\", \\\"BASE\\\", _decimals) {}\\n\\n    /**\\n     * @notice Mints pool tokens\\n     * @param amount Pool tokens to burn\\n     * @param account Account to burn pool tokens to\\n     * @return Whether the mint was successful\\n     */\\n    function mint(uint256 amount, address account) external override onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burns pool tokens\\n     * @param amount Pool tokens to burn\\n     * @param account Account to burn pool tokens from\\n     * @return Whether the burn was successful\\n     */\\n    function burn(uint256 amount, address account) external override onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e9097fbbe74654591ae70d0301828a73b33e5aaa5f41048ea74e35dd1112844\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IERC20DecimalsWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The decimals interface for extending the ERC20 interface\\ninterface IERC20DecimalsWrapper {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x5b719acf06c256045637247185ac0a7f1ba2346ab14cec805a5b7ff2d0f1d83d\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/ILeveragedPool.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The pool controller contract interface\\ninterface ILeveragedPool {\\n    // Initialisation parameters for new market\\n    struct Initialization {\\n        address _owner; // Owner of the contract\\n        address _keeper; // The address of the PoolKeeper contract\\n        address _oracleWrapper; // The oracle wrapper for the derivative price feed\\n        address _settlementEthOracle; // The oracle wrapper for the SettlementToken/ETH price feed\\n        address _longToken; // Address of the long pool token\\n        address _shortToken; // Address of the short pool token\\n        address _poolCommitter; // Address of the PoolCommitter contract\\n        string _poolName; // The pool identification name\\n        uint32 _frontRunningInterval; // The minimum number of seconds that must elapse before a commit is forced to wait until the next interval\\n        uint32 _updateInterval; // The minimum number of seconds that must elapse before a commit can be executed\\n        uint256 _fee; // The fund movement fee. This amount is extracted from the deposited asset with every update and sent to the fee address\\n        uint16 _leverageAmount; // The amount of exposure to price movements for the pool\\n        address _feeAddress; // The address that the fund movement fee is sent to\\n        address _quoteToken; //  The digital asset that the pool accepts. Must have a decimals() function\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when the pool is setup and ready for use\\n     * @param longToken The address of the LONG pair token\\n     * @param shortToken The address of the SHORT pair token\\n     * @param quoteToken The address of the digital asset that the pool accepts\\n     * @param poolName The pool code for the pool\\n     */\\n    event PoolInitialized(address indexed longToken, address indexed shortToken, address quoteToken, string poolName);\\n\\n    /**\\n     * @notice Creates a notification when the pool is rebalanced\\n     * @param shortBalanceChange The change of funds in the short side\\n     * @param longBalanceChange The change of funds in the long side\\n     */\\n    event PoolRebalance(int256 shortBalanceChange, int256 longBalanceChange);\\n\\n    /**\\n     * @notice Creates a notification when the pool's price execution fails\\n     * @param startPrice Price prior to price change execution\\n     * @param endPrice Price during price change execution\\n     */\\n    event PriceChangeError(int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Represents change in fee receiver's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event FeeAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in keeper's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event KeeperAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents proposed change in governance address\\n     * @param newAddress Proposed address\\n     */\\n    event ProvisionalGovernanceChanged(address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in governance address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event GovernanceAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    function leverageAmount() external view returns (bytes16);\\n\\n    function poolCommitter() external view returns (address);\\n\\n    function quoteToken() external view returns (address);\\n\\n    function oracleWrapper() external view returns (address);\\n\\n    function lastPriceTimestamp() external view returns (uint256);\\n\\n    function poolName() external view returns (string calldata);\\n\\n    function updateInterval() external view returns (uint32);\\n\\n    function shortBalance() external view returns (uint256);\\n\\n    function longBalance() external view returns (uint256);\\n\\n    function frontRunningInterval() external view returns (uint32);\\n\\n    function poolTokens() external view returns (address[2] memory);\\n\\n    function settlementEthOracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Configures the pool on deployment. The pools are EIP 1167 clones.\\n     * @dev This should only be able to be run once to prevent abuse of the pool. Use of Openzeppelin Initializable or similar is recommended\\n     * @param initialization The struct Initialization containing initialization data\\n     */\\n    function initialize(Initialization calldata initialization) external;\\n\\n    function poolUpkeep(int256 _oldPrice, int256 _newPrice) external;\\n\\n    function quoteTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function payKeeperFromBalances(address to, uint256 amount) external returns (bool);\\n\\n    function quoteTokenTransfer(address to, uint256 amount) external;\\n\\n    function setNewPoolBalances(uint256 _longBalance, uint256 _shortBalance) external;\\n\\n    /**\\n     * @return _latestPrice The oracle price\\n     * @return _data The oracleWrapper's metadata. Implementations can choose what data to return here\\n     * @return _lastPriceTimestamp The timestamp of the last upkeep\\n     * @return _updateInterval The update frequency for this pool\\n     * @dev To save gas so PoolKeeper does not have to make three external calls\\n     */\\n    function getUpkeepInformation()\\n        external\\n        view\\n        returns (\\n            int256 _latestPrice,\\n            bytes memory _data,\\n            uint256 _lastPriceTimestamp,\\n            uint256 _updateInterval\\n        );\\n\\n    function getOraclePrice() external view returns (int256);\\n\\n    function intervalPassed() external view returns (bool);\\n\\n    function balances() external view returns (uint256 _shortBalance, uint256 _longBalance);\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function transferGovernance(address _governance) external;\\n\\n    function claimGovernance() external;\\n\\n    function updateFeeAddress(address account) external;\\n\\n    function mintTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n\\n    function burnTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8aa209784b4f3199fd603406dd75777d1df639dde6fdb6ec2d6930b363457f7c\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The oracle wrapper contract interface\\ninterface IOracleWrapper {\\n    function oracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Sets the oracle for a given market\\n     * @dev Should be secured, ideally only allowing the PoolKeeper to access\\n     * @param _oracle The oracle to set for the market\\n     */\\n    function setOracle(address _oracle) external;\\n\\n    /**\\n     * @notice Returns the current price for the asset in question\\n     * @return The latest price\\n     */\\n    function getPrice() external view returns (int256);\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here\\n     */\\n    function getPriceAndMetadata() external view returns (int256 _price, bytes memory _data);\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(int256 wad) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x884ce9d1b49a7372a50ac2350ea6c1529cd7a9da8e5b1c67ecee7d032a2166f9\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolCommitter.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The interface for the contract that handles pool commitments\\ninterface IPoolCommitter {\\n    /// Type of commit\\n    enum CommitType {\\n        ShortMint,\\n        ShortBurn,\\n        LongMint,\\n        LongBurn\\n    }\\n\\n    // Commit information\\n    struct Commit {\\n        uint256 amount;\\n        CommitType commitType;\\n        uint40 created;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice Creates a notification when a commit is created\\n     * @param commitID ID of the commit\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event CreateCommit(uint128 indexed commitID, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a commit is removed (uncommitted)\\n     * @param commitID ID of the commit\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event RemoveCommit(uint128 indexed commitID, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a commit is executed\\n     * @param commitID ID of the commit that's executed\\n     */\\n    event ExecuteCommit(uint128 commitID);\\n\\n    /**\\n     * @notice Creates a notification when a commit fails to execute\\n     * @param commitID ID of the commit\\n     */\\n    event FailedCommitExecution(uint128 commitID);\\n\\n    /**\\n     * @notice Creates a notification when the min commit size changes\\n     * @param _maximumCommitQueueLength New min commit size for mints and burns\\n     */\\n    event MinCommitSizeChanged(uint128 _maximumCommitQueueLength);\\n\\n    /**\\n     * @notice Creates a notification when the max commit queue length changes\\n     * @param newMaxQueueLength New maximum queue length for an update interval\\n     */\\n    event MaxCommitQueueLengthChanged(uint128 newMaxQueueLength);\\n\\n    // #### Functions\\n\\n    function commit(CommitType commitType, uint256 amount) external;\\n\\n    function executeAllCommitments() external;\\n\\n    function executeCommitment(Commit memory _commit) external;\\n\\n    function getCommit(uint128 _commitID) external view returns (Commit memory);\\n\\n    function setQuoteAndPool(address quoteToken, address leveragedPool) external;\\n\\n    function setMinimumCommitSize(uint128 _minimumCommitSize) external;\\n\\n    function setMaxCommitQueueLength(uint128 _maximumCommitQueueLength) external;\\n}\\n\",\"keccak256\":\"0xc30993e57ab5d0c2a3a2a9f40f729361b8bb69549d3a3b27329bdd6f8c04d8ed\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolCommitterDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The PoolCommitterDeployer interface\\ninterface IPoolCommitterDeployer {\\n    function deploy(uint128 _minimumCommitSize, uint128 _maximumCommitQueueLength) external returns (address);\\n}\\n\",\"keccak256\":\"0x2aedf14a54786bb012c036739237b13741c4cf092e295037975e333481d5f68d\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The contract factory for the keeper and pool contracts. Utilizes minimal clones to keep gas costs low\\ninterface IPoolFactory {\\n    struct PoolDeployment {\\n        string poolName; // The name to identify a pool by\\n        uint32 frontRunningInterval; // The minimum number of seconds that must elapse before a commit can be executed. Must be smaller than or equal to the update interval to prevent deadlock\\n        uint32 updateInterval; // The minimum number of seconds that must elapse before a price change\\n        uint16 leverageAmount; // The amount of exposure to price movements for the pool\\n        address quoteToken; // The digital asset that the pool accepts\\n        address oracleWrapper; // The IOracleWrapper implementation for fetching price feed data\\n        address settlementEthOracle; // The oracle to fetch the price of Ether in terms of the settlement token\\n        uint128 minimumCommitSize; // The minimum amount (in settlement tokens) that a user can commit in a single commitment\\n        uint128 maximumCommitQueueLength; // The maximum number of commitments that can be made for a given updateInterval\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when a pool is deployed\\n     * @param pool Address of the new pool\\n     * @param ticker Ticker of the neew pool\\n     */\\n    event DeployPool(address indexed pool, string ticker);\\n\\n    /**\\n     * @notice Creates a notification when the pool keeper changes\\n     * @param _poolKeeper Address of the new pool keeper\\n     */\\n    event PoolKeeperChanged(address _poolKeeper);\\n\\n    /**\\n     * @notice Creates a notification when the pool committer deployer for the factory changes\\n     * @param _poolCommitterDeployer Address of the new pool committer deployer\\n     */\\n    event PoolCommitterDeployerChanged(address _poolCommitterDeployer);\\n\\n    // #### Getters for Globals\\n    function pools(uint256 id) external view returns (address);\\n\\n    function numPools() external view returns (uint256);\\n\\n    function isValidPool(address _pool) external view returns (bool);\\n\\n    // #### Functions\\n    function deployPool(PoolDeployment calldata deploymentParameters) external returns (address);\\n\\n    function getOwner() external returns (address);\\n\\n    function setPoolKeeper(address _poolKeeper) external;\\n\\n    function setMaxLeverage(uint16 newMaxLeverage) external;\\n\\n    function setFeeReceiver(address _feeReceiver) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function setPoolCommitterDeployer(address _poolCommitterDeployer) external;\\n}\\n\",\"keccak256\":\"0xfa45389b359358b86d16613332e23f778b01e777937aa299071ddf4f7bf17038\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolKeeper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The manager contract interface for multiple markets and the pools in them\\ninterface IPoolKeeper {\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when a pool is created\\n     * @param poolAddress The pool address of the newly created pool\\n     * @param firstPrice The price of the market oracle when the pool was created\\n     */\\n    event PoolAdded(address indexed poolAddress, int256 indexed firstPrice);\\n\\n    /**\\n     * @notice Creates a notification when a call to LeveragedPool:poolUpkeep is successful\\n     * @param pool The pool address being upkept\\n     * @param data Extra data about the price fetch. This could be roundID in the case of Chainlink Oracles\\n     * @param startPrice The previous price of the pool\\n     * @param endPrice The new price of the pool\\n     */\\n    event UpkeepSuccessful(address indexed pool, bytes data, int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Creates a notification when a keeper is paid for doing upkeep for a pool\\n     * @param _pool Address of pool being upkept\\n     * @param keeper Keeper to be rewarded for upkeeping\\n     * @param reward Keeper's reward (in settlement tokens)\\n     */\\n    event KeeperPaid(address indexed _pool, address indexed keeper, uint256 reward);\\n\\n    /**\\n     * @notice Creates a notification when a keeper's payment for upkeeping a pool failed\\n     * @param _pool Address of pool being upkept\\n     * @param keeper Keeper to be rewarded for upkeeping\\n     * @param expectedReward Keeper's expected reward (in settlement tokens); not actually transferred\\n     */\\n    event KeeperPaymentError(address indexed _pool, address indexed keeper, uint256 expectedReward);\\n\\n    /**\\n     * @notice Creates a notification of a failed pool update\\n     * @param pool The pool that failed to update\\n     * @param reason The reason for the error\\n     */\\n    event PoolUpkeepError(address indexed pool, string reason);\\n\\n    // #### Functions\\n    function newPool(address _poolAddress) external;\\n\\n    function setFactory(address _factory) external;\\n\\n    function checkUpkeepSinglePool(address pool) external view returns (bool);\\n\\n    function checkUpkeepMultiplePools(address[] calldata pools) external view returns (bool);\\n\\n    function performUpkeepSinglePool(address pool) external;\\n\\n    function performUpkeepMultiplePools(address[] calldata pools) external;\\n}\\n\",\"keccak256\":\"0xfb5a863b843848563313bc782a188419089790f737cd677b7eb8ec43b44d09bc\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolToken.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title Interface for the pool tokens\\ninterface IPoolToken {\\n    function mint(uint256 amount, address account) external returns (bool);\\n\\n    function burn(uint256 amount, address account) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5e448c30895a7319a1d424fb7bf18fcffe7a857e187dd7a7eda4102259ea95b2\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/vendors/ERC20_Cloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Minimal Clones compatible implementation of the {IERC20} interface.\\n * @dev Based Openzeppelin 3.4 ERC20 contract\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20_Cloneable is Context, ERC20, Initializable {\\n    uint8 _decimals;\\n    string private _name;\\n    string private _symbol;\\n\\n    address public owner;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) ERC20(name_, symbol_) {\\n        _decimals = decimals_;\\n    }\\n\\n    function initialize(\\n        address _pool,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external initializer {\\n        owner = _pool;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Transfer ownership. Implemented to help with initializable\\n     */\\n    function transferOwnership(address _owner) external onlyOwner {\\n        require(_owner != address(0), \\\"Owner: setting to 0 address\\\");\\n        owner = _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"msg.sender not owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6ca763756afbd051aee62e582f366c32b3e1e6c75eb6307c42699273532cc012\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60c06040526004805461ffff60a01b1916600560a11b1790553480156200002557600080fd5b5060405162005afa38038062005afa833981016040819052620000489162000332565b6200005333620002c6565b6012604051620000639062000316565b60ff9091168152602001604051809103906000f0801580156200008a573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03831617905560601b6001600160601b031916608052604051620000c49062000324565b604051809103906000f080158015620000e1573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b038316908117909155606091821b6001600160601b03191660a0908152604080516101c0810182523080825260208083018290528284018290529582018190526080820181905292810183905260c08101839052815180830183526009815268109054d157d413d3d360ba1b9581019590955260e0810194909452600f610100850152601e6101208501526000610140850152600161016085015261018084018290526101a08401919091525163554bb62160e01b815263554bb62190620001c4908490600401620003b4565b600060405180830381600087803b158015620001df57600080fd5b505af1158015620001f4573d6000803e3d6000fd5b5050600154604051637b69774360e11b81523060048083019190915260806024830152600a6084830152692120a9a2afaa27a5a2a760b11b60a483015260c0604483015260c4820152634241534560e01b60e4820152601260648201526001600160a01b03909116925063f6d2ee86915061010401600060405180830381600087803b1580156200028457600080fd5b505af115801562000299573d6000803e3d6000fd5b5050600580546001600160a01b0319166001600160a01b0395909516949094179093555062000507915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112108062001c8f83390190565b612c5b8062002e9f83390190565b6000602082840312156200034557600080fd5b81516001600160a01b03811681146200035d57600080fd5b9392505050565b6000815180845260005b818110156200038c576020818501810151868301820152016200036e565b818111156200039f576000602083870101525b50601f01601f19169290920160200192915050565b60208152620003cf6020820183516001600160a01b03169052565b60006020830151620003ec60408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e08301516101c06101008181860152620004766101e086018462000364565b90860151909250610120620004928682018363ffffffff169052565b8601519050610140620004ac8682018363ffffffff169052565b860151610160868101919091528601519050610180620004d18187018361ffff169052565b86015190506101a0620004ee868201836001600160a01b03169052565b909501516001600160a01b031693019290925250919050565b60805160601c60a05160601c61174e620005416000396000818161030d015261072e0152600081816101ce0152611085015261174e6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b3f006741161007c578063b3f00674146102d9578063d723c68b146102ec578063ddca3f43146102ff578063ed3f7e2614610308578063efdcd9741461032f578063f2fde38b1461034257600080fd5b8063715018a61461026f578063893d20e8146102775780638da5cb5b14610277578063ac4afa3814610288578063ae3302c2146102b157600080fd5b80634690092c1161010a5780634690092c146101c9578063568212f6146101f05780635ab78ee1146102035780635bae377a1461023657806367e047561461024957806369fe0e2d1461025c57600080fd5b80630679d36214610147578063178f9e351461015c57806335c62bc21461018c57806340339cbf146101a3578063430ed6eb146101b6575b600080fd5b61015a610155366004611210565b610355565b005b60035461016f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019560085481565b604051908152602001610183565b61016f6101b13660046111ab565b610408565b61015a6101c436600461116a565b610c07565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b61015a6101fe36600461116a565b610cac565b61022661021136600461116a565b60096020526000908152604090205460ff1681565b6040519015158152602001610183565b60025461016f906001600160a01b031681565b60045461016f906001600160a01b031681565b61015a61026a366004611234565b610d4a565b61015a610d79565b6000546001600160a01b031661016f565b61016f610296366004611234565b6007602052600090815260409020546001600160a01b031681565b6004546102c690600160a01b900461ffff1681565b60405161ffff9091168152602001610183565b60055461016f906001600160a01b031681565b60015461016f906001600160a01b031681565b61019560065481565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b61015a61033d36600461116a565b610daf565b61015a61035036600461116a565b610e21565b6000546001600160a01b031633146103885760405162461bcd60e51b815260040161037f906113e3565b60405180910390fd5b60008161ffff16116103e65760405162461bcd60e51b815260206004820152602160248201527f4d6178696d756d206c65766572616765206d757374206265206e6f6e2d7a65726044820152606f60f81b606482015260840161037f565b6004805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b600080546001600160a01b031633146104635760405162461bcd60e51b815260206004820152601960248201527f6d73672e73656e646572206e6f7420676f7665726e616e636500000000000000604482015260640161037f565b6003546001600160a01b0316806104b15760405162461bcd60e51b8152602060048201526012602482015271141bdbdb12d9595c195c881b9bdd081cd95d60721b604482015260640161037f565b6004546001600160a01b03166105095760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c436f6d6d69747465724465706c6f796572206e6f7420736574000000604482015260640161037f565b6004546000906001600160a01b0316639604198361052e610100870160e088016111e7565b610540610120880161010089016111e7565b6040516001600160e01b031960e085901b1681526001600160801b03928316600482015291166024820152604401602060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061118e565b905060016105d46080860160608701611210565b61ffff16101580156106065750600454600160a01b900461ffff166105ff6080860160608701611210565b61ffff1611155b61065e5760405162461bcd60e51b8152602060048201526024808201527f506f6f6c4b65657065723a206c657665726167656420616d6f756e7420696e76604482015263185b1a5960e21b606482015260840161037f565b601261067060a086016080870161116a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e09190611273565b60ff1611156107275760405162461bcd60e51b81526020600482015260136024820152720a8ded6cadc40c8cac6d2dac2d8e6407c40627606b1b604482015260640161037f565b60006107527f0000000000000000000000000000000000000000000000000000000000000000610ebc565b9050806001600160a01b0381167fd76cdb035f3aba359cb02087e4c5bd75f911562b407fc3a52ed2bedfb46585b661078a8880611593565b6040516107989291906113b4565b60405180910390a260006107be6107b56080890160608a01611210565b61ffff16610f54565b90506000816107cd8980611593565b6040516020016107df939291906112c2565b60408051601f1981840301815291905290506000826107fe8a80611593565b604051602001610810939291906112fa565b60408051601f198184030181529190529050600061083460a08b0160808c0161116a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190611273565b905060006108b48684858561107d565b905060006108c48786878661107d565b90506000604051806101c001604052806108e66000546001600160a01b031690565b6001600160a01b031681526020018c6001600160a01b031681526020018e60a0016020810190610916919061116a565b6001600160a01b031681526020018e60c0016020810190610937919061116a565b6001600160a01b03168152602001836001600160a01b03168152602001846001600160a01b031681526020018b6001600160a01b03168152602001888f80600001906109839190611593565b60405160200161099593929190611332565b60405160208183030381529060405281526020018e60200160208101906109bc919061124d565b63ffffffff1681526020018e60400160208101906109da919061124d565b63ffffffff16815260200160065481526020018e6060016020810190610a009190611210565b61ffff168152602001600560009054906101000a90046001600160a01b03166001600160a01b031681526020018e6080016020810190610a40919061116a565b6001600160a01b03168152509050886001600160a01b031663554bb621826040518263ffffffff1660e01b8152600401610a7a9190611448565b600060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b50505050896001600160a01b031663fd555fb98e6080016020810190610ace919061116a565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908b166024820152604401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b5050600354604051633c5c7fb360e01b81526001600160a01b038c811660048301529091169250633c5c7fb39150602401600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505060088054600090815260076020526040812080546001600160a01b0319166001600160a01b038e1617905581546001945091925090610bcc9084906115e1565b9091555050506001600160a01b0387166000908152600960205260409020805460ff191660011790555094985050505050505050505b919050565b6000546001600160a01b03163314610c315760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610c575760405162461bcd60e51b815260040161037f90611418565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ff33ed59034aadf61086c54204694b493ee22a3d903bddbe94c276f7bb442f4e3906020015b60405180910390a150565b6000546001600160a01b03163314610cd65760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610cfc5760405162461bcd60e51b815260040161037f90611418565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f71ef8cdf92396d830b1bb3e195158a279020af78e559c0997223f1bc4c735e0d90602001610ca1565b6000546001600160a01b03163314610d745760405162461bcd60e51b815260040161037f906113e3565b600655565b6000546001600160a01b03163314610da35760405162461bcd60e51b815260040161037f906113e3565b610dad600061111a565b565b6000546001600160a01b03163314610dd95760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610dff5760405162461bcd60e51b815260040161037f90611418565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e4b5760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610eb05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161037f565b610eb98161111a565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610c025760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161037f565b606081610f785750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610fa25780610f8c816116a6565b9150610f9b9050600a8361161e565b9150610f7c565b60008167ffffffffffffffff811115610fbd57610fbd6116ed565b6040519080825280601f01601f191660200182016040528015610fe7576020820181803683370190505b509050815b851561107457610ffd60018261165f565b9050600061100c600a8861161e565b61101790600a611640565b611021908861165f565b61102c9060306115f9565b905060008160f81b905080848481518110611049576110496116d7565b60200101906001600160f81b031916908160001a90535061106b600a8961161e565b97505050610fec565b50949350505050565b6000806110a97f0000000000000000000000000000000000000000000000000000000000000000610ebc565b604051637b69774360e11b81529091506001600160a01b0382169063f6d2ee86906110de908990899089908990600401611369565b600060405180830381600087803b1580156110f857600080fd5b505af115801561110c573d6000803e3d6000fd5b509298975050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561117c57600080fd5b813561118781611703565b9392505050565b6000602082840312156111a057600080fd5b815161118781611703565b6000602082840312156111bd57600080fd5b813567ffffffffffffffff8111156111d457600080fd5b8201610120818503121561118757600080fd5b6000602082840312156111f957600080fd5b81356001600160801b038116811461118757600080fd5b60006020828403121561122257600080fd5b813561ffff8116811461118757600080fd5b60006020828403121561124657600080fd5b5035919050565b60006020828403121561125f57600080fd5b813563ffffffff8116811461118757600080fd5b60006020828403121561128557600080fd5b815160ff8116811461118757600080fd5b600081518084526112ae816020860160208601611676565b601f01601f19169290920160200192915050565b600084516112d4818460208901611676565b614c2d60f01b908301908152838560028301376000930160020192835250909392505050565b6000845161130c818460208901611676565b61532d60f01b908301908152838560028301376000930160020192835250909392505050565b60008451611344818460208901611676565b602d60f81b908301908152838560018301376000930160010192835250909392505050565b6001600160a01b038516815260806020820181905260009061138d90830186611296565b828103604084015261139f8186611296565b91505060ff8316606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601690820152751859191c995cdcc818d85b9b9bdd081899481b9d5b1b60521b604082015260600190565b602081526114626020820183516001600160a01b03169052565b6000602083015161147e60408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e08301516101c061010081818601526115066101e0860184611296565b908601519092506101206115218682018363ffffffff169052565b860151905061014061153a8682018363ffffffff169052565b86015161016086810191909152860151905061018061155e8187018361ffff169052565b86015190506101a061157a868201836001600160a01b03169052565b909501516001600160a01b031693019290925250919050565b6000808335601e198436030181126115aa57600080fd5b83018035915067ffffffffffffffff8211156115c557600080fd5b6020019150368190038213156115da57600080fd5b9250929050565b600082198211156115f4576115f46116c1565b500190565b600060ff821660ff84168060ff03821115611616576116166116c1565b019392505050565b60008261163b57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561165a5761165a6116c1565b500290565b600082821015611671576116716116c1565b500390565b60005b83811015611691578181015183820152602001611679565b838111156116a0576000848401525b50505050565b60006000198214156116ba576116ba6116c1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610eb957600080fdfea2646970667358221220c5755c5c2faebb529a4680dc7d6a07b335286c615a89eead2c0f0c17465db74c64736f6c6343000807003360806040523480156200001157600080fd5b506040516200121038038062001210833981016040819052620000349162000175565b6040518060400160405280600a8152602001692120a9a2afaa27a5a2a760b11b815250604051806040016040528060048152602001634241534560e01b81525082828281600390805190602001906200008f929190620000cf565b508051620000a5906004906020840190620000cf565b50506005805460ff909316620100000262ff0000199093169290921790915550620001de92505050565b828054620000dd90620001a1565b90600052602060002090601f0160209004810192826200010157600085556200014c565b82601f106200011c57805160ff19168380011785556200014c565b828001600101855582156200014c579182015b828111156200014c5782518255916020019190600101906200012f565b506200015a9291506200015e565b5090565b5b808211156200015a57600081556001016200015f565b6000602082840312156200018857600080fd5b815160ff811681146200019a57600080fd5b9392505050565b600181811c90821680620001b657607f821691505b60208210811415620001d857634e487b7160e01b600052602260045260246000fd5b50919050565b61102280620001ee6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806394bf804d11610097578063dd62ed3e11610066578063dd62ed3e14610231578063f2fde38b1461026a578063f6d2ee861461027f578063fcd3533c1461029257600080fd5b806394bf804d146101f057806395d89b4114610203578063a457c2d71461020b578063a9059cbb1461021e57600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461018957806370a082311461019c5780638da5cb5b146101c557600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d6102a5565b60405161011a9190610ed3565b60405180910390f35b610136610131366004610e86565b610337565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610dbd565b61034d565b60055462010000900460ff1660405160ff909116815260200161011a565b610136610197366004610e86565b6103fc565b61014a6101aa366004610d68565b6001600160a01b031660009081526020819052604090205490565b6008546101d8906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b6101366101fe366004610eb0565b610438565b61010d61046f565b610136610219366004610e86565b61047e565b61013661022c366004610e86565b610517565b61014a61023f366004610d8a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61027d610278366004610d68565b610524565b005b61027d61028d366004610df9565b6105c6565b6101366102a0366004610eb0565b6106d6565b6060600680546102b490610f85565b80601f01602080910402602001604051908101604052809291908181526020018280546102e090610f85565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b5050505050905090565b600061034433848461070d565b50600192915050565b600061035a848484610832565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103e45760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103f1853385840361070d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610344918590610433908690610f56565b61070d565b6008546000906001600160a01b031633146104655760405162461bcd60e51b81526004016103db90610f28565b6103448284610a01565b6060600780546102b490610f85565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105005760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103db565b61050d338585840361070d565b5060019392505050565b6000610344338484610832565b6008546001600160a01b0316331461054e5760405162461bcd60e51b81526004016103db90610f28565b6001600160a01b0381166105a45760405162461bcd60e51b815260206004820152601b60248201527f4f776e65723a2073657474696e6720746f20302061646472657373000000000060448201526064016103db565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600554610100900460ff16806105df575060055460ff16155b6106425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b600554610100900460ff16158015610664576005805461ffff19166101011790555b600880546001600160a01b0319166001600160a01b0387161790558351610692906006906020870190610c26565b5082516106a6906007906020860190610c26565b506005805462ff000019166201000060ff85160217905580156106cf576005805461ff00191690555b5050505050565b6008546000906001600160a01b031633146107035760405162461bcd60e51b81526004016103db90610f28565b6103448284610ae0565b6001600160a01b03831661076f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103db565b6001600160a01b0382166107d05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166108965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103db565b6001600160a01b0382166108f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103db565b6001600160a01b038316600090815260208190526040902054818110156109705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103db565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906109a7908490610f56565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109f391815260200190565b60405180910390a350505050565b6001600160a01b038216610a575760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103db565b8060026000828254610a699190610f56565b90915550506001600160a01b03821660009081526020819052604081208054839290610a96908490610f56565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b405760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103db565b6001600160a01b03821660009081526020819052604090205481811015610bb45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103db565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610be3908490610f6e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610825565b828054610c3290610f85565b90600052602060002090601f016020900481019282610c545760008555610c9a565b82601f10610c6d57805160ff1916838001178555610c9a565b82800160010185558215610c9a579182015b82811115610c9a578251825591602001919060010190610c7f565b50610ca6929150610caa565b5090565b5b80821115610ca65760008155600101610cab565b80356001600160a01b0381168114610cd657600080fd5b919050565b600082601f830112610cec57600080fd5b813567ffffffffffffffff80821115610d0757610d07610fd6565b604051601f8301601f19908116603f01168101908282118183101715610d2f57610d2f610fd6565b81604052838152866020858801011115610d4857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610d7a57600080fd5b610d8382610cbf565b9392505050565b60008060408385031215610d9d57600080fd5b610da683610cbf565b9150610db460208401610cbf565b90509250929050565b600080600060608486031215610dd257600080fd5b610ddb84610cbf565b9250610de960208501610cbf565b9150604084013590509250925092565b60008060008060808587031215610e0f57600080fd5b610e1885610cbf565b9350602085013567ffffffffffffffff80821115610e3557600080fd5b610e4188838901610cdb565b94506040870135915080821115610e5757600080fd5b50610e6487828801610cdb565b925050606085013560ff81168114610e7b57600080fd5b939692955090935050565b60008060408385031215610e9957600080fd5b610ea283610cbf565b946020939093013593505050565b60008060408385031215610ec357600080fd5b82359150610db460208401610cbf565b600060208083528351808285015260005b81811015610f0057858101830151858201604001528201610ee4565b81811115610f12576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526014908201527336b9b39739b2b73232b9103737ba1037bbb732b960611b604082015260600190565b60008219821115610f6957610f69610fc0565b500190565b600082821015610f8057610f80610fc0565b500390565b600181811c90821680610f9957607f821691505b60208210811415610fba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207c87cda234a81f67da55383e6777723cd02e3646c72a9ac54ed0abd1942c4c2864736f6c63430008070033608060405234801561001057600080fd5b50612c3b806100206000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80637bbf10331161013b578063b9ed8abf116100b8578063ddca3f431161007c578063ddca3f43146104de578063f164e2a7146104f2578063f3466dfa14610506578063f633a7401461051b578063fd2c80ae1461052e57600080fd5b8063b9ed8abf14610489578063ba8d54681461049c578063bbcaac38146104a5578063cd39f30f146104b8578063d38bfff4146104cb57600080fd5b80638456cb59116100ff5780638456cb591461042257806387f9ca5d1461042a5780639fd552451461043d578063ab47c2b314610450578063aced16611461047657600080fd5b80637bbf1033146103d05780637bfe789a146103d85780637de93f93146103fd5780637e71fc7d146104065780638226f3961461040f57600080fd5b80635aa6e675116101c9578063748747e61161018d578063748747e61461036657806375c66e2f14610379578063796da7af1461038c5780637b0a0c90146103a25780637bb98a68146103b557600080fd5b80635aa6e675146102ff5780635c975abb146103125780635d36b190146103365780636d3e313e1461033e5780636dc2b2711461035357600080fd5b80633f4ba83a116102105780633f4ba83a146102ab57806341275358146102b35780634f64b2be146102c6578063554bb621146102d95780635817f0c6146102ec57600080fd5b806304883c2714610242578063217a4b70146102635780633c3f82521461028e5780633d4c485d146102a3575b600080fd5b61024a610546565b60405161025a94939291906129c3565b60405180910390f35b600a54610276906001600160a01b031681565b6040516001600160a01b03909116815260200161025a565b6102a161029c3660046127b9565b6105f9565b005b6102a1610661565b6102a1610771565b600954610276906001600160a01b031681565b6102766102d436600461283b565b6107d3565b6102a16102e73660046127db565b6107f3565b6102a16102fa366004612671565b61117d565b600754610276906001600160a01b031681565b60105461032690600160a81b900460ff1681565b604051901515815260200161025a565b6102a161123e565b61034661137c565b60405161025a9190612989565b610326610361366004612671565b6113c0565b6102a161037436600461261a565b61158a565b6102a1610387366004612878565b611691565b610394611871565b60405190815260200161025a565b6102a16103b0366004612635565b6118f3565b6001546002546040805192835260208301919091520161025a565b610326611a0b565b6003546103e89063ffffffff1681565b60405163ffffffff909116815260200161025a565b610394600c5481565b61039460025481565b600f54610276906001600160a01b031681565b6102a1611a35565b6102a1610438366004612878565b611a9d565b601054610276906001600160a01b031681565b60045461045d9060801b81565b6040516001600160801b0319909116815260200161025a565b600854610276906001600160a01b031681565b600e54610276906001600160a01b031681565b61039460015481565b6102a16104b336600461261a565b611c78565b600b54610276906001600160a01b031681565b6102a16104d936600461261a565b611d74565b60035461045d90600160401b900460801b81565b60105461032690600160a01b900460ff1681565b61050e611e83565b60405161025a91906129ef565b6102a16105293660046127b9565b611f11565b6003546103e890640100000000900463ffffffff1681565b60006060600080600e60009054906101000a90046001600160a01b03166001600160a01b031663db6d8fcf6040518163ffffffff1660e01b815260040160006040518083038186803b15801561059b57600080fd5b505afa1580156105af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d79190810190612700565b600c546003549297919650945064010000000090910463ffffffff1692509050565b600b546001600160a01b0316331461062c5760405162461bcd60e51b815260040161062390612a2a565b60405180910390fd5b601054600160a81b900460ff16156106565760405162461bcd60e51b815260040161062390612a02565b600291909155600155565b6007546001600160a01b0316331461068b5760405162461bcd60e51b815260040161062390612a61565b601054600160a81b900460ff166106d35760405162461bcd60e51b815260206004820152600c60248201526b506f6f6c206973206c69766560a01b6044820152606401610623565b600a546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561071b57600080fd5b505afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075391906126e7565b600a5490915061076d906001600160a01b0316338361205b565b5050565b6007546001600160a01b0316331461079b5760405162461bcd60e51b815260040161062390612a61565b6010805460ff60a81b191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b600581600281106107e357600080fd5b01546001600160a01b0316905081565b600054610100900460ff168061080c575060005460ff16155b61086f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610623565b600054610100900460ff16158015610891576000805461ffff19166101011790555b60006108a56101a08401610180850161261a565b6001600160a01b031614156108fc5760405162461bcd60e51b815260206004820152601f60248201527f46656520616464726573732063616e6e6f7420626520302061646472657373006044820152606401610623565b60006109106101c084016101a0850161261a565b6001600160a01b031614156109675760405162461bcd60e51b815260206004820152601f60248201527f51756f746520746f6b656e2063616e6e6f7420626520302061646472657373006044820152606401610623565b6000610979606084016040850161261a565b6001600160a01b031614156109db5760405162461bcd60e51b815260206004820152602260248201527f4f7261636c6520777261707065722063616e6e6f742062652030206164647265604482015261737360f01b6064820152608401610623565b60006109ed608084016060850161261a565b6001600160a01b03161415610a4e5760405162461bcd60e51b815260206004820152602160248201527f4b6565706572206f7261636c652063616e6e6f742062652030206164647265736044820152607360f81b6064820152608401610623565b6000610a5d602084018461261a565b6001600160a01b03161415610ab45760405162461bcd60e51b815260206004820152601960248201527f4f776e65722063616e6e6f7420626520302061646472657373000000000000006044820152606401610623565b6000610ac6604084016020850161261a565b6001600160a01b03161415610b1d5760405162461bcd60e51b815260206004820152601a60248201527f4b65657065722063616e6e6f74206265203020616464726573730000000000006044820152606401610623565b6000610b2f60a084016080850161261a565b6001600160a01b03161415610b865760405162461bcd60e51b815260206004820152601e60248201527f4c6f6e6720746f6b656e2063616e6e6f742062652030206164647265737300006044820152606401610623565b6000610b9860c0840160a0850161261a565b6001600160a01b03161415610bef5760405162461bcd60e51b815260206004820152601f60248201527f53686f727420746f6b656e2063616e6e6f7420626520302061646472657373006044820152606401610623565b6000610c0160e0840160c0850161261a565b6001600160a01b03161415610c625760405162461bcd60e51b815260206004820152602160248201527f506f6f6c436f6d6d69747465722063616e6e6f742062652030206164647265736044820152607360f81b6064820152608401610623565b610c74610140830161012084016128db565b63ffffffff16610c8c610120840161010085016128db565b63ffffffff1610610cdf5760405162461bcd60e51b815260206004820152601d60248201527f66726f6e7452756e6e696e67203e20757064617465496e74657276616c0000006044820152606401610623565b610cf2670de0b6b3a76400006001612afe565b82610140013510610d335760405162461bcd60e51b815260206004820152600b60248201526a466565203e3d203130302560a81b6044820152606401610623565b610d40602083018361261a565b600780546001600160a01b0319166001600160a01b0392909216919091179055610d70604083016020840161261a565b600880546001600160a01b0319166001600160a01b0392909216919091179055610da0606083016040840161261a565b600e80546001600160a01b0319166001600160a01b0392909216919091179055610dd0608083016060840161261a565b600f80546001600160a01b0319166001600160a01b0392909216919091179055610e026101c083016101a0840161261a565b600a80546001600160a01b0319166001600160a01b0392909216919091179055610e34610120830161010084016128db565b6003805463ffffffff191663ffffffff92909216919091179055610e60610140830161012084016128db565b6003805463ffffffff929092166401000000000267ffffffff0000000019909216919091179055604051636fedf26d60e11b8152610140830135600482015273C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd039063dfdbe4da9060240160206040518083038186803b158015610ed657600080fd5b505af4158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e91906126bd565b6003805460809290921c600160401b0277ffffffffffffffffffffffffffffffff00000000000000001990921691909117905573C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd0363dfdbe4da610f6d61018085016101608601612817565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b158015610fa757600080fd5b505af4158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf91906126bd565b600480546001600160801b03191660809290921c91909117905561100b6101a08301610180840161261a565b600980546001600160a01b0319166001600160a01b039290921691909117905542600c5561103c60e0830183612a98565b61104891600d91612547565b5061105960a083016080840161261a565b600560000180546001600160a01b0319166001600160a01b039290921691909117905561108c60c0830160a0840161261a565b600560010180546001600160a01b0319166001600160a01b03929092169190911790556110bf60e0830160c0840161261a565b600b80546001600160a01b0319166001600160a01b03929092169190911790556110ef60c0830160a0840161261a565b6001600160a01b031661110860a084016080850161261a565b6001600160a01b03167fbc8bd61e5dd69ff5cb8c389529c029503515ba368eaafbdaa406e072fdd360726111446101c086016101a0870161261a565b61115160e0870187612a98565b60405161116093929190612949565b60405180910390a3801561076d576000805461ff00191690555050565b600b546001600160a01b031633146111a75760405162461bcd60e51b815260040161062390612a2a565b601054600160a81b900460ff16156111d15760405162461bcd60e51b815260040161062390612a02565b6001600160a01b0382166112275760405162461bcd60e51b815260206004820152601e60248201527f546f20616464726573732063616e6e6f742062652030206164647265737300006044820152606401610623565b600a5461076d906001600160a01b0316838361205b565b601054600160a81b900460ff16156112685760405162461bcd60e51b815260040161062390612a02565b601054600160a01b900460ff166112c15760405162461bcd60e51b815260206004820152601b60248201527f4e6f20676f7665726e616e6365206368616e67652061637469766500000000006044820152606401610623565b6010546001600160a01b0316331461131b5760405162461bcd60e51b815260206004820152601860248201527f4e6f742070726f766973696f6e616c20676f7665726e6f7200000000000000006044820152606401610623565b60078054601080546001600160a01b038082166001600160a01b03198516811790955560ff60a01b199091169091556040519116919082907f023588d3d1dcaad34e471c9e01b616b794156174bc693539c8fe15c0bfd5d82690600090a350565b6113846125cb565b60408051808201918290529060059060029082845b81546001600160a01b03168152600190910190602001808311611399575050505050905090565b6008546000906001600160a01b031633146114155760405162461bcd60e51b815260206004820152601560248201527436b9b39739b2b73232b9103737ba1035b2b2b832b960591b6044820152606401610623565b601054600160a81b900460ff161561143f5760405162461bcd60e51b815260040161062390612a02565b6001600160a01b03831661149f5760405162461bcd60e51b815260206004820152602160248201527f52656365697069656e7420616464726573732063616e6e6f74206265206e756c6044820152601b60fa1b6064820152608401610623565b6001546002546114af8183612ae6565b84106114c057600092505050611584565b60405163dc35bc1360e01b8152600481018590526024810183905260448101829052600090819073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd039063dc35bc1390606401604080518083038186803b15801561151d57600080fd5b505af4158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190612854565b60018290556002819055600a54919350915061157b906001600160a01b0316888861205b565b60019450505050505b92915050565b6007546001600160a01b031633146115b45760405162461bcd60e51b815260040161062390612a61565b601054600160a81b900460ff16156115de5760405162461bcd60e51b815260040161062390612a02565b6001600160a01b03811661163f5760405162461bcd60e51b815260206004820152602260248201527f4b656570657220616464726573732063616e6e6f742062652030206164647265604482015261737360f01b6064820152608401610623565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f402b3f9a8de3e388e7653c7a5892204fe18b579c8c23db19d6e00f1043ceb92190600090a35050565b600b546001600160a01b031633146116bb5760405162461bcd60e51b815260040161062390612a2a565b601054600160a81b900460ff16156116e55760405162461bcd60e51b815260040161062390612a02565b6001600160a01b0381166117465760405162461bcd60e51b815260206004820152602260248201527f4d696e74657220616464726573732063616e6e6f742062652030206164647265604482015261737360f01b6064820152608401610623565b8215806117535750826001145b61179a5760405162461bcd60e51b8152602060048201526018602482015277506f6f6c3a20746f6b656e206f7574206f662072616e676560401b6044820152606401610623565b600583600281106117ad576117ad612bd9565b01546040516394bf804d60e01b8152600481018490526001600160a01b038381166024830152909116906394bf804d90604401602060405180830381600087803b1580156117fa57600080fd5b505af115801561180e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611832919061269b565b61186c5760405162461bcd60e51b815260206004820152600b60248201526a135a5b9d0819985a5b195960aa1b6044820152606401610623565b505050565b600e5460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b1580156118b657600080fd5b505afa1580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ee91906126e7565b905090565b600b546001600160a01b0316331461191d5760405162461bcd60e51b815260040161062390612a2a565b601054600160a81b900460ff16156119475760405162461bcd60e51b815260040161062390612a02565b6001600160a01b03831661199d5760405162461bcd60e51b815260206004820181905260248201527f46726f6d20616464726573732063616e6e6f74206265203020616464726573736044820152606401610623565b6001600160a01b0382166119f35760405162461bcd60e51b815260206004820152601e60248201527f546f20616464726573732063616e6e6f742062652030206164647265737300006044820152606401610623565b600a5461186c906001600160a01b03168484846120be565b600354600c54600091611a2d9164010000000090910463ffffffff1690612ae6565b421015905090565b6007546001600160a01b03163314611a5f5760405162461bcd60e51b815260040161062390612a61565b6010805460ff60a81b1916600160a81b1790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b600b546001600160a01b03163314611ac75760405162461bcd60e51b815260040161062390612a2a565b601054600160a81b900460ff1615611af15760405162461bcd60e51b815260040161062390612a02565b6001600160a01b038116611b525760405162461bcd60e51b815260206004820152602260248201527f4275726e657220616464726573732063616e6e6f742062652030206164647265604482015261737360f01b6064820152608401610623565b821580611b5f5750826001145b611ba65760405162461bcd60e51b8152602060048201526018602482015277506f6f6c3a20746f6b656e206f7574206f662072616e676560401b6044820152606401610623565b60058360028110611bb957611bb9612bd9565b0154604051633f34d4cf60e21b8152600481018490526001600160a01b0383811660248301529091169063fcd3533c90604401602060405180830381600087803b158015611c0657600080fd5b505af1158015611c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3e919061269b565b61186c5760405162461bcd60e51b815260206004820152600b60248201526a109d5c9b8819985a5b195960aa1b6044820152606401610623565b6007546001600160a01b03163314611ca25760405162461bcd60e51b815260040161062390612a61565b601054600160a81b900460ff1615611ccc5760405162461bcd60e51b815260040161062390612a02565b6001600160a01b038116611d225760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e742063616e6e6f742062652030206164647265737300000000006044820152606401610623565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f11f35a22548bcd4c3788ab4a7e4fba427a2014f02e5d5e2da9af62212c03183f90600090a35050565b6007546001600160a01b03163314611d9e5760405162461bcd60e51b815260040161062390612a61565b601054600160a81b900460ff1615611dc85760405162461bcd60e51b815260040161062390612a02565b6001600160a01b038116611e2d5760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636520616464726573732063616e6e6f742062652030206160448201526564647265737360d01b6064820152608401610623565b601080546001600160a81b0319166001600160a01b0380841691909117600160a01b17918290556040519116907f35681f4f23137fb58510a9854f1b6e95f90a2cf0b66d2fce4df74cc0becc82d590600090a250565b600d8054611e9090612b88565b80601f0160208091040260200160405190810160405280929190818152602001828054611ebc90612b88565b8015611f095780601f10611ede57610100808354040283529160200191611f09565b820191906000526020600020905b815481529060010190602001808311611eec57829003601f168201915b505050505081565b6008546001600160a01b03163314611f635760405162461bcd60e51b815260206004820152601560248201527436b9b39739b2b73232b9103737ba1035b2b2b832b960591b6044820152606401610623565b601054600160a81b900460ff1615611f8d5760405162461bcd60e51b815260040161062390612a02565b611f95611a0b565b611fe15760405162461bcd60e51b815260206004820152601d60248201527f55706461746520696e74657276616c206861736e2774207061737365640000006044820152606401610623565b611feb82826120fc565b600b60009054906101000a90046001600160a01b03166001600160a01b0316631c536da46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561203b57600080fd5b505af115801561204f573d6000803e3d6000fd5b505042600c5550505050565b6040516001600160a01b03831660248201526044810182905261186c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122fb565b6040516001600160a01b03808516602483015283166044820152606481018290526120f69085906323b872dd60e01b90608401612087565b50505050565b601054600160a81b900460ff16156121265760405162461bcd60e51b815260040161062390612a02565b600082131580612137575060008113155b1561216d57604051819083907f27f70c863f1bd3e335bb4d6bf2a31075c861752f0b21a03b816a356035b1dec690600090a35050565b6001546002546040805160c0810182528581526020810185815281830184815260608301868152600480546001600160801b0319608091821b8116828801908152600354600160401b900490921b811660a088019081529751632920706d60e21b815287519381019390935294516024830152925160448201529051606482015290518216608482015292511660a4830152906000908190819073C793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd039063a481c1b49060c40160606040518083038186803b15801561223e57600080fd5b505af4158015612252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227691906128ad565b919450925090507f3a4a53e86baa9b577f931e849a3472fd6be844c0916377bc806be891847a5c2b6122a88784612b1d565b6122b28786612b1d565b6040805192835260208301919091520160405180910390a160028390556001829055600954600a546122f1916001600160a01b0391821691168361205b565b5050505050505050565b6000612350826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123cd9092919063ffffffff16565b80519091501561186c578080602001905181019061236e919061269b565b61186c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610623565b60606123dc84846000856123e6565b90505b9392505050565b6060824710156124475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610623565b843b6124955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610623565b600080866001600160a01b031685876040516124b1919061292d565b60006040518083038185875af1925050503d80600081146124ee576040519150601f19603f3d011682016040523d82523d6000602084013e6124f3565b606091505b509150915061250382828661250e565b979650505050505050565b6060831561251d5750816123df565b82511561252d5782518084602001fd5b8160405162461bcd60e51b815260040161062391906129ef565b82805461255390612b88565b90600052602060002090601f01602090048101928261257557600085556125bb565b82601f1061258e5782800160ff198235161785556125bb565b828001600101855582156125bb579182015b828111156125bb5782358255916020019190600101906125a0565b506125c79291506125e9565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156125c757600081556001016125ea565b80356001600160a01b038116811461261557600080fd5b919050565b60006020828403121561262c57600080fd5b6123df826125fe565b60008060006060848603121561264a57600080fd5b612653846125fe565b9250612661602085016125fe565b9150604084013590509250925092565b6000806040838503121561268457600080fd5b61268d836125fe565b946020939093013593505050565b6000602082840312156126ad57600080fd5b815180151581146123df57600080fd5b6000602082840312156126cf57600080fd5b81516001600160801b0319811681146123df57600080fd5b6000602082840312156126f957600080fd5b5051919050565b6000806040838503121561271357600080fd5b82519150602083015167ffffffffffffffff8082111561273257600080fd5b818501915085601f83011261274657600080fd5b81518181111561275857612758612bef565b604051601f8201601f19908116603f0116810190838211818310171561278057612780612bef565b8160405282815288602084870101111561279957600080fd5b6127aa836020830160208801612b5c565b80955050505050509250929050565b600080604083850312156127cc57600080fd5b50508035926020909101359150565b6000602082840312156127ed57600080fd5b813567ffffffffffffffff81111561280457600080fd5b82016101c081850312156123df57600080fd5b60006020828403121561282957600080fd5b813561ffff811681146123df57600080fd5b60006020828403121561284d57600080fd5b5035919050565b6000806040838503121561286757600080fd5b505080516020909101519092909150565b60008060006060848603121561288d57600080fd5b83359250602084013591506128a4604085016125fe565b90509250925092565b6000806000606084860312156128c257600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156128ed57600080fd5b813563ffffffff811681146123df57600080fd5b60008151808452612919816020860160208601612b5c565b601f01601f19169290920160200192915050565b6000825161293f818460208701612b5c565b9190910192915050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b60408101818360005b60028110156129ba5781516001600160a01b0316835260209283019290910190600101612992565b50505092915050565b8481526080602082015260006129dc6080830186612901565b6040830194909452506060015292915050565b6020815260006123df6020830184612901565b6020808252600e908201526d141bdbdb081a5cc81c185d5cd95960921b604082015260600190565b6020808252601c908201527f6d73672e73656e646572206e6f7420706f6f6c436f6d6d697474657200000000604082015260600190565b60208082526019908201527f6d73672e73656e646572206e6f7420676f7665726e616e636500000000000000604082015260600190565b6000808335601e19843603018112612aaf57600080fd5b83018035915067ffffffffffffffff821115612aca57600080fd5b602001915036819003821315612adf57600080fd5b9250929050565b60008219821115612af957612af9612bc3565b500190565b6000816000190483118215151615612b1857612b18612bc3565b500290565b60008083128015600160ff1b850184121615612b3b57612b3b612bc3565b6001600160ff1b0384018313811615612b5657612b56612bc3565b50500390565b60005b83811015612b77578181015183820152602001612b5f565b838111156120f65750506000910152565b600181811c90821680612b9c57607f821691505b60208210811415612bbd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206ca4d81db1ecc41390057f6e549ccb6245d40b949e556f91555ccabbb1538d6c64736f6c63430008070033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b3f006741161007c578063b3f00674146102d9578063d723c68b146102ec578063ddca3f43146102ff578063ed3f7e2614610308578063efdcd9741461032f578063f2fde38b1461034257600080fd5b8063715018a61461026f578063893d20e8146102775780638da5cb5b14610277578063ac4afa3814610288578063ae3302c2146102b157600080fd5b80634690092c1161010a5780634690092c146101c9578063568212f6146101f05780635ab78ee1146102035780635bae377a1461023657806367e047561461024957806369fe0e2d1461025c57600080fd5b80630679d36214610147578063178f9e351461015c57806335c62bc21461018c57806340339cbf146101a3578063430ed6eb146101b6575b600080fd5b61015a610155366004611210565b610355565b005b60035461016f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019560085481565b604051908152602001610183565b61016f6101b13660046111ab565b610408565b61015a6101c436600461116a565b610c07565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b61015a6101fe36600461116a565b610cac565b61022661021136600461116a565b60096020526000908152604090205460ff1681565b6040519015158152602001610183565b60025461016f906001600160a01b031681565b60045461016f906001600160a01b031681565b61015a61026a366004611234565b610d4a565b61015a610d79565b6000546001600160a01b031661016f565b61016f610296366004611234565b6007602052600090815260409020546001600160a01b031681565b6004546102c690600160a01b900461ffff1681565b60405161ffff9091168152602001610183565b60055461016f906001600160a01b031681565b60015461016f906001600160a01b031681565b61019560065481565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b61015a61033d36600461116a565b610daf565b61015a61035036600461116a565b610e21565b6000546001600160a01b031633146103885760405162461bcd60e51b815260040161037f906113e3565b60405180910390fd5b60008161ffff16116103e65760405162461bcd60e51b815260206004820152602160248201527f4d6178696d756d206c65766572616765206d757374206265206e6f6e2d7a65726044820152606f60f81b606482015260840161037f565b6004805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b600080546001600160a01b031633146104635760405162461bcd60e51b815260206004820152601960248201527f6d73672e73656e646572206e6f7420676f7665726e616e636500000000000000604482015260640161037f565b6003546001600160a01b0316806104b15760405162461bcd60e51b8152602060048201526012602482015271141bdbdb12d9595c195c881b9bdd081cd95d60721b604482015260640161037f565b6004546001600160a01b03166105095760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c436f6d6d69747465724465706c6f796572206e6f7420736574000000604482015260640161037f565b6004546000906001600160a01b0316639604198361052e610100870160e088016111e7565b610540610120880161010089016111e7565b6040516001600160e01b031960e085901b1681526001600160801b03928316600482015291166024820152604401602060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061118e565b905060016105d46080860160608701611210565b61ffff16101580156106065750600454600160a01b900461ffff166105ff6080860160608701611210565b61ffff1611155b61065e5760405162461bcd60e51b8152602060048201526024808201527f506f6f6c4b65657065723a206c657665726167656420616d6f756e7420696e76604482015263185b1a5960e21b606482015260840161037f565b601261067060a086016080870161116a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e09190611273565b60ff1611156107275760405162461bcd60e51b81526020600482015260136024820152720a8ded6cadc40c8cac6d2dac2d8e6407c40627606b1b604482015260640161037f565b60006107527f0000000000000000000000000000000000000000000000000000000000000000610ebc565b9050806001600160a01b0381167fd76cdb035f3aba359cb02087e4c5bd75f911562b407fc3a52ed2bedfb46585b661078a8880611593565b6040516107989291906113b4565b60405180910390a260006107be6107b56080890160608a01611210565b61ffff16610f54565b90506000816107cd8980611593565b6040516020016107df939291906112c2565b60408051601f1981840301815291905290506000826107fe8a80611593565b604051602001610810939291906112fa565b60408051601f198184030181529190529050600061083460a08b0160808c0161116a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190611273565b905060006108b48684858561107d565b905060006108c48786878661107d565b90506000604051806101c001604052806108e66000546001600160a01b031690565b6001600160a01b031681526020018c6001600160a01b031681526020018e60a0016020810190610916919061116a565b6001600160a01b031681526020018e60c0016020810190610937919061116a565b6001600160a01b03168152602001836001600160a01b03168152602001846001600160a01b031681526020018b6001600160a01b03168152602001888f80600001906109839190611593565b60405160200161099593929190611332565b60405160208183030381529060405281526020018e60200160208101906109bc919061124d565b63ffffffff1681526020018e60400160208101906109da919061124d565b63ffffffff16815260200160065481526020018e6060016020810190610a009190611210565b61ffff168152602001600560009054906101000a90046001600160a01b03166001600160a01b031681526020018e6080016020810190610a40919061116a565b6001600160a01b03168152509050886001600160a01b031663554bb621826040518263ffffffff1660e01b8152600401610a7a9190611448565b600060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b50505050896001600160a01b031663fd555fb98e6080016020810190610ace919061116a565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908b166024820152604401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b5050600354604051633c5c7fb360e01b81526001600160a01b038c811660048301529091169250633c5c7fb39150602401600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b505060088054600090815260076020526040812080546001600160a01b0319166001600160a01b038e1617905581546001945091925090610bcc9084906115e1565b9091555050506001600160a01b0387166000908152600960205260409020805460ff191660011790555094985050505050505050505b919050565b6000546001600160a01b03163314610c315760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610c575760405162461bcd60e51b815260040161037f90611418565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ff33ed59034aadf61086c54204694b493ee22a3d903bddbe94c276f7bb442f4e3906020015b60405180910390a150565b6000546001600160a01b03163314610cd65760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610cfc5760405162461bcd60e51b815260040161037f90611418565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f71ef8cdf92396d830b1bb3e195158a279020af78e559c0997223f1bc4c735e0d90602001610ca1565b6000546001600160a01b03163314610d745760405162461bcd60e51b815260040161037f906113e3565b600655565b6000546001600160a01b03163314610da35760405162461bcd60e51b815260040161037f906113e3565b610dad600061111a565b565b6000546001600160a01b03163314610dd95760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610dff5760405162461bcd60e51b815260040161037f90611418565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e4b5760405162461bcd60e51b815260040161037f906113e3565b6001600160a01b038116610eb05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161037f565b610eb98161111a565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610c025760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161037f565b606081610f785750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610fa25780610f8c816116a6565b9150610f9b9050600a8361161e565b9150610f7c565b60008167ffffffffffffffff811115610fbd57610fbd6116ed565b6040519080825280601f01601f191660200182016040528015610fe7576020820181803683370190505b509050815b851561107457610ffd60018261165f565b9050600061100c600a8861161e565b61101790600a611640565b611021908861165f565b61102c9060306115f9565b905060008160f81b905080848481518110611049576110496116d7565b60200101906001600160f81b031916908160001a90535061106b600a8961161e565b97505050610fec565b50949350505050565b6000806110a97f0000000000000000000000000000000000000000000000000000000000000000610ebc565b604051637b69774360e11b81529091506001600160a01b0382169063f6d2ee86906110de908990899089908990600401611369565b600060405180830381600087803b1580156110f857600080fd5b505af115801561110c573d6000803e3d6000fd5b509298975050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561117c57600080fd5b813561118781611703565b9392505050565b6000602082840312156111a057600080fd5b815161118781611703565b6000602082840312156111bd57600080fd5b813567ffffffffffffffff8111156111d457600080fd5b8201610120818503121561118757600080fd5b6000602082840312156111f957600080fd5b81356001600160801b038116811461118757600080fd5b60006020828403121561122257600080fd5b813561ffff8116811461118757600080fd5b60006020828403121561124657600080fd5b5035919050565b60006020828403121561125f57600080fd5b813563ffffffff8116811461118757600080fd5b60006020828403121561128557600080fd5b815160ff8116811461118757600080fd5b600081518084526112ae816020860160208601611676565b601f01601f19169290920160200192915050565b600084516112d4818460208901611676565b614c2d60f01b908301908152838560028301376000930160020192835250909392505050565b6000845161130c818460208901611676565b61532d60f01b908301908152838560028301376000930160020192835250909392505050565b60008451611344818460208901611676565b602d60f81b908301908152838560018301376000930160010192835250909392505050565b6001600160a01b038516815260806020820181905260009061138d90830186611296565b828103604084015261139f8186611296565b91505060ff8316606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601690820152751859191c995cdcc818d85b9b9bdd081899481b9d5b1b60521b604082015260600190565b602081526114626020820183516001600160a01b03169052565b6000602083015161147e60408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e08301516101c061010081818601526115066101e0860184611296565b908601519092506101206115218682018363ffffffff169052565b860151905061014061153a8682018363ffffffff169052565b86015161016086810191909152860151905061018061155e8187018361ffff169052565b86015190506101a061157a868201836001600160a01b03169052565b909501516001600160a01b031693019290925250919050565b6000808335601e198436030181126115aa57600080fd5b83018035915067ffffffffffffffff8211156115c557600080fd5b6020019150368190038213156115da57600080fd5b9250929050565b600082198211156115f4576115f46116c1565b500190565b600060ff821660ff84168060ff03821115611616576116166116c1565b019392505050565b60008261163b57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561165a5761165a6116c1565b500290565b600082821015611671576116716116c1565b500390565b60005b83811015611691578181015183820152602001611679565b838111156116a0576000848401525b50505050565b60006000198214156116ba576116ba6116c1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610eb957600080fdfea2646970667358221220c5755c5c2faebb529a4680dc7d6a07b335286c615a89eead2c0f0c17465db74c64736f6c63430008070033",
    "libraries": {
        "PoolSwapLibrary": "0xC793b1Bc41A5Ae49571d01e7A99731Ea3cb1Dd03"
    },
    "devdoc": {
        "kind": "dev",
        "methods": {
            "deployPool((string,uint32,uint32,uint16,address,address,address,uint128,uint128))": {
                "params": {
                    "deploymentParameters": "Deployment parameters of the market. Some may be reconfigurable"
                },
                "returns": {
                    "_0": "Address of the created pool"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "setFee(uint256)": {
                "params": {
                    "_fee": "The fee amount as a percentage multiplied by 10^18"
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "title": "The pool factory contract",
        "version": 1
    },
    "userdoc": {
        "events": {
            "DeployPool(address,string)": {
                "notice": "Creates a notification when a pool is deployed"
            },
            "PoolCommitterDeployerChanged(address)": {
                "notice": "Creates a notification when the pool committer deployer for the factory changes"
            },
            "PoolKeeperChanged(address)": {
                "notice": "Creates a notification when the pool keeper changes"
            }
        },
        "kind": "user",
        "methods": {
            "deployPool((string,uint32,uint32,uint16,address,address,address,uint128,uint128))": {
                "notice": "Deploy a leveraged pool with given parameters"
            },
            "isValidPool(address)": {
                "notice": "Format: Pool address => validity"
            },
            "pools(uint256)": {
                "notice": "Format: Pool counter => pool address"
            },
            "setFee(uint256)": {
                "notice": "Set the fee amount. This is a percentage multiplied by 10^18.         e.g. 5% is 0.05 * 10^18"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 110,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 9224,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "pairTokenBase",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(PoolToken)11157"
            },
            {
                "astId": 9229,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "poolBase",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(LeveragedPool)7963"
            },
            {
                "astId": 9234,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "poolKeeper",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(IPoolKeeper)11754"
            },
            {
                "astId": 9237,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "poolCommitterDeployer",
                "offset": 0,
                "slot": "4",
                "type": "t_contract(IPoolCommitterDeployer)11574"
            },
            {
                "astId": 9240,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "maxLeverage",
                "offset": 20,
                "slot": "4",
                "type": "t_uint16"
            },
            {
                "astId": 9242,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "feeReceiver",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 9244,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "fee",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
            },
            {
                "astId": 9253,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "pools",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 9256,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "numPools",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
            },
            {
                "astId": 9262,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "isValidPool",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_bool)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_contract(IPoolCommitterDeployer)11574": {
                "encoding": "inplace",
                "label": "contract IPoolCommitterDeployer",
                "numberOfBytes": "20"
            },
            "t_contract(IPoolKeeper)11754": {
                "encoding": "inplace",
                "label": "contract IPoolKeeper",
                "numberOfBytes": "20"
            },
            "t_contract(LeveragedPool)7963": {
                "encoding": "inplace",
                "label": "contract LeveragedPool",
                "numberOfBytes": "20"
            },
            "t_contract(PoolToken)11157": {
                "encoding": "inplace",
                "label": "contract PoolToken",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
