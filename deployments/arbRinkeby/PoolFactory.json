{
    "address": "0x3c08BE365e91272db6CaD4F204B1C7ccBd7640DA",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_feeReceiver",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pool",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "poolCommitter",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "string",
                    "name": "ticker",
                    "type": "string"
                }
            ],
            "name": "DeployPool",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_poolKeeper",
                    "type": "address"
                }
            ],
            "name": "PoolKeeperChanged",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "autoClaim",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "burningFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "string",
                            "name": "poolName",
                            "type": "string"
                        },
                        {
                            "internalType": "uint32",
                            "name": "frontRunningInterval",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint32",
                            "name": "updateInterval",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint16",
                            "name": "leverageAmount",
                            "type": "uint16"
                        },
                        {
                            "internalType": "address",
                            "name": "quoteToken",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleWrapper",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "settlementEthOracle",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "invariantCheckContract",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct IPoolFactory.PoolDeployment",
                    "name": "deploymentParameters",
                    "type": "tuple"
                }
            ],
            "name": "deployPool",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "feeReceiver",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "isValidPool",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "isValidPoolCommitter",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "maxLeverage",
            "outputs": [
                {
                    "internalType": "uint16",
                    "name": "",
                    "type": "uint16"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "mintingFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "numPools",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pairTokenBase",
            "outputs": [
                {
                    "internalType": "contract PoolToken",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pairTokenBaseAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolBase",
            "outputs": [
                {
                    "internalType": "contract LeveragedPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolBaseAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolCommitterBase",
            "outputs": [
                {
                    "internalType": "contract PoolCommitter",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolCommitterBaseAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolKeeper",
            "outputs": [
                {
                    "internalType": "contract IPoolKeeper",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "pools",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "secondaryFeeSplitPercent",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_autoClaim",
                    "type": "address"
                }
            ],
            "name": "setAutoClaim",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_fee",
                    "type": "uint256"
                }
            ],
            "name": "setFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_feeReceiver",
                    "type": "address"
                }
            ],
            "name": "setFeeReceiver",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint16",
                    "name": "newMaxLeverage",
                    "type": "uint16"
                }
            ],
            "name": "setMaxLeverage",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_mintingFee",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_burningFee",
                    "type": "uint256"
                }
            ],
            "name": "setMintAndBurnFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_poolKeeper",
                    "type": "address"
                }
            ],
            "name": "setPoolKeeper",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "newFeePercent",
                    "type": "uint256"
                }
            ],
            "name": "setSecondaryFeeSplitPercent",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xaf78eb0b629f15cfc28b4f2abd4e5f52b0ba7b92d2f42ddfb303f7333de42cdd",
    "receipt": {
        "to": null,
        "from": "0xfb59B91646cd0890F3E5343384FEb746989B66C7",
        "contractAddress": "0x3c08BE365e91272db6CaD4F204B1C7ccBd7640DA",
        "transactionIndex": 0,
        "gasUsed": "137585440",
        "logsBloom": "0x
        "blockHash": "0x8c3aace6b2e7073693b6ffcf88eacaea06311e4c7d2d1985a5e93866291d4be1",
        "transactionHash": "0xaf78eb0b629f15cfc28b4f2abd4e5f52b0ba7b92d2f42ddfb303f7333de42cdd",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 7327051,
                "transactionHash": "0xaf78eb0b629f15cfc28b4f2abd4e5f52b0ba7b92d2f42ddfb303f7333de42cdd",
                "address": "0x3c08BE365e91272db6CaD4F204B1C7ccBd7640DA",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x000000000000000000000000fb59b91646cd0890f3e5343384feb746989b66c7"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0x8c3aace6b2e7073693b6ffcf88eacaea06311e4c7d2d1985a5e93866291d4be1"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 7327051,
                "transactionHash": "0xaf78eb0b629f15cfc28b4f2abd4e5f52b0ba7b92d2f42ddfb303f7333de42cdd",
                "address": "0x71190FB71c1e9c5793BC030A29232062A116be42",
                "topics": [
                    "0xbc8bd61e5dd69ff5cb8c389529c029503515ba368eaafbdaa406e072fdd36072",
                    "0x0000000000000000000000003c08be365e91272db6cad4f204b1c7ccbd7640da",
                    "0x0000000000000000000000003c08be365e91272db6cad4f204b1c7ccbd7640da"
                ],
                "data": "0x0000000000000000000000003c08be365e91272db6cad4f204b1c7ccbd7640da00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000009424153455f504f4f4c0000000000000000000000000000000000000000000000",
                "logIndex": 1,
                "blockHash": "0x8c3aace6b2e7073693b6ffcf88eacaea06311e4c7d2d1985a5e93866291d4be1"
            }
        ],
        "blockNumber": 7327051,
        "cumulativeGasUsed": "54975876",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x0f79e82aE88E1318B8cfC8b4A205fE2F982B928A"],
    "solcInputHash": "2618b71259c48e264b944568d24817df",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolCommitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"DeployPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolKeeper\",\"type\":\"address\"}],\"name\":\"PoolKeeperChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"autoClaim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"frontRunningInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"leverageAmount\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementEthOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invariantCheckContract\",\"type\":\"address\"}],\"internalType\":\"struct IPoolFactory.PoolDeployment\",\"name\":\"deploymentParameters\",\"type\":\"tuple\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidPoolCommitter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenBase\",\"outputs\":[{\"internalType\":\"contract PoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenBaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBase\",\"outputs\":[{\"internalType\":\"contract LeveragedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCommitterBase\",\"outputs\":[{\"internalType\":\"contract PoolCommitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCommitterBaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolKeeper\",\"outputs\":[{\"internalType\":\"contract IPoolKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryFeeSplitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoClaim\",\"type\":\"address\"}],\"name\":\"setAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMaxLeverage\",\"type\":\"uint16\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burningFee\",\"type\":\"uint256\"}],\"name\":\"setMintAndBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolKeeper\",\"type\":\"address\"}],\"name\":\"setPoolKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"setSecondaryFeeSplitPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployPool((string,uint32,uint32,uint16,address,address,address,address))\":{\"details\":\"Throws if pool keeper is nullThrows if deployer does not own the oracle wrapperThrows if leverage amount is invalidThrows if decimal precision is too high (i.e., greater than `MAX_DECIMALS`)\",\"params\":{\"deploymentParameters\":\"Deployment parameters of the market. Some may be reconfigurable.\"},\"returns\":{\"_0\":\"Address of the created pool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAutoClaim(address)\":{\"details\":\"Throws if provided address is nullOnly callable by the owner\",\"params\":{\"_autoClaim\":\"Address of the `AutoClaim`\"}},\"setFee(uint256)\":{\"details\":\"This is a percentage in WAD; multiplied by 10^18 e.g. 5% is 0.05 * 10^18Throws if fee is greater than 10%\",\"params\":{\"_fee\":\"The fee amount as a percentage\"}},\"setFeeReceiver(address)\":{\"details\":\"Only callable by the owner of this contractThis fuction does not change anything for already deployed pools, only pools deployed after the change\",\"params\":{\"_feeReceiver\":\"address of fee receiver\"}},\"setMaxLeverage(uint16)\":{\"details\":\"Throws if provided maximum leverage is non-positiveOnly callable by the owner\",\"params\":{\"newMaxLeverage\":\"Maximum leverage permitted for all pools\"}},\"setMintAndBurnFee(uint256,uint256)\":{\"details\":\"This is a percentage in WAD; multiplied by 10^18 e.g. 5% is 0.05 * 10^18Only callable by the owner of this contractThrows if minting fee is greater than 10%Throws if burning fee is greater than 10%\",\"params\":{\"_burningFee\":\"The fee amount for burns\",\"_mintingFee\":\"The fee amount for mints\"}},\"setPoolKeeper(address)\":{\"details\":\"Throws if provided address is nullOnly callable by the owner\",\"params\":{\"_poolKeeper\":\"Address of the `PoolKeeper`\"}},\"setSecondaryFeeSplitPercent(uint256)\":{\"details\":\"Only callable by the owner of this contractThrows if `newFeePercent` exceeds 100\",\"params\":{\"newFeePercent\":\"Proportion of fees to split\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"The pool factory contract\",\"version\":1},\"userdoc\":{\"events\":{\"DeployPool(address,address,string)\":{\"notice\":\"Creates a notification when a pool is deployed\"},\"PoolKeeperChanged(address)\":{\"notice\":\"Creates a notification when the pool keeper changes\"}},\"kind\":\"user\",\"methods\":{\"deployPool((string,uint32,uint32,uint16,address,address,address,address))\":{\"notice\":\"Deploy a leveraged pool and its committer/pool tokens with given parameters\"},\"isValidPool(address)\":{\"notice\":\"Format: Pool address => validity\"},\"isValidPoolCommitter(address)\":{\"notice\":\"Format: PoolCommitter address => validity\"},\"pools(uint256)\":{\"notice\":\"Format: Pool counter => pool address\"},\"setAutoClaim(address)\":{\"notice\":\"Sets the address of the associated `AutoClaim` contract\"},\"setFee(uint256)\":{\"notice\":\"Set the yearly fee amount. The max yearly fee is 10%\"},\"setFeeReceiver(address)\":{\"notice\":\"Sets the primary fee receiver of deployed Leveraged pools.\"},\"setMaxLeverage(uint16)\":{\"notice\":\"Sets the maximum leverage\"},\"setMintAndBurnFee(uint256,uint256)\":{\"notice\":\"Set the minting and burning fee amount. The max yearly fee is 10%\"},\"setPoolKeeper(address)\":{\"notice\":\"Sets the address of the associated `PoolKeeper` contract\"},\"setSecondaryFeeSplitPercent(uint256)\":{\"notice\":\"Sets the proportion of fees to be split to the nominated secondary fees recipient\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"abdk-libraries-solidity/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n  /*\\n   * 0.\\n   */\\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n  /*\\n   * -0.\\n   */\\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n  /*\\n   * +Infinity.\\n   */\\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n  /*\\n   * -Infinity.\\n   */\\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n  /*\\n   * Canonical NaN value.\\n   */\\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n  /**\\n   * Convert signed 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromInt (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 256-bit integer number\\n   * rounding towards zero.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 256-bit integer number\\n   */\\n  function toInt (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16638); // Overflow\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        uint256 result = x;\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into unsigned 256-bit integer number\\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n   * without error, because they are rounded to zero.\\n   *\\n   * @param x quadruple precision number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function toUInt (bytes16 x) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\\n\\n      require (exponent <= 16638); // Overflow\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 128.128 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from128x128 (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 128.128 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 128.128 bit fixed point number\\n   */\\n  function to128x128 (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16510); // Overflow\\n      if (exponent < 16255) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16367) result >>= 16367 - exponent;\\n      else if (exponent > 16367) result <<= exponent - 16367;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 64.64 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from64x64 (int128 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint128 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 64.64 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 64.64 bit fixed point number\\n   */\\n  function to64x64 (bytes16 x) internal pure returns (int128) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16446); // Overflow\\n      if (exponent < 16319) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16431) result >>= 16431 - exponent;\\n      else if (exponent > 16431) result <<= exponent - 16431;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x80000000000000000000000000000000);\\n        return -int128 (int256 (result)); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (int256 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert octuple precision number into quadruple precision number.\\n   *\\n   * @param x octuple precision number\\n   * @return quadruple precision number\\n   */\\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n      uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\\n      uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFFF) {\\n        if (significand > 0) return NaN;\\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      }\\n\\n      if (exponent > 278526)\\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      else if (exponent < 245649)\\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n      else if (exponent < 245761) {\\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 124;\\n        exponent -= 245760;\\n      }\\n\\n      uint128 result = uint128 (significand | exponent << 112);\\n      if (negative) result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into octuple precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return octuple precision number\\n   */\\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 245649 + msb;\\n        }\\n      } else {\\n        result <<= 124;\\n        exponent += 245760;\\n      }\\n\\n      result |= exponent << 236;\\n      if (uint128 (x) >= 0x80000000000000000000000000000000)\\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n      return bytes32 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert double precision number into quadruple precision number.\\n   *\\n   * @param x double precision number\\n   * @return quadruple precision number\\n   */\\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 exponent = uint64 (x) >> 52 & 0x7FF;\\n\\n      uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 15309 + msb;\\n        }\\n      } else {\\n        result <<= 60;\\n        exponent += 15360;\\n      }\\n\\n      result |= exponent << 112;\\n      if (x & 0x8000000000000000 > 0)\\n        result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (uint128 (result));\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into double precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return double precision number\\n   */\\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\\n    unchecked {\\n      bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\\n\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) {\\n        if (significand > 0) return 0x7FF8000000000000; // NaN\\n        else return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      }\\n\\n      if (exponent > 17406)\\n        return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      else if (exponent < 15309)\\n        return negative ?\\n            bytes8 (0x8000000000000000) : // -0\\n            bytes8 (0x0000000000000000); // 0\\n      else if (exponent < 15361) {\\n        significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 60;\\n        exponent -= 15360;\\n      }\\n\\n      uint64 result = uint64 (significand | exponent << 52);\\n      if (negative) result |= 0x8000000000000000;\\n\\n      return bytes8 (result);\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is NaN, false otherwise\\n   */\\n  function isNaN (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is positive or negative\\n   * infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is positive or negative infinity, false otherwise\\n   */\\n  function isInfinity (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \\n   *\\n   * @param x quadruple precision number\\n   * @return sign of x\\n   */\\n  function sign (bytes16 x) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      if (absoluteX == 0) return 0;\\n      else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\\n      else return 1;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n   * arguments are infinities of the same sign. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return sign (x - y)\\n   */\\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      // Not infinities of the same sign\\n      require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n      if (x == y) return 0;\\n      else {\\n        bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\\n        bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\\n\\n        if (negativeX) {\\n          if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\\n          else return -1; \\n        } else {\\n          if (negativeY) return 1;\\n          else return absoluteX > absoluteY ? int8 (1) : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n   * anything. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return true if x equals to y, false otherwise\\n   */\\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\\n    unchecked {\\n      if (x == y) {\\n        return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n          0x7FFF0000000000000000000000000000;\\n      } else return false;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Special values behave in the following way:\\n   *\\n   * NaN + x = NaN for any x.\\n   * Infinity + x = Infinity for any finite x.\\n   * -Infinity + x = -Infinity for any finite x.\\n   * Infinity + Infinity = Infinity.\\n   * -Infinity + -Infinity = -Infinity.\\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) { \\n          if (x == y) return x;\\n          else return NaN;\\n        } else return x; \\n      } else if (yExponent == 0x7FFF) return y;\\n      else {\\n        bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n        else {\\n          int256 delta = int256 (xExponent) - int256 (yExponent);\\n  \\n          if (xSign == ySign) {\\n            if (delta > 112) return x;\\n            else if (delta > 0) ySignifier >>= uint256 (delta);\\n            else if (delta < -112) return y;\\n            else if (delta < 0) {\\n              xSignifier >>= uint256 (-delta);\\n              xExponent = yExponent;\\n            }\\n  \\n            xSignifier += ySignifier;\\n  \\n            if (xSignifier >= 0x20000000000000000000000000000) {\\n              xSignifier >>= 1;\\n              xExponent += 1;\\n            }\\n  \\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else {\\n              if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n              else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  \\n              return bytes16 (uint128 (\\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                  (xExponent << 112) |\\n                  xSignifier)); \\n            }\\n          } else {\\n            if (delta > 0) {\\n              xSignifier <<= 1;\\n              xExponent -= 1;\\n            } else if (delta < 0) {\\n              ySignifier <<= 1;\\n              xExponent = yExponent - 1;\\n            }\\n\\n            if (delta > 112) ySignifier = 1;\\n            else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\\n            else if (delta < -112) xSignifier = 1;\\n            else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\\n\\n            if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n            else {\\n              xSignifier = ySignifier - xSignifier;\\n              xSign = ySign;\\n            }\\n\\n            if (xSignifier == 0)\\n              return POSITIVE_ZERO;\\n\\n            uint256 msb = mostSignificantBit (xSignifier);\\n\\n            if (msb == 113) {\\n              xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n              xExponent += 1;\\n            } else if (msb < 112) {\\n              uint256 shift = 112 - msb;\\n              if (xExponent > shift) {\\n                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                xExponent -= shift;\\n              } else {\\n                xSignifier <<= xExponent - 1;\\n                xExponent = 0;\\n              }\\n            } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else return bytes16 (uint128 (\\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                (xExponent << 112) |\\n                xSignifier));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Special values behave in the following way:\\n   *\\n   * NaN - x = NaN for any x.\\n   * Infinity - x = Infinity for any finite x.\\n   * -Infinity - x = -Infinity for any finite x.\\n   * Infinity - -Infinity = Infinity.\\n   * -Infinity - Infinity = -Infinity.\\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      return add (x, y ^ 0x80000000000000000000000000000000);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y.  Special values behave in the following way:\\n   *\\n   * NaN * x = NaN for any x.\\n   * Infinity * x = Infinity for any finite positive x.\\n   * Infinity * x = -Infinity for any finite negative x.\\n   * -Infinity * x = -Infinity for any finite positive x.\\n   * -Infinity * x = Infinity for any finite negative x.\\n   * Infinity * 0 = NaN.\\n   * -Infinity * 0 = NaN.\\n   * Infinity * Infinity = Infinity.\\n   * Infinity * -Infinity = -Infinity.\\n   * -Infinity * Infinity = -Infinity.\\n   * -Infinity * -Infinity = Infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) {\\n          if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n          else return NaN;\\n        } else {\\n          if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return x ^ y & 0x80000000000000000000000000000000;\\n        }\\n      } else if (yExponent == 0x7FFF) {\\n          if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return y ^ x & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        xSignifier *= ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        xExponent += yExponent;\\n\\n        uint256 msb =\\n          xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\\n          xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\\n          mostSignificantBit (xSignifier);\\n\\n        if (xExponent + msb < 16496) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb < 16608) { // Subnormal\\n          if (xExponent < 16496)\\n            xSignifier >>= 16496 - xExponent;\\n          else if (xExponent > 16496)\\n            xSignifier <<= xExponent - 16496;\\n          xExponent = 0;\\n        } else if (xExponent + msb > 49373) {\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else {\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n          else if (msb < 112)\\n            xSignifier <<= 112 - msb;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb - 16607;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y.  Special values behave in the following way:\\n   *\\n   * NaN / x = NaN for any x.\\n   * x / NaN = NaN for any x.\\n   * Infinity / x = Infinity for any finite non-negative x.\\n   * Infinity / x = -Infinity for any finite negative x including -0.\\n   * -Infinity / x = -Infinity for any finite non-negative x.\\n   * -Infinity / x = Infinity for any finite negative x including -0.\\n   * x / Infinity = 0 for any finite non-negative x.\\n   * x / -Infinity = -0 for any finite non-negative x.\\n   * x / Infinity = -0 for any finite non-negative x including -0.\\n   * x / -Infinity = 0 for any finite non-negative x including -0.\\n   * \\n   * Infinity / Infinity = NaN.\\n   * Infinity / -Infinity = -NaN.\\n   * -Infinity / Infinity = -NaN.\\n   * -Infinity / -Infinity = NaN.\\n   *\\n   * Division by zero behaves in the following way:\\n   *\\n   * x / 0 = Infinity for any finite positive x.\\n   * x / -0 = -Infinity for any finite positive x.\\n   * x / 0 = -Infinity for any finite negative x.\\n   * x / -0 = Infinity for any finite negative x.\\n   * 0 / 0 = NaN.\\n   * 0 / -0 = NaN.\\n   * -0 / 0 = NaN.\\n   * -0 / -0 = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) return NaN;\\n        else return x ^ y & 0x80000000000000000000000000000000;\\n      } else if (yExponent == 0x7FFF) {\\n        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) {\\n          if (xSignifier != 0) {\\n            uint shift = 226 - mostSignificantBit (xSignifier);\\n\\n            xSignifier <<= shift;\\n\\n            xExponent = 1;\\n            yExponent += shift - 114;\\n          }\\n        }\\n        else {\\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n        }\\n\\n        xSignifier = xSignifier / ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        assert (xSignifier >= 0x1000000000000000000000000000);\\n\\n        uint256 msb =\\n          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\\n          xSignifier >= 0x40000000000000000000000000000 ? 114 :\\n          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n        if (xExponent + msb > yExponent + 16497) { // Overflow\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16380  < yExponent) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\\n          if (xExponent + 16380 > yExponent)\\n            xSignifier <<= xExponent + 16380 - yExponent;\\n          else if (xExponent + 16380 < yExponent)\\n            xSignifier >>= yExponent - xExponent - 16380;\\n\\n          xExponent = 0;\\n        } else { // Normal\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb + 16269 - yExponent;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function neg (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x ^ 0x80000000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function abs (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n  }\\n\\n  /**\\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n          bool oddExponent = xExponent & 0x1 == 0;\\n          xExponent = xExponent + 16383 >> 1;\\n\\n          if (oddExponent) {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 113;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (226 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          } else {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 112;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (225 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          }\\n\\n          uint256 r = 0x10000000000000000000000000000;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n          uint256 r1 = xSignifier / r;\\n          if (r1 < r) r = r1;\\n\\n          return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n          bool resultNegative;\\n          uint256 resultExponent = 16495;\\n          uint256 resultSignifier;\\n\\n          if (xExponent >= 0x3FFF) {\\n            resultNegative = false;\\n            resultSignifier = xExponent - 0x3FFF;\\n            xSignifier <<= 15;\\n          } else {\\n            resultNegative = true;\\n            if (xSignifier >= 0x10000000000000000000000000000) {\\n              resultSignifier = 0x3FFE - xExponent;\\n              xSignifier <<= 15;\\n            } else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              resultSignifier = 16493 - msb;\\n              xSignifier <<= 127 - msb;\\n            }\\n          }\\n\\n          if (xSignifier == 0x80000000000000000000000000000000) {\\n            if (resultNegative) resultSignifier += 1;\\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\\n            resultSignifier <<= shift;\\n            resultExponent -= shift;\\n          } else {\\n            uint256 bb = resultNegative ? 1 : 0;\\n            while (resultSignifier < 0x10000000000000000000000000000) {\\n              resultSignifier <<= 1;\\n              resultExponent -= 1;\\n  \\n              xSignifier *= xSignifier;\\n              uint256 b = xSignifier >> 255;\\n              resultSignifier += b ^ bb;\\n              xSignifier >>= 127 + b;\\n            }\\n          }\\n\\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\\n              resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function ln (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n    }\\n  }\\n\\n  /**\\n   * Calculate 2^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n      else if (xExponent > 16397)\\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n      else if (xExponent < 16255)\\n        return 0x3FFF0000000000000000000000000000;\\n      else {\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        if (xExponent > 16367)\\n          xSignifier <<= xExponent - 16367;\\n        else if (xExponent < 16367)\\n          xSignifier >>= 16367 - xExponent;\\n\\n        if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\\n          return POSITIVE_ZERO;\\n\\n        if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n          return POSITIVE_INFINITY;\\n\\n        uint256 resultExponent = xSignifier >> 128;\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xNegative && xSignifier != 0) {\\n          xSignifier = ~xSignifier;\\n          resultExponent += 1;\\n        }\\n\\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\\n        if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n        if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n        if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n        if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n        if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n        if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n        if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n        if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n        if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n        if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n        if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n        if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n        if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n        if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n        if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n        if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n        if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n        if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n        if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n        if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n        if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n        if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n        if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n        if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n        if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n        if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n        if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n        if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n        if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n        if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n        if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n        if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n        if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n        if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n        if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n        if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n        if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n        if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n        if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n        if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n        if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n        if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n        if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n        if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n        if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n        if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n        if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n        if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n        if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n        if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n        if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n        if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n        if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n        if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n        if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n        if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n        if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n        if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n        if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n        if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n        if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n        if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n        if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n\\n        if (!xNegative) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent += 0x3FFF;\\n        } else if (resultExponent <= 0x3FFE) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent = 0x3FFF - resultExponent;\\n        } else {\\n          resultSignifier = resultSignifier >> resultExponent - 16367;\\n          resultExponent = 0;\\n        }\\n\\n        return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate e^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function exp (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n    }\\n  }\\n\\n  /**\\n   * Get index of the most significant non-zero bit in binary representation of\\n   * x.  Reverts if x is zero.\\n   *\\n   * @return index of the most significant non-zero bit in binary representation\\n   *         of x\\n   */\\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\\n    unchecked {\\n      require (x > 0);\\n\\n      uint256 result = 0;\\n\\n      if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\\n      if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\\n      if (x >= 0x100000000) { x >>= 32; result += 32; }\\n      if (x >= 0x10000) { x >>= 16; result += 16; }\\n      if (x >= 0x100) { x >>= 8; result += 8; }\\n      if (x >= 0x10) { x >>= 4; result += 4; }\\n      if (x >= 0x4) { x >>= 2; result += 2; }\\n      if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n      return result;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9694a9f6fcadd4fa917efa674de42a74b8fbab8d68924f771ea5cc5e1a301434\",\"license\":\"BSD-4-Clause\"},\"contracts/implementation/LeveragedPool.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/IPoolToken.sol\\\";\\nimport \\\"../interfaces/IPausable.sol\\\";\\nimport \\\"../interfaces/IInvariantCheck.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./PoolSwapLibrary.sol\\\";\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\n\\n/// @title The pool contract itself\\ncontract LeveragedPool is ILeveragedPool, Initializable, IPausable {\\n    using SafeERC20 for IERC20;\\n    // #### Globals\\n\\n    // Each balance is the amount of quote tokens in the pair\\n    uint256 public override shortBalance;\\n    uint256 public override longBalance;\\n    uint32 public override frontRunningInterval;\\n    uint32 public override updateInterval;\\n    bytes16 public fee;\\n    bytes16 public override leverageAmount;\\n    uint256 public constant LONG_INDEX = 0;\\n    uint256 public constant SHORT_INDEX = 1;\\n\\n    address public governance;\\n    bool public override paused;\\n    address public keeper;\\n    bool public governanceTransferInProgress;\\n    address public feeAddress;\\n    address public secondaryFeeAddress;\\n    uint256 public secondaryFeeSplitPercent; // Split to secondary fee address as a percentage.\\n    address public override quoteToken;\\n    address public override poolCommitter;\\n    address public override oracleWrapper;\\n    address public override settlementEthOracle;\\n    address public provisionalGovernance;\\n    address public invariantCheckContract;\\n    IInvariantCheck public invariantCheck;\\n    address[2] public tokens;\\n    uint256 public override lastPriceTimestamp; // The last time the pool was upkept\\n\\n    string public override poolName;\\n\\n    // #### Functions\\n\\n    function initialize(ILeveragedPool.Initialization calldata initialization) external override initializer {\\n        require(initialization._feeAddress != address(0), \\\"Fee address cannot be 0 address\\\");\\n        require(initialization._quoteToken != address(0), \\\"Quote token cannot be 0 address\\\");\\n        require(initialization._oracleWrapper != address(0), \\\"Oracle wrapper cannot be 0 address\\\");\\n        require(initialization._settlementEthOracle != address(0), \\\"Keeper oracle cannot be 0 address\\\");\\n        require(initialization._owner != address(0), \\\"Owner cannot be 0 address\\\");\\n        require(initialization._keeper != address(0), \\\"Keeper cannot be 0 address\\\");\\n        require(initialization._longToken != address(0), \\\"Long token cannot be 0 address\\\");\\n        require(initialization._shortToken != address(0), \\\"Short token cannot be 0 address\\\");\\n        require(initialization._poolCommitter != address(0), \\\"PoolCommitter cannot be 0 address\\\");\\n        require(initialization._invariantCheckContract != address(0), \\\"InvariantCheck cannot be 0 address\\\");\\n        require(initialization._fee < PoolSwapLibrary.WAD_PRECISION, \\\"Fee >= 100%\\\");\\n        require(initialization._secondaryFeeSplitPercent <= 100, \\\"Secondary fee split cannot exceed 100%\\\");\\n\\n        // set the owner of the pool. This is governance when deployed from the factory\\n        governance = initialization._owner;\\n\\n        // Setup variables\\n        keeper = initialization._keeper;\\n        oracleWrapper = initialization._oracleWrapper;\\n        settlementEthOracle = initialization._settlementEthOracle;\\n        quoteToken = initialization._quoteToken;\\n        frontRunningInterval = initialization._frontRunningInterval;\\n        updateInterval = initialization._updateInterval;\\n        fee = PoolSwapLibrary.convertUIntToDecimal(initialization._fee);\\n        leverageAmount = PoolSwapLibrary.convertUIntToDecimal(initialization._leverageAmount);\\n        feeAddress = initialization._feeAddress;\\n        secondaryFeeAddress = initialization._secondaryFeeAddress;\\n        secondaryFeeSplitPercent = initialization._secondaryFeeSplitPercent;\\n        lastPriceTimestamp = block.timestamp;\\n        poolName = initialization._poolName;\\n        tokens[LONG_INDEX] = initialization._longToken;\\n        tokens[SHORT_INDEX] = initialization._shortToken;\\n        poolCommitter = initialization._poolCommitter;\\n        invariantCheckContract = initialization._invariantCheckContract;\\n        invariantCheck = IInvariantCheck(initialization._invariantCheckContract);\\n        emit PoolInitialized(\\n            initialization._longToken,\\n            initialization._shortToken,\\n            initialization._quoteToken,\\n            initialization._poolName\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute a price change\\n     * @param _oldPrice Previous price of the underlying asset\\n     * @param _newPrice New price of the underlying asset\\n     * @dev Throws if at least one update interval has not elapsed since last price update\\n     * @dev This is the entry point to upkeep a market\\n     * @dev Only callable by the associated `PoolKeeper` contract\\n     * @dev Only callable if the market is *not* paused\\n     */\\n    function poolUpkeep(int256 _oldPrice, int256 _newPrice) external override onlyKeeper checkInvariantsAfterFunction {\\n        require(intervalPassed(), \\\"Update interval hasn't passed\\\");\\n        // perform price change and update pool balances\\n        executePriceChange(_oldPrice, _newPrice);\\n        IPoolCommitter(poolCommitter).executeCommitments();\\n        lastPriceTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Pay keeper some amount in the collateral token for the perpetual pools market\\n     * @param to Address of the pool keeper to pay\\n     * @param amount Amount to pay the pool keeper\\n     * @return Whether the keeper is going to be paid; false if the amount exceeds the balances of the\\n     *         long and short pool, and true if the keeper can successfully be paid out\\n     * @dev Only callable by the associated `PoolKeeper` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function payKeeperFromBalances(address to, uint256 amount)\\n        external\\n        override\\n        onlyKeeper\\n        checkInvariantsAfterFunction\\n        returns (bool)\\n    {\\n        uint256 _shortBalance = shortBalance;\\n        uint256 _longBalance = longBalance;\\n\\n        // If the rewards are more than the balances of the pool, the keeper does not get paid\\n        if (amount >= _shortBalance + _longBalance) {\\n            return false;\\n        }\\n\\n        (uint256 shortBalanceAfterRewards, uint256 longBalanceAfterRewards) = PoolSwapLibrary.getBalancesAfterFees(\\n            amount,\\n            _shortBalance,\\n            _longBalance\\n        );\\n\\n        shortBalance = shortBalanceAfterRewards;\\n        longBalance = longBalanceAfterRewards;\\n\\n        // Pay keeper\\n        IERC20(quoteToken).safeTransfer(to, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer settlement tokens from pool to user\\n     * @param to Address of account to transfer to\\n     * @param amount Amount of quote tokens being transferred\\n     * @dev Only callable by the associated `PoolCommitter` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function quoteTokenTransfer(address to, uint256 amount)\\n        external\\n        override\\n        onlyPoolCommitter\\n        checkInvariantsBeforeFunction\\n    {\\n        IERC20(quoteToken).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer long tokens from pool to user\\n     * @param to Address of account to transfer to\\n     * @param isLongToken True if transferring long pool token\\n     * @param amount Amount of quote tokens being transferred\\n     * @dev Only callable by the associated `PoolCommitter` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function poolTokenTransfer(\\n        bool isLongToken,\\n        address to,\\n        uint256 amount\\n    ) external override onlyPoolCommitter checkInvariantsBeforeFunction {\\n        if (isLongToken) {\\n            IERC20(tokens[LONG_INDEX]).safeTransfer(to, amount);\\n        } else {\\n            IERC20(tokens[SHORT_INDEX]).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from user to account\\n     * @param from The account that's transferring quote tokens\\n     * @param to Address of account to transfer to\\n     * @param amount Amount of quote tokens being transferred\\n     * @dev Only callable by the associated `PoolCommitter` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function quoteTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override onlyPoolCommitter checkInvariantsBeforeFunction {\\n        IERC20(quoteToken).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Execute the price change once the interval period ticks over, updating the long & short\\n     *         balances based on the change of the feed (upwards or downwards) and paying fees\\n     * @param _oldPrice Old price from the oracle\\n     * @param _newPrice New price from the oracle\\n     * @dev Can only be called by poolUpkeep\\n     * @dev Only callable when the market is *not* paused\\n     * @dev Emits `PoolRebalance` if execution succeeds\\n     * @dev Emits `PriceChangeError` if execution does not take place\\n     */\\n    function executePriceChange(int256 _oldPrice, int256 _newPrice) internal checkInvariantsBeforeFunction {\\n        // prevent a division by 0 in computing the price change\\n        // prevent negative pricing\\n        if (_oldPrice <= 0 || _newPrice <= 0) {\\n            emit PriceChangeError(_oldPrice, _newPrice);\\n        } else {\\n            uint256 _shortBalance = shortBalance;\\n            uint256 _longBalance = longBalance;\\n            PoolSwapLibrary.PriceChangeData memory priceChangeData = PoolSwapLibrary.PriceChangeData(\\n                _oldPrice,\\n                _newPrice,\\n                _longBalance,\\n                _shortBalance,\\n                leverageAmount,\\n                fee\\n            );\\n            (uint256 newLongBalance, uint256 newShortBalance, uint256 totalFeeAmount) = PoolSwapLibrary\\n                .calculatePriceChange(priceChangeData);\\n\\n            unchecked {\\n                emit PoolRebalance(\\n                    int256(newShortBalance) - int256(_shortBalance),\\n                    int256(newLongBalance) - int256(_longBalance)\\n                );\\n            }\\n            // Update pool balances\\n            longBalance = newLongBalance;\\n            shortBalance = newShortBalance;\\n            // Pay the fee\\n            feeTransfer(totalFeeAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute the fee transfer transactions. Transfers fees to primary fee address (DAO) and secondary (pool deployer).\\n     *         If the DAO is the fee deployer, secondary fee address should be address(0) and all fees go to DAO.\\n     * @param totalFeeAmount total amount of fees paid\\n     */\\n    function feeTransfer(uint256 totalFeeAmount) internal {\\n        if (secondaryFeeAddress == address(0)) {\\n            IERC20(quoteToken).safeTransfer(feeAddress, totalFeeAmount);\\n        } else {\\n            require(secondaryFeeSplitPercent <= 100, \\\"Secondary fee split cannot exceed 100%\\\");\\n            uint256 secondaryFee = PoolSwapLibrary.mulFraction(totalFeeAmount, secondaryFeeSplitPercent, 100);\\n            uint256 remainder = totalFeeAmount - secondaryFee;\\n            IERC20(quoteToken).safeTransfer(secondaryFeeAddress, secondaryFee);\\n            IERC20(quoteToken).safeTransfer(feeAddress, remainder);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the long and short balances of the pools\\n     * @param _longBalance New balance of the long pool\\n     * @param _shortBalance New balance of the short pool\\n     * @dev Only callable by the associated `PoolCommitter` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function setNewPoolBalances(uint256 _longBalance, uint256 _shortBalance)\\n        external\\n        override\\n        onlyPoolCommitter\\n        checkInvariantsBeforeFunction\\n    {\\n        longBalance = _longBalance;\\n        shortBalance = _shortBalance;\\n    }\\n\\n    /**\\n     * @notice Mint tokens to a user\\n     * @param isLongToken True if minting short token\\n     * @param amount Amount of tokens to mint\\n     * @param minter Address of user/minter\\n     * @dev Only callable by the associated `PoolCommitter` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function mintTokens(\\n        bool isLongToken,\\n        uint256 amount,\\n        address minter\\n    ) external override onlyPoolCommitter checkInvariantsBeforeFunction {\\n        if (isLongToken) {\\n            require(IPoolToken(tokens[LONG_INDEX]).mint(amount, minter), \\\"Mint failed\\\");\\n        } else {\\n            require(IPoolToken(tokens[SHORT_INDEX]).mint(amount, minter), \\\"Mint failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn tokens by a user\\n     * @dev Can only be called by & used by the pool committer\\n     * @param isLongToken True if burning short token\\n     * @param amount Amount of tokens to burn\\n     * @param burner Address of user/burner\\n     * @dev Only callable by the associated `PoolCommitter` contract\\n     * @dev Only callable when the market is *not* paused\\n     */\\n    function burnTokens(\\n        bool isLongToken,\\n        uint256 amount,\\n        address burner\\n    ) external override onlyPoolCommitter checkInvariantsAfterFunction {\\n        if (isLongToken) {\\n            require(IPoolToken(tokens[LONG_INDEX]).burn(amount, burner), \\\"Burn failed\\\");\\n        } else {\\n            require(IPoolToken(tokens[SHORT_INDEX]).burn(amount, burner), \\\"Burn failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Indicates whether the price was last updated more than `updateInterval` seconds ago\\n     * @return Whether the price was last updated more than `updateInterval` seconds ago\\n     * @dev Unchecked\\n     */\\n    function intervalPassed() public view override returns (bool) {\\n        unchecked {\\n            return block.timestamp >= lastPriceTimestamp + updateInterval;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the fee address of the pool\\n     * @param account New address of the fee address/receiver\\n     * @dev Only callable by governance\\n     * @dev Only callable when the market is *not* paused\\n     * @dev Emits `FeeAddressUpdated` event on success\\n     */\\n    function updateFeeAddress(address account) external override onlyGov checkInvariantsAfterFunction {\\n        require(account != address(0), \\\"Account cannot be 0 address\\\");\\n        address oldFeeAddress = feeAddress;\\n        feeAddress = account;\\n        emit FeeAddressUpdated(oldFeeAddress, feeAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the secondary fee address of the pool\\n     * @param account New address of the fee address/receiver\\n     */\\n    function updateSecondaryFeeAddress(address account) external override {\\n        address _oldSecondaryFeeAddress = secondaryFeeAddress;\\n        require(msg.sender == _oldSecondaryFeeAddress);\\n        secondaryFeeAddress = account;\\n        emit SecondaryFeeAddressUpdated(_oldSecondaryFeeAddress, account);\\n    }\\n\\n    /**\\n     * @notice Updates the keeper contract of the pool\\n     * @param _keeper New address of the keeper contract\\n     */\\n    function setKeeper(address _keeper) external override onlyGov checkInvariantsAfterFunction {\\n        require(_keeper != address(0), \\\"Keeper address cannot be 0 address\\\");\\n        address oldKeeper = keeper;\\n        keeper = _keeper;\\n        emit KeeperAddressChanged(oldKeeper, keeper);\\n    }\\n\\n    /**\\n     * @notice Starts to transfer governance of the pool. The new governance\\n     *          address must call `claimGovernance` in order for this to take\\n     *          effect. Until this occurs, the existing governance address\\n     *          remains in control of the pool.\\n     * @param _governance New address of the governance of the pool\\n     * @dev First step of the two-step governance transfer process\\n     * @dev Sets the governance transfer flag to true\\n     * @dev See `claimGovernance`\\n     */\\n    function transferGovernance(address _governance) external override onlyGov checkInvariantsAfterFunction {\\n        require(_governance != address(0), \\\"Governance address cannot be 0 address\\\");\\n        provisionalGovernance = _governance;\\n        governanceTransferInProgress = true;\\n        emit ProvisionalGovernanceChanged(_governance);\\n    }\\n\\n    /**\\n     * @notice Completes transfer of governance by actually changing permissions\\n     *          over the pool.\\n     * @dev Second and final step of the two-step governance transfer process\\n     * @dev See `transferGovernance`\\n     * @dev Sets the governance transfer flag to false\\n     * @dev After a successful call to this function, the actual governance\\n     *      address and the provisional governance address MUST be equal.\\n     */\\n    function claimGovernance() external override checkInvariantsAfterFunction {\\n        require(governanceTransferInProgress, \\\"No governance change active\\\");\\n        require(msg.sender == provisionalGovernance, \\\"Not provisional governor\\\");\\n        address oldGovernance = governance; /* for later event emission */\\n        governance = provisionalGovernance;\\n        governanceTransferInProgress = false;\\n        emit GovernanceAddressChanged(oldGovernance, governance);\\n    }\\n\\n    /**\\n     * @return _latestPrice The oracle price\\n     * @return _data The oracleWrapper's metadata. Implementations can choose what data to return here\\n     * @return _lastPriceTimestamp The timestamp of the last upkeep\\n     * @return _updateInterval The update frequency for this pool\\n     * @dev To save gas so PoolKeeper does not have to make three external calls\\n     */\\n    function getUpkeepInformation()\\n        external\\n        view\\n        override\\n        returns (\\n            int256,\\n            bytes memory,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (int256 _latestPrice, bytes memory _data) = IOracleWrapper(oracleWrapper).getPriceAndMetadata();\\n        return (_latestPrice, _data, lastPriceTimestamp, updateInterval);\\n    }\\n\\n    /**\\n     * @return The price of the pool's feed oracle\\n     */\\n    function getOraclePrice() external view override returns (int256) {\\n        return IOracleWrapper(oracleWrapper).getPrice();\\n    }\\n\\n    /**\\n     * @return Addresses of the pool tokens for this pool (long and short,\\n     *          respectively)\\n     */\\n    function poolTokens() external view override returns (address[2] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @return Quantities of pool tokens for this pool (long and short,\\n     *          respectively)\\n     */\\n    function balances() external view override returns (uint256, uint256) {\\n        return (shortBalance, longBalance);\\n    }\\n\\n    /**\\n     * @notice Withdraws all available quote asset from the pool\\n     * @dev Pool must not be paused\\n     * @dev ERC20 transfer\\n     * @dev Only callable by governance\\n     */\\n    function withdrawQuote() external onlyGov {\\n        require(paused, \\\"Pool is live\\\");\\n        IERC20 quoteERC = IERC20(quoteToken);\\n        uint256 balance = quoteERC.balanceOf(address(this));\\n        IERC20(quoteToken).safeTransfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Pauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function pause() external override onlyInvariantCheckContract {\\n        paused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @notice Unpauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function unpause() external override onlyGov {\\n        paused = false;\\n        emit Unpaused();\\n    }\\n\\n    /**\\n     * @dev Check invariants before function body only. This is used in functions where the state of the pool is updated after exiting PoolCommitter (i.e. executeCommitments)\\n     */\\n    modifier checkInvariantsBeforeFunction() {\\n        invariantCheck.checkInvariants(address(this));\\n        require(!paused, \\\"Pool is paused\\\");\\n        _;\\n    }\\n\\n    // #### Modifiers\\n    modifier checkInvariantsAfterFunction() {\\n        require(!paused, \\\"Pool is paused\\\");\\n        _;\\n        invariantCheck.checkInvariants(address(this));\\n        require(!paused, \\\"Pool is paused\\\");\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"msg.sender not keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyInvariantCheckContract() {\\n        require(msg.sender == invariantCheckContract, \\\"msg.sender not invariantCheckContract\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolCommitter() {\\n        require(msg.sender == poolCommitter, \\\"msg.sender not poolCommitter\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x867e21b51ff6968d867b682e611551af4899053c05b1a38731bd2ca812d7fb80\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolCommitter.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/IAutoClaim.sol\\\";\\nimport \\\"../interfaces/IPausable.sol\\\";\\nimport \\\"../interfaces/IInvariantCheck.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./PoolSwapLibrary.sol\\\";\\n\\n/// @title This contract is responsible for handling commitment logic\\ncontract PoolCommitter is IPoolCommitter, Initializable {\\n    // #### Globals\\n    uint128 public constant LONG_INDEX = 0;\\n    uint128 public constant SHORT_INDEX = 1;\\n\\n    IAutoClaim public autoClaim;\\n    uint128 public override updateIntervalId = 1;\\n    // The amount that is extracted from each mint and burn, being left in the pool. Given as the decimal * 10 ^ 18. For example, 60% fee is 0.6 * 10 ^ 18\\n    bytes16 mintingFee;\\n    bytes16 burningFee;\\n\\n    // Index 0 is the LONG token, index 1 is the SHORT token.\\n    // Fetched from the LeveragedPool when leveragedPool is set\\n    address[2] public tokens;\\n\\n    mapping(uint256 => Prices) public priceHistory; // updateIntervalId => tokenPrice\\n    mapping(uint256 => bytes16) public burnFeeHistory; // updateIntervalId => burn fee. We need to store this historically because people can claim at any time after the update interval, but we want them to pay the fee from the update interval in which they committed.\\n    mapping(address => Balance) public userAggregateBalance;\\n\\n    // Update interval ID => TotalCommitment\\n    mapping(uint256 => TotalCommitment) public totalPoolCommitments;\\n    // Address => Update interval ID => UserCommitment\\n    mapping(address => mapping(uint256 => UserCommitment)) public userCommitments;\\n    // The last interval ID for which a given user's balance was updated\\n    mapping(address => uint256) public lastUpdatedIntervalId;\\n    // The most recent update interval in which a user committed\\n    mapping(address => uint256[]) public unAggregatedCommitments;\\n    // Used to create a dynamic array that is used to copy the new unAggregatedCommitments array into the mapping after updating balance\\n    uint256[] private storageArrayPlaceHolder;\\n\\n    address public factory;\\n    address public governance;\\n    address public leveragedPool;\\n    address public invariantCheckContract;\\n    bool public paused;\\n    IInvariantCheck public invariantCheck;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _factory Address of the associated `PoolFactory` contract\\n     * @param _invariantCheckContract Address of the associated `InvariantCheck` contract\\n     * @param _autoClaim Address of the associated `AutoClaim` contract\\n     * @param _mintingFee The percentage that is taken from each mint, given as a decimal * 10 ^ 18\\n     * @param _burningFee The percentage that is taken from each burn, given as a decimal * 10 ^ 18\\n     * @dev Throws if factory contract address is null\\n     * @dev Throws if autoClaim contract address is null\\n     * @dev Throws if invariantCheck contract address is null\\n     * @dev Throws if minting fee is over 100%\\n     * @dev Throws if burning fee is over 100%\\n     */\\n    constructor(\\n        address _factory,\\n        address _invariantCheckContract,\\n        address _autoClaim,\\n        uint256 _mintingFee,\\n        uint256 _burningFee\\n    ) {\\n        require(_factory != address(0), \\\"Factory address cannot be null\\\");\\n        require(_autoClaim != address(0), \\\"AutoClaim address cannot be null\\\");\\n        require(_invariantCheckContract != address(0), \\\"InvariantCheck address cannot be null\\\");\\n        require(_mintingFee < PoolSwapLibrary.WAD_PRECISION, \\\"Minting fee >= 100%\\\");\\n        require(_burningFee < PoolSwapLibrary.WAD_PRECISION, \\\"Burning fee >= 100%\\\");\\n        factory = _factory;\\n        autoClaim = IAutoClaim(_autoClaim);\\n        mintingFee = PoolSwapLibrary.convertUIntToDecimal(_mintingFee);\\n        burningFee = PoolSwapLibrary.convertUIntToDecimal(_burningFee);\\n        invariantCheckContract = _invariantCheckContract;\\n        invariantCheck = IInvariantCheck(_invariantCheckContract);\\n    }\\n\\n    /**\\n     * @notice Initialises the contract\\n     * @param _factory Address of the associated `PoolFactory` contract\\n     * @param _invariantCheckContract Address of the associated `InvariantCheck` contract\\n     * @param _autoClaim Address of the associated `AutoClaim` contract\\n     * @param _mintingFee The percentage that is taken from each mint, given as a decimal * 10 ^ 18\\n     * @param _burningFee The percentage that is taken from each burn, given as a decimal * 10 ^ 18\\n     * @dev Throws if factory contract address is null\\n     * @dev Throws if autoClaim contract address is null\\n     * @dev Throws if invariantCheck contract address is null\\n     * @dev Throws if autoclaim contract address is null\\n     * @dev Only callable by the associated initialiser address\\n     * @dev Throws if minting fee is over 100%\\n     * @dev Throws if burning fee is over 100%\\n     */\\n    function initialize(\\n        address _factory,\\n        address _invariantCheckContract,\\n        address _autoClaim,\\n        uint256 _mintingFee,\\n        uint256 _burningFee\\n    ) external override initializer {\\n        require(_factory != address(0), \\\"Factory address cannot be 0 address\\\");\\n        require(_invariantCheckContract != address(0), \\\"InvariantCheck address cannot be 0 address\\\");\\n        require(_autoClaim != address(0), \\\"AutoClaim address cannot be null\\\");\\n        require(_mintingFee < PoolSwapLibrary.WAD_PRECISION, \\\"Minting fee >= 100%\\\");\\n        require(_burningFee < PoolSwapLibrary.WAD_PRECISION, \\\"Burning fee >= 100%\\\");\\n        updateIntervalId = 1;\\n        factory = _factory;\\n        mintingFee = PoolSwapLibrary.convertUIntToDecimal(_mintingFee);\\n        burningFee = PoolSwapLibrary.convertUIntToDecimal(_burningFee);\\n        autoClaim = IAutoClaim(_autoClaim);\\n        governance = IPoolFactory(_factory).getOwner();\\n        invariantCheckContract = _invariantCheckContract;\\n        invariantCheck = IInvariantCheck(_invariantCheckContract);\\n        governance = IPoolFactory(factory).getOwner();\\n    }\\n\\n    /**\\n     * @notice Apply commitment data to storage\\n     * @param pool The LeveragedPool of this PoolCommitter instance\\n     * @param commitType The type of commitment being made\\n     * @param amount The amount of tokens being committed\\n     * @param fromAggregateBalance If minting, burning, or rebalancing into a delta neutral position,\\n     *                             will tokens be taken from user's aggregate balance?\\n     * @param userCommit The appropriate update interval's commitment data for the user\\n     * @param userCommit The appropriate update interval's commitment data for the entire pool\\n     */\\n    function applyCommitment(\\n        ILeveragedPool pool,\\n        CommitType commitType,\\n        uint256 amount,\\n        bool fromAggregateBalance,\\n        UserCommitment storage userCommit,\\n        TotalCommitment storage totalCommit\\n    ) private {\\n        Balance memory balance = userAggregateBalance[msg.sender];\\n        uint256 feeAmount;\\n\\n        if (commitType == CommitType.LongMint || commitType == CommitType.ShortMint) {\\n            // We want to deduct the amount of settlement tokens that will be recorded under the commit by the minting fee\\n            // and then add it to the correct side of the pool\\n            feeAmount =\\n                PoolSwapLibrary.convertDecimalToUInt(PoolSwapLibrary.multiplyDecimalByUInt(mintingFee, amount)) /\\n                PoolSwapLibrary.WAD_PRECISION;\\n            amount = amount - feeAmount;\\n        }\\n\\n        if (commitType == CommitType.LongMint) {\\n            (uint256 shortBalance, uint256 longBalance) = pool.balances();\\n            userCommit.longMintAmount += amount;\\n            totalCommit.longMintAmount += amount;\\n            // Add the fee to long side. This has been taken from the commit amount.\\n            pool.setNewPoolBalances(longBalance + feeAmount, shortBalance);\\n            // If we are minting from balance, this would already have thrown in `commit` if we are minting more than entitled too\\n        } else if (commitType == CommitType.LongBurn) {\\n            userCommit.longBurnAmount += amount;\\n            totalCommit.longBurnAmount += amount;\\n            // long burning: pull in long pool tokens from committer\\n            if (fromAggregateBalance) {\\n                // Burning from user's aggregate balance\\n                userCommit.balanceLongBurnAmount += amount;\\n                // This require statement is only needed in this branch, as `pool.burnTokens` will revert if burning too many\\n                require(userCommit.balanceLongBurnAmount <= balance.longTokens, \\\"Insufficient pool tokens\\\");\\n                // Burn from leveragedPool, because that is the official owner of the tokens before they are claimed\\n                pool.burnTokens(true, amount, leveragedPool);\\n            } else {\\n                // Burning from user's wallet\\n                pool.burnTokens(true, amount, msg.sender);\\n            }\\n        } else if (commitType == CommitType.ShortMint) {\\n            (uint256 shortBalance, uint256 longBalance) = pool.balances();\\n            userCommit.shortMintAmount += amount;\\n            totalCommit.shortMintAmount += amount;\\n            // Add the fee to short side. This has been taken from the commit amount.\\n            pool.setNewPoolBalances(longBalance, shortBalance + feeAmount);\\n            // If we are minting from balance, this would already have thrown in `commit` if we are minting more than entitled too\\n        } else if (commitType == CommitType.ShortBurn) {\\n            userCommit.shortBurnAmount += amount;\\n            totalCommit.shortBurnAmount += amount;\\n            if (fromAggregateBalance) {\\n                // Burning from user's aggregate balance\\n                userCommit.balanceShortBurnAmount += amount;\\n                // This require statement is only needed in this branch, as `pool.burnTokens` will revert if burning too many\\n                require(userCommit.balanceShortBurnAmount <= balance.shortTokens, \\\"Insufficient pool tokens\\\");\\n                // Burn from leveragedPool, because that is the official owner of the tokens before they are claimed\\n                pool.burnTokens(false, amount, leveragedPool);\\n            } else {\\n                // Burning from user's wallet\\n                pool.burnTokens(false, amount, msg.sender);\\n            }\\n        } else if (commitType == CommitType.LongBurnShortMint) {\\n            userCommit.longBurnShortMintAmount += amount;\\n            totalCommit.longBurnShortMintAmount += amount;\\n            if (fromAggregateBalance) {\\n                userCommit.balanceLongBurnMintAmount += amount;\\n                require(userCommit.balanceLongBurnMintAmount <= balance.longTokens, \\\"Insufficient pool tokens\\\");\\n                pool.burnTokens(true, amount, leveragedPool);\\n            } else {\\n                pool.burnTokens(true, amount, msg.sender);\\n            }\\n        } else if (commitType == CommitType.ShortBurnLongMint) {\\n            userCommit.shortBurnLongMintAmount += amount;\\n            totalCommit.shortBurnLongMintAmount += amount;\\n            if (fromAggregateBalance) {\\n                userCommit.balanceShortBurnMintAmount += amount;\\n                require(userCommit.balanceShortBurnMintAmount <= balance.shortTokens, \\\"Insufficient pool tokens\\\");\\n                pool.burnTokens(false, amount, leveragedPool);\\n            } else {\\n                pool.burnTokens(false, amount, msg.sender);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Commit to minting/burning long/short tokens after the next price change\\n     * @param commitType Type of commit you're doing (Long vs Short, Mint vs Burn)\\n     * @param amount Amount of quote tokens you want to commit to minting; OR amount of pool\\n     *               tokens you want to burn\\n     * @param fromAggregateBalance If minting, burning, or rebalancing into a delta neutral position,\\n     *                             will tokens be taken from user's aggregate balance?\\n     * @dev Emits a `CreateCommit` event on success\\n     */\\n    function commit(\\n        CommitType commitType,\\n        uint256 amount,\\n        bool fromAggregateBalance,\\n        bool payForClaim\\n    ) external payable override updateBalance checkInvariantsAfterFunction {\\n        require(amount > 0, \\\"Amount must not be zero\\\");\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 updateInterval = pool.updateInterval();\\n        uint256 lastPriceTimestamp = pool.lastPriceTimestamp();\\n        uint256 frontRunningInterval = pool.frontRunningInterval();\\n\\n        if (payForClaim) {\\n            autoClaim.makePaidClaimRequest{value: msg.value}(msg.sender);\\n        }\\n\\n        uint256 appropriateUpdateIntervalId = PoolSwapLibrary.appropriateUpdateIntervalId(\\n            block.timestamp,\\n            lastPriceTimestamp,\\n            frontRunningInterval,\\n            updateInterval,\\n            updateIntervalId\\n        );\\n        TotalCommitment storage totalCommit = totalPoolCommitments[appropriateUpdateIntervalId];\\n        UserCommitment storage userCommit = userCommitments[msg.sender][appropriateUpdateIntervalId];\\n\\n        userCommit.updateIntervalId = appropriateUpdateIntervalId;\\n\\n        uint256 length = unAggregatedCommitments[msg.sender].length;\\n        if (length == 0 || unAggregatedCommitments[msg.sender][length - 1] < appropriateUpdateIntervalId) {\\n            unAggregatedCommitments[msg.sender].push(appropriateUpdateIntervalId);\\n        }\\n\\n        if (commitType == CommitType.LongMint || commitType == CommitType.ShortMint) {\\n            // minting: pull in the quote token from the committer\\n            // Do not need to transfer if minting using aggregate balance tokens, since the leveraged pool already owns these tokens.\\n            if (!fromAggregateBalance) {\\n                pool.quoteTokenTransferFrom(msg.sender, leveragedPool, amount);\\n            } else {\\n                // Want to take away from their balance's settlement tokens\\n                userAggregateBalance[msg.sender].settlementTokens -= amount;\\n            }\\n        }\\n\\n        applyCommitment(pool, commitType, amount, fromAggregateBalance, userCommit, totalCommit);\\n        emit CreateCommit(msg.sender, amount, commitType);\\n    }\\n\\n    /**\\n     * @notice Claim user's balance. This can be done either by the user themself or by somebody else on their behalf.\\n     * @param user Address of the user to claim against\\n     * @dev Updates aggregate user balances\\n     * @dev Emits a `Claim` event on success\\n     */\\n    function claim(address user) external override checkInvariantsAfterFunction onlyAutoClaimOrCommitter(user) {\\n        updateAggregateBalance(user);\\n        if (msg.sender == user && autoClaim.checkUserClaim(user, address(this))) {\\n            // If the committer is claiming for themself and they have a valid pending claim, clear it.\\n            autoClaim.withdrawUserClaimRequest(user);\\n        }\\n        Balance memory balance = userAggregateBalance[user];\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        if (balance.settlementTokens > 0) {\\n            pool.quoteTokenTransfer(user, balance.settlementTokens);\\n        }\\n        if (balance.longTokens > 0) {\\n            pool.poolTokenTransfer(true, user, balance.longTokens);\\n        }\\n        if (balance.shortTokens > 0) {\\n            pool.poolTokenTransfer(false, user, balance.shortTokens);\\n        }\\n        delete userAggregateBalance[user];\\n        emit Claim(user);\\n    }\\n\\n    /**\\n     * @notice Executes every commitment specified in the list\\n     * @param _commits Array of `TotalCommitment`s\\n     */\\n    function executeGivenCommitments(TotalCommitment memory _commits) internal {\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n\\n        BalancesAndSupplies memory balancesAndSupplies = BalancesAndSupplies({\\n            shortBalance: pool.shortBalance(),\\n            longBalance: pool.longBalance(),\\n            longTotalSupplyBefore: IERC20(tokens[0]).totalSupply(),\\n            shortTotalSupplyBefore: IERC20(tokens[1]).totalSupply()\\n        });\\n\\n        uint256 totalLongBurn = _commits.longBurnAmount + _commits.longBurnShortMintAmount;\\n        uint256 totalShortBurn = _commits.shortBurnAmount + _commits.shortBurnLongMintAmount;\\n        // Update price before values change\\n        priceHistory[updateIntervalId] = Prices({\\n            longPrice: PoolSwapLibrary.getPrice(\\n                balancesAndSupplies.longBalance,\\n                balancesAndSupplies.longTotalSupplyBefore + totalLongBurn\\n            ),\\n            shortPrice: PoolSwapLibrary.getPrice(\\n                balancesAndSupplies.shortBalance,\\n                balancesAndSupplies.shortTotalSupplyBefore + totalShortBurn\\n            )\\n        });\\n\\n        // Amount of collateral tokens that are generated from the long burn into instant mints\\n        uint256 longBurnInstantMintAmount = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n            balancesAndSupplies.longTotalSupplyBefore,\\n            _commits.longBurnShortMintAmount,\\n            balancesAndSupplies.longBalance,\\n            totalLongBurn\\n        );\\n        // Amount of collateral tokens that are generated from the short burn into instant mints\\n        uint256 shortBurnInstantMintAmount = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n            balancesAndSupplies.shortTotalSupplyBefore,\\n            _commits.shortBurnLongMintAmount,\\n            balancesAndSupplies.shortBalance,\\n            totalShortBurn\\n        );\\n\\n        // Long Mints\\n        uint256 longMintAmount = PoolSwapLibrary.getMintAmount(\\n            balancesAndSupplies.longTotalSupplyBefore, // long token total supply,\\n            _commits.longMintAmount + shortBurnInstantMintAmount, // Add the collateral tokens that will be generated from burning shorts for instant long mint\\n            balancesAndSupplies.longBalance, // total quote tokens in the long pull\\n            totalLongBurn // total pool tokens commited to be burned\\n        );\\n\\n        if (longMintAmount > 0) {\\n            pool.mintTokens(true, longMintAmount, leveragedPool);\\n        }\\n\\n        // Long Burns\\n        uint256 longBurnAmount = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n            balancesAndSupplies.longTotalSupplyBefore,\\n            totalLongBurn,\\n            balancesAndSupplies.longBalance,\\n            totalLongBurn\\n        );\\n\\n        // Short Mints\\n        uint256 shortMintAmount = PoolSwapLibrary.getMintAmount(\\n            balancesAndSupplies.shortTotalSupplyBefore, // short token total supply\\n            _commits.shortMintAmount + longBurnInstantMintAmount, // Add the collateral tokens that will be generated from burning longs for instant short mint\\n            balancesAndSupplies.shortBalance,\\n            totalShortBurn\\n        );\\n\\n        if (shortMintAmount > 0) {\\n            pool.mintTokens(false, shortMintAmount, leveragedPool);\\n        }\\n\\n        // Short Burns\\n        uint256 shortBurnAmount = PoolSwapLibrary.getWithdrawAmountOnBurn(\\n            balancesAndSupplies.shortTotalSupplyBefore,\\n            totalShortBurn,\\n            balancesAndSupplies.shortBalance,\\n            totalShortBurn\\n        );\\n\\n        uint256 newLongBalance = balancesAndSupplies.longBalance +\\n            _commits.longMintAmount -\\n            longBurnAmount +\\n            shortBurnInstantMintAmount;\\n        uint256 newShortBalance = balancesAndSupplies.shortBalance +\\n            _commits.shortMintAmount -\\n            shortBurnAmount +\\n            longBurnInstantMintAmount;\\n\\n        // Update the collateral on each side\\n        pool.setNewPoolBalances(newLongBalance, newShortBalance);\\n    }\\n\\n    /**\\n     * @notice Executes all commitments currently queued for the associated `LeveragedPool`\\n     * @dev Only callable by the associated `LeveragedPool` contract\\n     */\\n    function executeCommitments() external override onlyPool checkInvariantsBeforeFunction {\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n\\n        uint32 counter = 1;\\n        uint256 lastPriceTimestamp = pool.lastPriceTimestamp();\\n        uint256 updateInterval = pool.updateInterval();\\n\\n        /*\\n         * (old)\\n         * updateIntervalId\\n         * |\\n         * |    updateIntervalId\\n         * |    |\\n         * |    |    counter\\n         * |    |    |\\n         * |    |    |              (end)\\n         * |    |    |              |\\n         * V    V    V              V\\n         * +----+----+----+~~~~+----+\\n         * |    |    |    |....|    |\\n         * +----+----+----+~~~~+----+\\n         *\\n         * Iterate over the sequence of possible update periods from the most\\n         * recent (i.e., the value of `updateIntervalId` as at the entry point\\n         * of this function) until the end of the queue.\\n         *\\n         * At each iteration, execute all of the (total) commitments for the\\n         * pool for that period and then remove them from the queue.\\n         *\\n         * In reality, this should never iterate more than once, since more than one update interval\\n         * should never be passed without the previous one being upkept.\\n         */\\n        while (true) {\\n            if (block.timestamp >= lastPriceTimestamp + updateInterval * counter) {\\n                // Another update interval has passed, so we have to do the nextIntervalCommit as well\\n                burnFeeHistory[updateIntervalId] = burningFee;\\n                executeGivenCommitments(totalPoolCommitments[updateIntervalId]);\\n                delete totalPoolCommitments[updateIntervalId];\\n                updateIntervalId += 1;\\n            } else {\\n                break;\\n            }\\n            counter += 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the aggregate balance based on the result of application\\n     *          of the provided (user) commitment\\n     * @param _commit Commitment to apply\\n     * @return _newLongTokens Quantity of long pool tokens post-application\\n     * @return _newShortTokens Quantity of short pool tokens post-application\\n     * @return _longBurnFee Quantity of settlement tokens taken as a fee from long burns\\n     * @return _shortBurnFee Quantity of settlement tokens taken as a fee from short burns\\n     * @return _newSettlementTokens Quantity of settlement tokens post\\n     *                                  application\\n     * @dev Wraps two (pure) library functions from `PoolSwapLibrary`\\n     */\\n    function updateBalanceSingleCommitment(UserCommitment memory _commit)\\n        internal\\n        view\\n        returns (\\n            uint256 _newLongTokens,\\n            uint256 _newShortTokens,\\n            uint256 _longBurnFee,\\n            uint256 _shortBurnFee,\\n            uint256 _newSettlementTokens\\n        )\\n    {\\n        PoolSwapLibrary.UpdateData memory updateData = PoolSwapLibrary.UpdateData({\\n            longPrice: priceHistory[_commit.updateIntervalId].longPrice,\\n            shortPrice: priceHistory[_commit.updateIntervalId].shortPrice,\\n            currentUpdateIntervalId: updateIntervalId,\\n            updateIntervalId: _commit.updateIntervalId,\\n            longMintAmount: _commit.longMintAmount,\\n            longBurnAmount: _commit.longBurnAmount,\\n            shortMintAmount: _commit.shortMintAmount,\\n            shortBurnAmount: _commit.shortBurnAmount,\\n            longBurnShortMintAmount: _commit.longBurnShortMintAmount,\\n            shortBurnLongMintAmount: _commit.shortBurnLongMintAmount,\\n            burnFee: burnFeeHistory[_commit.updateIntervalId]\\n        });\\n\\n        (_newLongTokens, _newShortTokens, _longBurnFee, _shortBurnFee, _newSettlementTokens) = PoolSwapLibrary\\n            .getUpdatedAggregateBalance(updateData);\\n    }\\n\\n    /**\\n     * @notice Add the result of a user's most recent commit to their aggregated balance\\n     * @param user Address of the given user\\n     * @dev Updates the `userAggregateBalance` mapping by applying `BalanceUpdate`s derived from iteration over the entirety of unaggregated commitments associated with the given user\\n     * @dev Emits an `AggregateBalanceUpdated` event upon successful termination\\n     */\\n    function updateAggregateBalance(address user) public override checkInvariantsAfterFunction {\\n        Balance storage balance = userAggregateBalance[user];\\n\\n        BalanceUpdate memory update = BalanceUpdate({\\n            _updateIntervalId: updateIntervalId,\\n            _newLongTokensSum: 0,\\n            _newShortTokensSum: 0,\\n            _newSettlementTokensSum: 0,\\n            _balanceLongBurnAmount: 0,\\n            _balanceShortBurnAmount: 0,\\n            _longBurnFee: 0,\\n            _shortBurnFee: 0\\n        });\\n\\n        // Iterate from the most recent up until the current update interval\\n\\n        uint256[] memory currentIntervalIds = unAggregatedCommitments[user];\\n        uint256 unAggregatedLength = currentIntervalIds.length;\\n        for (uint256 i = 0; i < unAggregatedLength; i++) {\\n            uint256 id = currentIntervalIds[i];\\n            if (currentIntervalIds[i] == 0) {\\n                continue;\\n            }\\n            UserCommitment memory commitment = userCommitments[user][id];\\n\\n            /* If the update interval of commitment has not yet passed, we still\\n            want to deduct burns from the balance from a user's balance.\\n            Therefore, this should happen outside of the if block below.*/\\n            update._balanceLongBurnAmount += commitment.balanceLongBurnAmount + commitment.balanceLongBurnMintAmount;\\n            update._balanceShortBurnAmount += commitment.balanceShortBurnAmount + commitment.balanceShortBurnMintAmount;\\n            if (commitment.updateIntervalId < updateIntervalId) {\\n                (\\n                    uint256 _newLongTokens,\\n                    uint256 _newShortTokens,\\n                    uint256 _longBurnFee,\\n                    uint256 _shortBurnFee,\\n                    uint256 _newSettlementTokens\\n                ) = updateBalanceSingleCommitment(commitment);\\n                update._newLongTokensSum += _newLongTokens;\\n                update._newShortTokensSum += _newShortTokens;\\n                update._newSettlementTokensSum += _newSettlementTokens;\\n                update._longBurnFee += _longBurnFee;\\n                update._shortBurnFee += _shortBurnFee;\\n                delete userCommitments[user][i];\\n                delete unAggregatedCommitments[user][i];\\n            } else {\\n                // Clear them now that they have been accounted for in the balance\\n                userCommitments[user][id].balanceLongBurnAmount = 0;\\n                userCommitments[user][id].balanceShortBurnAmount = 0;\\n                userCommitments[user][id].balanceLongBurnMintAmount = 0;\\n                userCommitments[user][id].balanceShortBurnMintAmount = 0;\\n                // This commitment wasn't ready to be completely added to the balance, so copy it over into the new ID array\\n                storageArrayPlaceHolder.push(currentIntervalIds[i]);\\n            }\\n        }\\n\\n        delete unAggregatedCommitments[user];\\n        unAggregatedCommitments[user] = storageArrayPlaceHolder;\\n\\n        delete storageArrayPlaceHolder;\\n\\n        // Add new tokens minted, and remove the ones that were burnt from this balance\\n        balance.longTokens += update._newLongTokensSum;\\n        balance.longTokens -= update._balanceLongBurnAmount;\\n        balance.shortTokens += update._newShortTokensSum;\\n        balance.shortTokens -= update._balanceShortBurnAmount;\\n        balance.settlementTokens += update._newSettlementTokensSum;\\n\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        (uint256 shortBalance, uint256 longBalance) = pool.balances();\\n        pool.setNewPoolBalances(longBalance + update._longBurnFee, shortBalance + update._shortBurnFee);\\n\\n        emit AggregateBalanceUpdated(user);\\n    }\\n\\n    /**\\n     * @return which update interval ID a commit would be placed into if made now\\n     * @dev Calls PoolSwapLibrary::appropriateUpdateIntervalId\\n     */\\n    function getAppropriateUpdateIntervalId() external view override returns (uint128) {\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        return\\n            uint128(\\n                PoolSwapLibrary.appropriateUpdateIntervalId(\\n                    block.timestamp,\\n                    pool.lastPriceTimestamp(),\\n                    pool.frontRunningInterval(),\\n                    pool.updateInterval(),\\n                    updateIntervalId\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice A copy of `updateAggregateBalance` that returns the aggregated balance without updating it\\n     * @param user Address of the given user\\n     * @return Associated `Balance` for the given user after aggregation\\n     */\\n    function getAggregateBalance(address user) public view override returns (Balance memory) {\\n        Balance memory _balance = userAggregateBalance[user];\\n\\n        BalanceUpdate memory update = BalanceUpdate({\\n            _updateIntervalId: updateIntervalId,\\n            _newLongTokensSum: 0,\\n            _newShortTokensSum: 0,\\n            _newSettlementTokensSum: 0,\\n            _balanceLongBurnAmount: 0,\\n            _balanceShortBurnAmount: 0,\\n            _longBurnFee: 0,\\n            _shortBurnFee: 0\\n        });\\n\\n        // Iterate from the most recent up until the current update interval\\n\\n        uint256[] memory currentIntervalIds = unAggregatedCommitments[user];\\n        uint256 unAggregatedLength = currentIntervalIds.length;\\n        for (uint256 i = 0; i < unAggregatedLength; i++) {\\n            uint256 id = currentIntervalIds[i];\\n            if (currentIntervalIds[i] == 0) {\\n                continue;\\n            }\\n            UserCommitment memory commitment = userCommitments[user][id];\\n\\n            /* If the update interval of commitment has not yet passed, we still\\n            want to deduct burns from the balance from a user's balance.\\n            Therefore, this should happen outside of the if block below.*/\\n            update._balanceLongBurnAmount += commitment.balanceLongBurnAmount + commitment.balanceLongBurnMintAmount;\\n            update._balanceShortBurnAmount += commitment.balanceShortBurnAmount + commitment.balanceShortBurnMintAmount;\\n            if (commitment.updateIntervalId < updateIntervalId) {\\n                (\\n                    uint256 _newLongTokens,\\n                    uint256 _newShortTokens,\\n                    ,\\n                    ,\\n                    uint256 _newSettlementTokens\\n                ) = updateBalanceSingleCommitment(commitment);\\n                update._newLongTokensSum += _newLongTokens;\\n                update._newShortTokensSum += _newShortTokens;\\n                update._newSettlementTokensSum += _newSettlementTokens;\\n            }\\n        }\\n\\n        // Add new tokens minted, and remove the ones that were burnt from this balance\\n        _balance.longTokens += update._newLongTokensSum;\\n        _balance.longTokens -= update._balanceLongBurnAmount;\\n        _balance.shortTokens += update._newShortTokensSum;\\n        _balance.shortTokens -= update._balanceShortBurnAmount;\\n        _balance.settlementTokens += update._newSettlementTokensSum;\\n\\n        return _balance;\\n    }\\n\\n    /**\\n     * @return The pending commitments from the two current update intervals, including the one started in the frontrunning interval at the end of the last\\n     */\\n    function getPendingCommits() external view override returns (TotalCommitment memory, TotalCommitment memory) {\\n        return (totalPoolCommitments[updateIntervalId], totalPoolCommitments[updateIntervalId + 1]);\\n    }\\n\\n    /**\\n     * @notice Sets the quote token address and the address of the associated `LeveragedPool` contract to the provided values\\n     * @param _quoteToken Address of the quote token to use\\n     * @param _leveragedPool Address of the pool to use\\n     * @dev Only callable by the associated `PoolFactory` contract\\n     * @dev Throws if either address are null\\n     */\\n    function setQuoteAndPool(address _quoteToken, address _leveragedPool) external override onlyFactory onlyUnpaused {\\n        require(_quoteToken != address(0), \\\"Quote token address cannot be 0 address\\\");\\n        require(_leveragedPool != address(0), \\\"Leveraged pool address cannot be 0 address\\\");\\n\\n        leveragedPool = _leveragedPool;\\n        IERC20 _token = IERC20(_quoteToken);\\n        bool approvalSuccess = _token.approve(leveragedPool, _token.totalSupply());\\n        require(approvalSuccess, \\\"ERC20 approval failed\\\");\\n        tokens = ILeveragedPool(leveragedPool).poolTokens();\\n    }\\n\\n    /**\\n     * @notice Pauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function pause() external onlyInvariantCheckContract {\\n        paused = true;\\n    }\\n\\n    /**\\n     * @notice Unpauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function unpause() external onlyGov {\\n        paused = false;\\n    }\\n\\n    /**\\n     * @notice Aggregates user balances **prior** to executing the wrapped code\\n     */\\n    modifier updateBalance() {\\n        updateAggregateBalance(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyUnpaused() {\\n        require(!paused, \\\"Pool is paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check invariants before function body only. This is used in functions where the state of the pool is updated after exiting PoolCommitter (i.e. executeCommitments)\\n     */\\n    modifier checkInvariantsBeforeFunction() {\\n        invariantCheck.checkInvariants(leveragedPool);\\n        require(!paused, \\\"Pool is paused\\\");\\n        _;\\n    }\\n\\n    modifier checkInvariantsAfterFunction() {\\n        require(!paused, \\\"Pool is paused\\\");\\n        _;\\n        invariantCheck.checkInvariants(leveragedPool);\\n        require(!paused, \\\"Pool is paused\\\");\\n    }\\n\\n    modifier onlyInvariantCheckContract() {\\n        require(msg.sender == invariantCheckContract, \\\"msg.sender not invariantCheckContract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Asserts that the caller is the associated `PoolFactory` contract\\n     */\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"Committer: not factory\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Asserts that the caller is the associated `LeveragedPool` contract\\n     */\\n    modifier onlyPool() {\\n        require(msg.sender == leveragedPool, \\\"msg.sender not leveragedPool\\\");\\n        _;\\n    }\\n\\n    modifier onlyAutoClaimOrCommitter(address user) {\\n        require(msg.sender == user || msg.sender == address(autoClaim), \\\"msg.sender not committer or AutoClaim\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b6e098a99b47ef95992c457ab89db2255d994b0847852b5bbec6f8f00fab92e\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolFactory.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/IERC20DecimalsWrapper.sol\\\";\\nimport \\\"../interfaces/IAutoClaim.sol\\\";\\nimport \\\"./LeveragedPool.sol\\\";\\nimport \\\"./PoolToken.sol\\\";\\nimport \\\"./PoolKeeper.sol\\\";\\nimport \\\"./PoolCommitter.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title The pool factory contract\\ncontract PoolFactory is IPoolFactory, Ownable {\\n    // #### Globals\\n    PoolToken public pairTokenBase;\\n    address public immutable pairTokenBaseAddress;\\n    LeveragedPool public poolBase;\\n    address public immutable poolBaseAddress;\\n    IPoolKeeper public poolKeeper;\\n    PoolCommitter public poolCommitterBase;\\n    address public immutable poolCommitterBaseAddress;\\n\\n    address public autoClaim;\\n\\n    // Contract address to receive protocol fees\\n    address public feeReceiver;\\n    // Default fee, annualised; Fee value as a decimal multiplied by 10^18. For example, 50% is represented as 0.5 * 10^18\\n    uint256 public fee;\\n    // Percent of fees that go to secondary fee address if applicable.\\n    uint256 public secondaryFeeSplitPercent = 10;\\n    // The fee taken for each mint and burn. Fee value as a decimal multiplied by 10^18. For example, 50% is represented as 0.5 * 10^18\\n    uint256 public mintingFee;\\n    uint256 public burningFee;\\n\\n    // This is required because we must pass along *some* value for decimal\\n    // precision to the base pool tokens as we use the Cloneable pattern\\n    uint8 constant DEFAULT_NUM_DECIMALS = 18;\\n    uint8 constant MAX_DECIMALS = DEFAULT_NUM_DECIMALS;\\n    // Default max leverage of 10\\n    uint16 public maxLeverage = 10;\\n\\n    /**\\n     * @notice Format: Pool counter => pool address\\n     */\\n    mapping(uint256 => address) public override pools;\\n    uint256 public override numPools;\\n\\n    /**\\n     * @notice Format: Pool address => validity\\n     */\\n    mapping(address => bool) public override isValidPool;\\n\\n    /**\\n     * @notice Format: PoolCommitter address => validity\\n     */\\n    mapping(address => bool) public override isValidPoolCommitter;\\n\\n    // #### Functions\\n    constructor(address _feeReceiver) {\\n        require(_feeReceiver != address(0), \\\"Address cannot be null\\\");\\n\\n        // Deploy base contracts\\n        pairTokenBase = new PoolToken(DEFAULT_NUM_DECIMALS);\\n        pairTokenBaseAddress = address(pairTokenBase);\\n        poolBase = new LeveragedPool();\\n        poolBaseAddress = address(poolBase);\\n        poolCommitterBase = new PoolCommitter(address(this), address(this), address(this), 0, 0);\\n        poolCommitterBaseAddress = address(poolCommitterBase);\\n\\n        ILeveragedPool.Initialization memory baseInitialization = ILeveragedPool.Initialization(\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            address(this),\\n            \\\"BASE_POOL\\\",\\n            15,\\n            30,\\n            0,\\n            1,\\n            address(this),\\n            address(0),\\n            address(this),\\n            secondaryFeeSplitPercent\\n        );\\n        // Init bases\\n        poolBase.initialize(baseInitialization);\\n        pairTokenBase.initialize(address(this), \\\"BASE_TOKEN\\\", \\\"BASE\\\", DEFAULT_NUM_DECIMALS);\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /**\\n     * @notice Deploy a leveraged pool and its committer/pool tokens with given parameters\\n     * @param deploymentParameters Deployment parameters of the market. Some may be reconfigurable.\\n     * @return Address of the created pool\\n     * @dev Throws if pool keeper is null\\n     * @dev Throws if deployer does not own the oracle wrapper\\n     * @dev Throws if leverage amount is invalid\\n     * @dev Throws if decimal precision is too high (i.e., greater than `MAX_DECIMALS`)\\n     */\\n    function deployPool(PoolDeployment calldata deploymentParameters) external override returns (address) {\\n        address _poolKeeper = address(poolKeeper);\\n        require(_poolKeeper != address(0), \\\"PoolKeeper not set\\\");\\n        require(\\n            IOracleWrapper(deploymentParameters.oracleWrapper).deployer() == msg.sender,\\n            \\\"Deployer must be oracle wrapper owner\\\"\\n        );\\n\\n        bytes32 uniquePoolHash = keccak256(\\n            abi.encode(\\n                deploymentParameters.leverageAmount,\\n                deploymentParameters.quoteToken,\\n                deploymentParameters.oracleWrapper\\n            )\\n        );\\n\\n        PoolCommitter poolCommitter = PoolCommitter(\\n            Clones.cloneDeterministic(poolCommitterBaseAddress, uniquePoolHash)\\n        );\\n        poolCommitter.initialize(\\n            address(this),\\n            deploymentParameters.invariantCheckContract,\\n            autoClaim,\\n            mintingFee,\\n            burningFee\\n        );\\n        address poolCommitterAddress = address(poolCommitter);\\n\\n        require(\\n            deploymentParameters.leverageAmount >= 1 && deploymentParameters.leverageAmount <= maxLeverage,\\n            \\\"PoolKeeper: leveraged amount invalid\\\"\\n        );\\n        require(\\n            IERC20DecimalsWrapper(deploymentParameters.quoteToken).decimals() <= MAX_DECIMALS,\\n            \\\"Decimal precision too high\\\"\\n        );\\n\\n        LeveragedPool pool = LeveragedPool(Clones.cloneDeterministic(poolBaseAddress, uniquePoolHash));\\n        address _pool = address(pool);\\n        emit DeployPool(_pool, poolCommitterAddress, deploymentParameters.poolName);\\n\\n        string memory leverage = Strings.toString(deploymentParameters.leverageAmount);\\n\\n        ILeveragedPool.Initialization memory initialization = ILeveragedPool.Initialization({\\n            _owner: owner(), // governance is the owner of pools -- if this changes, `onlyGov` breaks\\n            _keeper: _poolKeeper,\\n            _oracleWrapper: deploymentParameters.oracleWrapper,\\n            _settlementEthOracle: deploymentParameters.settlementEthOracle,\\n            _longToken: deployPairToken(_pool, leverage, deploymentParameters, \\\"L-\\\"),\\n            _shortToken: deployPairToken(_pool, leverage, deploymentParameters, \\\"S-\\\"),\\n            _poolCommitter: poolCommitterAddress,\\n            _invariantCheckContract: deploymentParameters.invariantCheckContract,\\n            _poolName: string(abi.encodePacked(leverage, \\\"-\\\", deploymentParameters.poolName)),\\n            _frontRunningInterval: deploymentParameters.frontRunningInterval,\\n            _updateInterval: deploymentParameters.updateInterval,\\n            _fee: (fee * deploymentParameters.updateInterval) / (365 days),\\n            _leverageAmount: deploymentParameters.leverageAmount,\\n            _feeAddress: feeReceiver,\\n            _secondaryFeeAddress: msg.sender,\\n            _quoteToken: deploymentParameters.quoteToken,\\n            _secondaryFeeSplitPercent: secondaryFeeSplitPercent\\n        });\\n\\n        // approve the quote token on the pool committer to finalise linking\\n        // this also stores the pool address in the committer\\n        // finalise pool setup\\n        pool.initialize(initialization);\\n        // approve the quote token on the pool commiter to finalise linking\\n        // this also stores the pool address in the commiter\\n        IPoolCommitter(poolCommitterAddress).setQuoteAndPool(deploymentParameters.quoteToken, _pool);\\n        poolKeeper.newPool(_pool);\\n        pools[numPools] = _pool;\\n        numPools += 1;\\n        isValidPool[_pool] = true;\\n        isValidPoolCommitter[poolCommitterAddress] = true;\\n        return _pool;\\n    }\\n\\n    /**\\n     * @notice Deploy a contract for pool tokens\\n     * @param leverage Amount of leverage for pool\\n     * @param deploymentParameters Deployment parameters for parent function\\n     * @param direction Long or short token, L- or S-\\n     * @return Address of the pool token\\n     */\\n    function deployPairToken(\\n        address owner,\\n        string memory leverage,\\n        PoolDeployment memory deploymentParameters,\\n        string memory direction\\n    ) internal returns (address) {\\n        string memory poolNameAndSymbol = string(abi.encodePacked(leverage, direction, deploymentParameters.poolName));\\n        uint8 settlementDecimals = IERC20DecimalsWrapper(deploymentParameters.quoteToken).decimals();\\n        bytes32 uniqueTokenHash = keccak256(\\n            abi.encode(\\n                deploymentParameters.leverageAmount,\\n                deploymentParameters.quoteToken,\\n                deploymentParameters.oracleWrapper,\\n                direction\\n            )\\n        );\\n\\n        PoolToken pairToken = PoolToken(Clones.cloneDeterministic(pairTokenBaseAddress, uniqueTokenHash));\\n        pairToken.initialize(owner, poolNameAndSymbol, poolNameAndSymbol, settlementDecimals);\\n        return address(pairToken);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the associated `PoolKeeper` contract\\n     * @param _poolKeeper Address of the `PoolKeeper`\\n     * @dev Throws if provided address is null\\n     * @dev Only callable by the owner\\n     */\\n    function setPoolKeeper(address _poolKeeper) external override onlyOwner {\\n        require(_poolKeeper != address(0), \\\"address cannot be null\\\");\\n        poolKeeper = IPoolKeeper(_poolKeeper);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the associated `AutoClaim` contract\\n     * @param _autoClaim Address of the `AutoClaim`\\n     * @dev Throws if provided address is null\\n     * @dev Only callable by the owner\\n     */\\n    function setAutoClaim(address _autoClaim) external override onlyOwner {\\n        require(_autoClaim != address(0), \\\"address cannot be null\\\");\\n        autoClaim = _autoClaim;\\n    }\\n\\n    /**\\n     * @notice Sets the maximum leverage\\n     * @param newMaxLeverage Maximum leverage permitted for all pools\\n     * @dev Throws if provided maximum leverage is non-positive\\n     * @dev Only callable by the owner\\n     */\\n    function setMaxLeverage(uint16 newMaxLeverage) external override onlyOwner {\\n        require(newMaxLeverage > 0, \\\"Maximum leverage must be non-zero\\\");\\n        maxLeverage = newMaxLeverage;\\n    }\\n\\n    /**\\n     * @notice Sets the primary fee receiver of deployed Leveraged pools.\\n     * @param _feeReceiver address of fee receiver\\n     * @dev Only callable by the owner of this contract\\n     * @dev This fuction does not change anything for already deployed pools, only pools deployed after the change\\n     */\\n    function setFeeReceiver(address _feeReceiver) external override onlyOwner {\\n        require(_feeReceiver != address(0), \\\"address cannot be null\\\");\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /**\\n     * @notice Sets the proportion of fees to be split to the nominated secondary fees recipient\\n     * @param newFeePercent Proportion of fees to split\\n     * @dev Only callable by the owner of this contract\\n     * @dev Throws if `newFeePercent` exceeds 100\\n     */\\n    function setSecondaryFeeSplitPercent(uint256 newFeePercent) external override onlyOwner {\\n        require(newFeePercent <= 100, \\\"Secondary fee split cannot exceed 100%\\\");\\n        secondaryFeeSplitPercent = newFeePercent;\\n    }\\n\\n    /**\\n     * @notice Set the yearly fee amount. The max yearly fee is 10%\\n     * @dev This is a percentage in WAD; multiplied by 10^18 e.g. 5% is 0.05 * 10^18\\n     * @param _fee The fee amount as a percentage\\n     * @dev Throws if fee is greater than 10%\\n     */\\n    function setFee(uint256 _fee) external override onlyOwner {\\n        require(_fee <= 0.1e18, \\\"Fee cannot be > 10%\\\");\\n        fee = _fee;\\n    }\\n\\n    /**\\n     * @notice Set the minting and burning fee amount. The max yearly fee is 10%\\n     * @dev This is a percentage in WAD; multiplied by 10^18 e.g. 5% is 0.05 * 10^18\\n     * @param _mintingFee The fee amount for mints\\n     * @param _burningFee The fee amount for burns\\n     * @dev Only callable by the owner of this contract\\n     * @dev Throws if minting fee is greater than 10%\\n     * @dev Throws if burning fee is greater than 10%\\n     */\\n    function setMintAndBurnFee(uint256 _mintingFee, uint256 _burningFee) external override onlyOwner {\\n        require(_mintingFee <= 0.1e18, \\\"Fee cannot be > 10%\\\");\\n        require(_burningFee <= 0.1e18, \\\"Fee cannot be > 10%\\\");\\n        mintingFee = _mintingFee;\\n        burningFee = _burningFee;\\n    }\\n\\n    /*\\n     * @notice Returns the address that owns this contract\\n     * @return Address of the owner\\n     * @dev Required due to the `IPoolFactory` interface\\n     */\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @notice Ensures that the caller is the designated governance address\\n     */\\n    modifier onlyGov() {\\n        require(msg.sender == owner(), \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcc31f3a7ce31f1ba5207e8124172fa68ff68232d54284046038f921df3f829eb\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolKeeper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolKeeper.sol\\\";\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../implementation/PriceObserver.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IERC20DecimalsWrapper.sol\\\";\\nimport \\\"./PoolSwapLibrary.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\n\\n/// @title The manager contract for multiple markets and the pools in them\\ncontract PoolKeeper is IPoolKeeper, Ownable {\\n    /* Constants */\\n    uint256 public constant BASE_TIP = 5; // 5% base tip\\n    uint256 public constant TIP_DELTA_PER_BLOCK = 5; // 5% increase per block\\n    uint256 public constant BLOCK_TIME = 13; /* in seconds */\\n    uint256 public constant MAX_DECIMALS = 18;\\n    uint256 public constant MAX_TIP = 100; /* maximum keeper tip */\\n\\n    // #### Global variables\\n    /**\\n     * @notice Format: Pool address => last executionPrice\\n     */\\n    mapping(address => int256) public executionPrice;\\n\\n    IPoolFactory public factory;\\n    bytes16 constant fixedPoint = 0x403abc16d674ec800000000000000000; // 1 ether\\n\\n    uint256 public gasPrice = 10 gwei;\\n    address public observer = address(0);\\n\\n    // #### Functions\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"Factory cannot be 0 address\\\");\\n        factory = IPoolFactory(_factory);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the associated `PriceObserver` contract\\n     * @param _observer Address of the `PriceObserver` contract\\n     * @dev Throws if provided address is null\\n     */\\n    function setPriceObserver(address _observer) external onlyOwner {\\n        require(_observer != address(0), \\\"Price observer cannot be 0 address\\\");\\n        observer = _observer;\\n    }\\n\\n    /**\\n     * @notice When a pool is created, this function is called by the factory to initiate price trackings\\n     * @param _poolAddress The address of the newly-created pools\\n     * @dev Only callable by the associated `PoolFactory` contract\\n     */\\n    function newPool(address _poolAddress) external override onlyFactory {\\n        address oracleWrapper = ILeveragedPool(_poolAddress).oracleWrapper();\\n        int256 firstPrice = IOracleWrapper(oracleWrapper).getPrice();\\n        require(firstPrice > 0, \\\"First price is non-positive\\\");\\n        int256 startingPrice = ABDKMathQuad.toInt(ABDKMathQuad.mul(ABDKMathQuad.fromInt(firstPrice), fixedPoint));\\n        emit PoolAdded(_poolAddress, firstPrice);\\n        executionPrice[_poolAddress] = startingPrice;\\n    }\\n\\n    /**\\n     * @notice Check if upkeep is required\\n     * @param _pool The address of the pool to upkeep\\n     * @return Whether or not upkeep is needed for this single pool\\n     */\\n    function checkUpkeepSinglePool(address _pool) public view override returns (bool) {\\n        if (!factory.isValidPool(_pool)) {\\n            return false;\\n        }\\n\\n        // The update interval has passed\\n        return ILeveragedPool(_pool).intervalPassed();\\n    }\\n\\n    /**\\n     * @notice Checks multiple pools if any of them need updating\\n     * @param _pools Array of pools to check\\n     * @return Whether or not at least one pool needs upkeeping\\n     * @dev Iterates over the provided array of pool addresses\\n     */\\n    function checkUpkeepMultiplePools(address[] calldata _pools) external view override returns (bool) {\\n        uint256 poolsLength = _pools.length;\\n        for (uint256 i = 0; i < poolsLength; i++) {\\n            if (checkUpkeepSinglePool(_pools[i])) {\\n                // One has been found that requires upkeeping\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Called by keepers to perform an update on a single pool\\n     * @param _pool Address of the pool to be upkept\\n     * @dev Induces an update of the associated `PriceObserver` contract\\n     * @dev Tracks gas usage via `gasleft` accounting and uses this to inform\\n     *          keeper payment\\n     * @dev Catches any failure of the underlying `pool.poolUpkeep` call\\n     */\\n    function performUpkeepSinglePool(address _pool) public override {\\n        uint256 startGas = gasleft();\\n\\n        // validate the pool, check that the interval time has passed\\n        if (!checkUpkeepSinglePool(_pool)) {\\n            return;\\n        }\\n\\n        ILeveragedPool pool = ILeveragedPool(_pool);\\n\\n        /* update SMA oracle */\\n        PriceObserver priceObserver = PriceObserver(observer);\\n        IOracleWrapper priceObserverWriter = IOracleWrapper(priceObserver.getWriter());\\n        priceObserverWriter.poll();\\n\\n        (int256 latestPrice, bytes memory data, uint256 savedPreviousUpdatedTimestamp, uint256 updateInterval) = pool\\n            .getUpkeepInformation();\\n\\n        // Start a new round\\n        // Get price in WAD format\\n        int256 lastExecutionPrice = executionPrice[_pool];\\n        executionPrice[_pool] = latestPrice;\\n\\n        // This allows us to still batch multiple calls to executePriceChange, even if some are invalid\\n        // Without reverting the entire transaction\\n        try pool.poolUpkeep(lastExecutionPrice, latestPrice) {\\n            // If poolUpkeep is successful, refund the keeper for their gas costs\\n            uint256 gasSpent = startGas - gasleft();\\n\\n            payKeeper(_pool, gasPrice, gasSpent, savedPreviousUpdatedTimestamp, updateInterval);\\n            emit UpkeepSuccessful(_pool, data, lastExecutionPrice, latestPrice);\\n        } catch Error(string memory reason) {\\n            // If poolUpkeep fails for any other reason, emit event\\n            emit PoolUpkeepError(_pool, reason);\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by keepers to perform an update on multiple pools\\n     * @param pools Addresses of each pool to upkeep\\n     * @dev Iterates over the provided array\\n     * @dev Essentially wraps calls to `performUpkeepSinglePool`\\n     */\\n    function performUpkeepMultiplePools(address[] calldata pools) external override {\\n        uint256 poolsLength = pools.length;\\n        for (uint256 i = 0; i < poolsLength; i++) {\\n            performUpkeepSinglePool(pools[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pay keeper for upkeep\\n     * @param _pool Address of the given pool\\n     * @param _gasPrice Price of a single gas unit (in ETH (wei))\\n     * @param _gasSpent Number of gas units spent\\n     * @param _savedPreviousUpdatedTimestamp Last timestamp when the pool's price execution happened\\n     * @param _updateInterval Pool interval of the given pool\\n     * @dev Emits a `KeeperPaid` event if the underlying call to `pool.payKeeperFromBalances` succeeds\\n     * @dev Emits a `KeeperPaymentError` event otherwise\\n     */\\n    function payKeeper(\\n        address _pool,\\n        uint256 _gasPrice,\\n        uint256 _gasSpent,\\n        uint256 _savedPreviousUpdatedTimestamp,\\n        uint256 _updateInterval\\n    ) internal {\\n        uint256 reward = keeperReward(_pool, _gasPrice, _gasSpent, _savedPreviousUpdatedTimestamp, _updateInterval);\\n        if (ILeveragedPool(_pool).payKeeperFromBalances(msg.sender, reward)) {\\n            emit KeeperPaid(_pool, msg.sender, reward);\\n        } else {\\n            // Usually occurs if pool just started and does not have any funds\\n            emit KeeperPaymentError(_pool, msg.sender, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Payment keeper receives for performing upkeep on a given pool\\n     * @param _pool Address of the given pool\\n     * @param _gasPrice Price of a single gas unit (in ETH (wei))\\n     * @param _gasSpent Number of gas units spent\\n     * @param _savedPreviousUpdatedTimestamp Last timestamp when the pool's price execution happened\\n     * @param _poolInterval Pool interval of the given pool\\n     * @return Number of settlement tokens to give to the keeper for work performed\\n     */\\n    function keeperReward(\\n        address _pool,\\n        uint256 _gasPrice,\\n        uint256 _gasSpent,\\n        uint256 _savedPreviousUpdatedTimestamp,\\n        uint256 _poolInterval\\n    ) public view returns (uint256) {\\n        /**\\n         * Conceptually, we have\\n         *\\n         * Reward = Gas + Tip = Gas + (Base + Premium * Blocks)\\n         *\\n         * Very roughly to scale:\\n         *\\n         * +---------------------------+------+---+---+~~~~~\\n         * | GGGGGGGGGGGGGGGGGGGGGGGGG | BBBB | P | P | ...\\n         * +---------------------------+------+---+---+~~~~~\\n         *\\n         * Under normal circumstances, we don't expect there to be any time\\n         * premium at all. The time premium exists in order to *further*\\n         * incentivise upkeep in the event of lateness.\\n         *\\n         * The base tip exists to act as pure profit for a keeper.\\n         *\\n         * Of course, the gas component acts as compensation for performing\\n         * on-chain computation.\\n         *\\n         */\\n\\n        // keeper gas cost in wei. WAD formatted\\n        uint256 _keeperGas = keeperGas(_pool, _gasPrice, _gasSpent);\\n\\n        // tip percent in wad units\\n        bytes16 _tipPercent = ABDKMathQuad.fromUInt(keeperTip(_savedPreviousUpdatedTimestamp, _poolInterval));\\n\\n        // amount of settlement tokens to give to the keeper\\n        _tipPercent = ABDKMathQuad.div(_tipPercent, ABDKMathQuad.fromUInt(100));\\n        int256 wadRewardValue = ABDKMathQuad.toInt(\\n            ABDKMathQuad.add(\\n                ABDKMathQuad.fromUInt(_keeperGas),\\n                ABDKMathQuad.div((ABDKMathQuad.mul(ABDKMathQuad.fromUInt(_keeperGas), _tipPercent)), fixedPoint)\\n            )\\n        );\\n        uint256 decimals = IERC20DecimalsWrapper(ILeveragedPool(_pool).quoteToken()).decimals();\\n        uint256 deWadifiedReward = PoolSwapLibrary.fromWad(uint256(wadRewardValue), decimals);\\n        // _keeperGas + _keeperGas * percentTip\\n        return deWadifiedReward;\\n    }\\n\\n    /**\\n     * @notice Compensation a keeper will receive for their gas expenditure\\n     * @param _pool Address of the given pool\\n     * @param _gasPrice Price of a single gas unit (in ETH (wei))\\n     * @param _gasSpent Number of gas units spent\\n     * @return Keeper's gas compensation\\n     */\\n    function keeperGas(\\n        address _pool,\\n        uint256 _gasPrice,\\n        uint256 _gasSpent\\n    ) public view returns (uint256) {\\n        int256 settlementTokenPrice = IOracleWrapper(ILeveragedPool(_pool).settlementEthOracle()).getPrice();\\n\\n        if (settlementTokenPrice <= 0) {\\n            return 0;\\n        } else {\\n            /* safe due to explicit bounds check above */\\n            /* (wei * Settlement / ETH) / fixed point (10^18) = amount in settlement */\\n            bytes16 _weiSpent = ABDKMathQuad.fromUInt(_gasPrice * _gasSpent);\\n            bytes16 _settlementTokenPrice = ABDKMathQuad.fromUInt(uint256(settlementTokenPrice));\\n            return\\n                ABDKMathQuad.toUInt(ABDKMathQuad.div(ABDKMathQuad.mul(_weiSpent, _settlementTokenPrice), fixedPoint));\\n        }\\n    }\\n\\n    /**\\n     * @notice Tip a keeper will receive for successfully updating the specified pool\\n     * @param _savedPreviousUpdatedTimestamp Last timestamp when the pool's price execution happened\\n     * @param _poolInterval Pool interval of the given pool\\n     * @return Percent of the `keeperGas` cost to add to payment, as a percent\\n     */\\n    function keeperTip(uint256 _savedPreviousUpdatedTimestamp, uint256 _poolInterval) public view returns (uint256) {\\n        /* the number of blocks that have elapsed since the given pool's updateInterval passed */\\n        uint256 elapsedBlocksNumerator = (block.timestamp - (_savedPreviousUpdatedTimestamp + _poolInterval));\\n\\n        uint256 keeperTip = BASE_TIP + (TIP_DELTA_PER_BLOCK * elapsedBlocksNumerator) / BLOCK_TIME;\\n\\n        // In case of network outages or otherwise, we want to cap the tip so that the keeper cost isn't unbounded\\n        if (keeperTip > MAX_TIP) {\\n            return MAX_TIP;\\n        } else {\\n            return keeperTip;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address of the associated `PoolFactory` contract\\n     * @param _factory Address of the `PoolFactory` contract\\n     * @dev Only callable by the owner\\n     */\\n    function setFactory(address _factory) external override onlyOwner {\\n        factory = IPoolFactory(_factory);\\n    }\\n\\n    /**\\n     * @notice Sets the gas price to be used in compensating keepers for successful upkeep\\n     * @param _price Price (in ETH) per unit gas\\n     * @dev Only callable by the owner\\n     * @dev This function is only necessary due to the L2 deployment of Pools -- in reality, it should be `BASEFEE`\\n     */\\n    function setGasPrice(uint256 _price) external onlyOwner {\\n        gasPrice = _price;\\n    }\\n\\n    /**\\n     * @notice Ensures that the caller is the associated `PoolFactory` contract\\n     */\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"Caller not factory\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x27d6cb04f7446fb515e33a41fda47f6a6fce154f648ed14b1ad334a2f1019069\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolSwapLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\n\\n/// @title Library for various useful (mostly) mathematical functions\\nlibrary PoolSwapLibrary {\\n    /// ABDKMathQuad-formatted representation of the number one\\n    bytes16 public constant one = 0x3fff0000000000000000000000000000;\\n\\n    /// Maximum number of decimal places supported by this contract\\n    /// (ABDKMathQuad defines this but it's private)\\n    uint256 public constant MAX_DECIMALS = 18;\\n\\n    /// Maximum precision supportable via wad arithmetic (for this contract)\\n    uint256 public constant WAD_PRECISION = 10**18;\\n\\n    /// Information required to update a given user's aggregated balance\\n    struct UpdateData {\\n        bytes16 longPrice;\\n        bytes16 shortPrice;\\n        uint256 currentUpdateIntervalId;\\n        uint256 updateIntervalId;\\n        uint256 longMintAmount;\\n        uint256 longBurnAmount;\\n        uint256 shortMintAmount;\\n        uint256 shortBurnAmount;\\n        uint256 longBurnShortMintAmount;\\n        uint256 shortBurnLongMintAmount;\\n        bytes16 burnFee;\\n    }\\n\\n    /// Information required to perform a price change (of the underlying asset)\\n    struct PriceChangeData {\\n        int256 oldPrice;\\n        int256 newPrice;\\n        uint256 longBalance;\\n        uint256 shortBalance;\\n        bytes16 leverageAmount;\\n        bytes16 fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the ratio between two numbers\\n     * @dev Rounds any overflow towards 0. If either parameter is zero, the ratio is 0\\n     * @param _numerator The \\\"parts per\\\" side of the equation. If this is zero, the ratio is zero\\n     * @param _denominator The \\\"per part\\\" side of the equation. If this is zero, the ratio is zero\\n     * @return the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)\\n     */\\n    function getRatio(uint256 _numerator, uint256 _denominator) public pure returns (bytes16) {\\n        // Catch the divide by zero error.\\n        if (_denominator == 0) {\\n            return 0;\\n        }\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(_numerator), ABDKMathQuad.fromUInt(_denominator));\\n    }\\n\\n    /**\\n     * @notice Gets the short and long balances after the keeper rewards have been paid out\\n     *         Keeper rewards are paid proportionally to the short and long pool\\n     * @dev Assumes shortBalance + longBalance >= reward\\n     * @param reward Amount of keeper reward\\n     * @param shortBalance Short balance of the pool\\n     * @param longBalance Long balance of the pool\\n     * @return shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid\\n     * @return longBalanceAfterFees Long balance of the pool after the keeper reward has been paid\\n     */\\n    function getBalancesAfterFees(\\n        uint256 reward,\\n        uint256 shortBalance,\\n        uint256 longBalance\\n    ) external pure returns (uint256, uint256) {\\n        bytes16 ratioShort = getRatio(shortBalance, shortBalance + longBalance);\\n\\n        uint256 shortFees = convertDecimalToUInt(multiplyDecimalByUInt(ratioShort, reward));\\n\\n        uint256 shortBalanceAfterFees = shortBalance - shortFees;\\n        uint256 longBalanceAfterFees = longBalance - (reward - shortFees);\\n\\n        // Return shortBalance and longBalance after rewards are paid out\\n        return (shortBalanceAfterFees, longBalanceAfterFees);\\n    }\\n\\n    /**\\n     * @notice Compares two decimal numbers\\n     * @param x The first number to compare\\n     * @param y The second number to compare\\n     * @return -1 if x < y, 0 if x = y, or 1 if x > y\\n     */\\n    function compareDecimals(bytes16 x, bytes16 y) public pure returns (int8) {\\n        return ABDKMathQuad.cmp(x, y);\\n    }\\n\\n    /**\\n     * @notice Converts an integer value to a compatible decimal value\\n     * @param amount The amount to convert\\n     * @return The amount as a IEEE754 quadruple precision number\\n     */\\n    function convertUIntToDecimal(uint256 amount) external pure returns (bytes16) {\\n        return ABDKMathQuad.fromUInt(amount);\\n    }\\n\\n    /**\\n     * @notice Converts a raw decimal value to a more readable uint256 value\\n     * @param ratio The value to convert\\n     * @return The converted value\\n     */\\n    function convertDecimalToUInt(bytes16 ratio) public pure returns (uint256) {\\n        return ABDKMathQuad.toUInt(ratio);\\n    }\\n\\n    /**\\n     * @notice Multiplies a decimal and an unsigned integer\\n     * @param a The first term\\n     * @param b The second term\\n     * @return The product of a*b as a decimal\\n     */\\n    function multiplyDecimalByUInt(bytes16 a, uint256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.mul(a, ABDKMathQuad.fromUInt(b));\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers\\n     * @param a The dividend\\n     * @param b The divisor\\n     * @return The quotient\\n     */\\n    function divUInt(uint256 a, uint256 b) private pure returns (bytes16) {\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(a), ABDKMathQuad.fromUInt(b));\\n    }\\n\\n    /**\\n     * @notice Divides two integers\\n     * @param a The dividend\\n     * @param b The divisor\\n     * @return The quotient\\n     */\\n    function divInt(int256 a, int256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.div(ABDKMathQuad.fromInt(a), ABDKMathQuad.fromInt(b));\\n    }\\n\\n    /**\\n     * @notice Multiply an integer by a fraction\\n     * @return The result as an integer\\n     */\\n    function mulFraction(\\n        uint256 number,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public pure returns (uint256) {\\n        if (denominator == 0) {\\n            return 0;\\n        }\\n        bytes16 multiplyResult = ABDKMathQuad.mul(ABDKMathQuad.fromUInt(number), ABDKMathQuad.fromUInt(numerator));\\n        bytes16 result = ABDKMathQuad.div(multiplyResult, ABDKMathQuad.fromUInt(denominator));\\n        return convertDecimalToUInt(result);\\n    }\\n\\n    /**\\n     * @notice Calculates the loss multiplier to apply to the losing pool. Includes the power leverage\\n     * @param ratio The ratio of new price to old price\\n     * @param direction The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased\\n     * @param leverage The amount of leverage to apply\\n     * @return The multiplier\\n     */\\n    function getLossMultiplier(\\n        bytes16 ratio,\\n        int8 direction,\\n        bytes16 leverage\\n    ) public pure returns (bytes16) {\\n        // If decreased:  2 ^ (leverage * log2[(1 * new/old) + [(0 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2[(new/old)])\\n        // If increased:  2 ^ (leverage * log2[(0 * new/old) + [(1 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2([1 / new/old]))\\n        //              = 2 ^ (leverage * log2([old/new]))\\n        return\\n            ABDKMathQuad.pow_2(\\n                ABDKMathQuad.mul(leverage, ABDKMathQuad.log_2(direction < 0 ? ratio : ABDKMathQuad.div(one, ratio)))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to take from the losing pool\\n     * @param lossMultiplier The multiplier to use\\n     * @param balance The balance of the losing pool\\n     */\\n    function getLossAmount(bytes16 lossMultiplier, uint256 balance) public pure returns (uint256) {\\n        return\\n            ABDKMathQuad.toUInt(\\n                ABDKMathQuad.mul(ABDKMathQuad.sub(one, lossMultiplier), ABDKMathQuad.fromUInt(balance))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other.\\n     * @dev This function should be called by the LeveragedPool.\\n     * @param priceChange The struct containing necessary data to calculate price change\\n     * @return Resulting long balance\\n     * @return Resulting short balance\\n     * @return Total fees (across both long and short sides) resulting from this price change\\n     */\\n    function calculatePriceChange(PriceChangeData calldata priceChange)\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 shortBalance = priceChange.shortBalance;\\n        uint256 longBalance = priceChange.longBalance;\\n        bytes16 leverageAmount = priceChange.leverageAmount;\\n        int256 oldPrice = priceChange.oldPrice;\\n        int256 newPrice = priceChange.newPrice;\\n        bytes16 fee = priceChange.fee;\\n\\n        // Calculate fees from long and short sides\\n        uint256 longFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, longBalance)) /\\n            PoolSwapLibrary.WAD_PRECISION;\\n        uint256 shortFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, shortBalance)) /\\n            PoolSwapLibrary.WAD_PRECISION;\\n\\n        shortBalance = shortBalance - shortFeeAmount;\\n        longBalance = longBalance - longFeeAmount;\\n        uint256 totalFeeAmount = shortFeeAmount + longFeeAmount;\\n\\n        // Use the ratio to determine if the price increased or decreased and therefore which direction\\n        // the funds should be transferred towards.\\n\\n        bytes16 ratio = divInt(newPrice, oldPrice);\\n        int8 direction = compareDecimals(ratio, PoolSwapLibrary.one);\\n        // Take into account the leverage\\n        bytes16 lossMultiplier = getLossMultiplier(ratio, direction, leverageAmount);\\n\\n        if (direction >= 0 && shortBalance > 0) {\\n            // Move funds from short to long pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, shortBalance);\\n            shortBalance = shortBalance - lossAmount;\\n            longBalance = longBalance + lossAmount;\\n        } else if (direction < 0 && longBalance > 0) {\\n            // Move funds from long to short pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, longBalance);\\n            shortBalance = shortBalance + lossAmount;\\n            longBalance = longBalance - lossAmount;\\n        }\\n\\n        return (longBalance, shortBalance, totalFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns true if the given timestamp is BEFORE the frontRunningInterval starts,\\n     *         which is allowed for uncommitment.\\n     * @dev If you try to uncommit AFTER the frontRunningInterval, it should revert.\\n     * @param subjectTime The timestamp for which you want to calculate if it was beforeFrontRunningInterval\\n     * @param lastPriceTimestamp The timestamp of the last price update\\n     * @param updateInterval The interval between price updates\\n     * @param frontRunningInterval The window of time before a price udpate users can not uncommit or have their commit executed from\\n     */\\n    function isBeforeFrontRunningInterval(\\n        uint256 subjectTime,\\n        uint256 lastPriceTimestamp,\\n        uint256 updateInterval,\\n        uint256 frontRunningInterval\\n    ) public pure returns (bool) {\\n        return lastPriceTimestamp + updateInterval - frontRunningInterval > subjectTime;\\n    }\\n\\n    /**\\n     * @notice Calculates the update interval ID that a commitment should be placed in.\\n     * @param timestamp Current block.timestamp\\n     * @param lastPriceTimestamp The timestamp of the last price update\\n     * @param frontRunningInterval The frontrunning interval of a pool - The amount of time before an update interval that you must commit to get included in that update\\n     * @param updateInterval The frequency of a pool's updates\\n     * @param currentUpdateIntervalId The current update interval's ID\\n     * @dev Note that the timestamp parameter is required to be >= lastPriceTimestamp\\n     * @return The update interval ID in which a commit being made at time timestamp should be included\\n     */\\n    function appropriateUpdateIntervalId(\\n        uint256 timestamp,\\n        uint256 lastPriceTimestamp,\\n        uint256 frontRunningInterval,\\n        uint256 updateInterval,\\n        uint256 currentUpdateIntervalId\\n    ) external pure returns (uint256) {\\n        // Since lastPriceTimestamp <= block.timestamp, the below also confirms that timestamp >= block.timestamp\\n        require(timestamp >= lastPriceTimestamp, \\\"timestamp in the past\\\");\\n        if (frontRunningInterval <= updateInterval) {\\n            // This is the \\\"simple\\\" case where we either want the current update interval or the next one\\n            if (isBeforeFrontRunningInterval(timestamp, lastPriceTimestamp, updateInterval, frontRunningInterval)) {\\n                // We are before the frontRunning interval\\n                return currentUpdateIntervalId;\\n            } else {\\n                return currentUpdateIntervalId + 1;\\n            }\\n        } else {\\n            // frontRunningInterval > updateInterval\\n            // This is the generalised case, where it could be any number of update intervals in the future\\n            uint256 factorDifference = ABDKMathQuad.toUInt(divUInt(frontRunningInterval, updateInterval));\\n            uint256 timeOfNextAvailableInterval = lastPriceTimestamp + (updateInterval * (factorDifference + 1));\\n            // frontRunningInterval is factorDifference times larger than updateInterval\\n            uint256 minimumUpdateIntervalId = currentUpdateIntervalId + factorDifference;\\n            // but, if timestamp is still within minimumUpdateInterval's frontRunningInterval we need to go to the next one\\n            return\\n                timestamp + frontRunningInterval > timeOfNextAvailableInterval\\n                    ? minimumUpdateIntervalId + 1\\n                    : minimumUpdateIntervalId;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the number of settlement tokens to be withdrawn based on a pool token burn amount\\n     * @dev Calculates as `balance * amountIn / (tokenSupply + shadowBalance)\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of pool tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param shadowBalance Balance the shadow pool at time of mint\\n     * @return Number of settlement tokens to be withdrawn on a burn\\n     */\\n    function getWithdrawAmountOnBurn(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 shadowBalance\\n    ) external pure returns (uint256) {\\n        // Catch the divide by zero error, or return 0 if amountIn is 0\\n        if ((balance == 0) || (tokenSupply + shadowBalance == 0) || (amountIn == 0)) {\\n            return amountIn;\\n        }\\n        bytes16 numerator = ABDKMathQuad.mul(ABDKMathQuad.fromUInt(balance), ABDKMathQuad.fromUInt(amountIn));\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(numerator, ABDKMathQuad.fromUInt(tokenSupply + shadowBalance)));\\n    }\\n\\n    /**\\n     * @notice Gets the number of pool tokens to be minted based on existing tokens\\n     * @dev Calculated as (tokenSupply + shadowBalance) * amountIn / balance\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param shadowBalance Balance the shadow pool at time of mint\\n     * @return Number of pool tokens to be minted\\n     */\\n    function getMintAmount(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 shadowBalance\\n    ) external pure returns (uint256) {\\n        // Catch the divide by zero error, or return 0 if amountIn is 0\\n        if (balance == 0 || tokenSupply + shadowBalance == 0 || amountIn == 0) {\\n            return amountIn;\\n        }\\n\\n        bytes16 numerator = ABDKMathQuad.mul(\\n            ABDKMathQuad.fromUInt(tokenSupply + shadowBalance),\\n            ABDKMathQuad.fromUInt(amountIn)\\n        );\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(numerator, ABDKMathQuad.fromUInt(balance)));\\n    }\\n\\n    /**\\n     * @notice Get the Settlement/PoolToken price, in ABDK IEE754 precision\\n     * @dev Divide the side balance by the pool token's total supply\\n     * @param sideBalance no. of underlying collateral tokens on that side of the pool\\n     * @param tokenSupply Total supply of pool tokens\\n     */\\n    function getPrice(uint256 sideBalance, uint256 tokenSupply) external pure returns (bytes16) {\\n        if (tokenSupply == 0) {\\n            return one;\\n        }\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(sideBalance), ABDKMathQuad.fromUInt(tokenSupply));\\n    }\\n\\n    /**\\n     * @notice Calculates the number of pool tokens to mint, given some settlement token amount and a price\\n     * @param price Price of a pool token\\n     * @param amount Amount of settlement tokens being used to mint\\n     * @return Quantity of pool tokens to mint\\n     * @dev Throws if price is zero\\n     * @dev `getBurn()`\\n     */\\n    function getMint(bytes16 price, uint256 amount) public pure returns (uint256) {\\n        require(price != 0, \\\"price == 0\\\");\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.div(ABDKMathQuad.fromUInt(amount), price));\\n    }\\n\\n    /**\\n     * @notice Calculate the number of settlement tokens to burn, based on a price and an amount of pool tokens\\n     * @param price Price of a pool token\\n     * @param amount Amount of settlement tokens being used to burn\\n     * @return Quantity of pool tokens to burn\\n     * @dev amount * price, where amount is in PoolToken and price is in USD/PoolToken\\n     * @dev Throws if price is zero\\n     * @dev `getMint()`\\n     */\\n    function getBurn(bytes16 price, uint256 amount) public pure returns (uint256) {\\n        require(price != 0, \\\"price == 0\\\");\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.mul(ABDKMathQuad.fromUInt(amount), price));\\n    }\\n\\n    /**\\n     * @notice Calculate the number of pool tokens to mint, given some settlement token amount, a price, and a burn amount from other side for instant mint\\n     * @param price The price of a pool token\\n     * @param amount The amount of settlement tokens being used to mint\\n     * @param oppositePrice The price of the opposite side's pool token\\n     * @param amountBurnedInstantMint The amount of pool tokens that were burnt from the opposite side for an instant mint in this side\\n     * @return Quantity of pool tokens to mint\\n     * @dev Throws if price is zero\\n     */\\n    function getMintWithBurns(\\n        bytes16 price,\\n        bytes16 oppositePrice,\\n        uint256 amount,\\n        uint256 amountBurnedInstantMint\\n    ) public pure returns (uint256) {\\n        require(price != 0, \\\"price == 0\\\");\\n        if (amountBurnedInstantMint > 0) {\\n            // Calculate amount of settlement tokens generated from the burn.\\n            amount += getBurn(oppositePrice, amountBurnedInstantMint);\\n        }\\n        return getMint(price, amount);\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @param _wadValue wad number\\n     * @param _decimals Quantity of decimal places to support\\n     * @return Converted (non-WAD) value\\n     */\\n    function fromWad(uint256 _wadValue, uint256 _decimals) external pure returns (uint256) {\\n        uint256 scaler = 10**(MAX_DECIMALS - _decimals);\\n        return _wadValue / scaler;\\n    }\\n\\n    /**\\n     * @notice Calculate the change in a user's balance based on recent commit(s)\\n     * @param data Information needed for updating the balance including prices and recent commit amounts\\n     * @return _newLongTokens Quantity of additional long tokens the user would receive\\n     * @return _newShortTokens Quantity of additional short tokens the user would receive\\n     * @return _longBurnFee Quantity of settlement tokens taken as a fee from long burns\\n     * @return _shortBurnFee Quantity of settlement tokens taken as a fee from short burns\\n     * @return _newSettlementTokens Quantity of additional settlement tokens the user would receive\\n     */\\n    function getUpdatedAggregateBalance(UpdateData calldata data)\\n        external\\n        pure\\n        returns (\\n            uint256 _newLongTokens,\\n            uint256 _newShortTokens,\\n            uint256 _longBurnFee,\\n            uint256 _shortBurnFee,\\n            uint256 _newSettlementTokens\\n        )\\n    {\\n        if (data.updateIntervalId == data.currentUpdateIntervalId) {\\n            // Update interval has not passed: No change\\n            return (0, 0, 0, 0, 0);\\n        }\\n        uint256 longBurnResult; // The amount of settlement tokens to withdraw based on long token burn\\n        uint256 shortBurnResult; // The amount of settlement tokens to withdraw based on short token burn\\n        if (data.longMintAmount > 0 || data.shortBurnLongMintAmount > 0) {\\n            _newLongTokens = getMintWithBurns(\\n                data.longPrice,\\n                data.shortPrice,\\n                data.longMintAmount,\\n                data.shortBurnLongMintAmount\\n            );\\n        }\\n\\n        if (data.longBurnAmount > 0) {\\n            // Calculate the amount of settlement tokens earned from burning long tokens\\n            longBurnResult = getBurn(data.longPrice, data.longBurnAmount);\\n            // Calculate the fee\\n            _longBurnFee = convertDecimalToUInt(multiplyDecimalByUInt(data.burnFee, longBurnResult)) / WAD_PRECISION;\\n            // Subtract the fee from settlement token amount\\n            longBurnResult -= _longBurnFee;\\n        }\\n\\n        if (data.shortMintAmount > 0 || data.longBurnShortMintAmount > 0) {\\n            _newShortTokens = getMintWithBurns(\\n                data.shortPrice,\\n                data.longPrice,\\n                data.shortMintAmount,\\n                data.longBurnShortMintAmount\\n            );\\n        }\\n\\n        if (data.shortBurnAmount > 0) {\\n            // Calculate the amount of settlement tokens earned from burning short tokens\\n            shortBurnResult = getBurn(data.shortPrice, data.shortBurnAmount);\\n            // Calculate the fee\\n            _shortBurnFee = convertDecimalToUInt(multiplyDecimalByUInt(data.burnFee, shortBurnResult)) / WAD_PRECISION;\\n            // Subtract the fee from settlement token amount\\n            shortBurnResult -= _shortBurnFee;\\n        }\\n\\n        _newSettlementTokens = shortBurnResult + longBurnResult;\\n    }\\n}\\n\",\"keccak256\":\"0x64dd610a0ee51d6a1aa18ee018d6c498ae9524ffec2ca05797069d06cf35fa46\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PoolToken.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../vendors/ERC20_Cloneable.sol\\\";\\nimport \\\"../interfaces/IPoolToken.sol\\\";\\n\\n/// @title The pool token; used for ownership/shares of the underlying tokens of the long/short pool\\n/// @dev ERC_20_Cloneable contains onlyOwner code implemented for use with the cloneable setup\\ncontract PoolToken is ERC20_Cloneable, IPoolToken {\\n    // #### Global state\\n\\n    // #### Functions\\n\\n    constructor(uint8 _decimals) ERC20_Cloneable(\\\"BASE_TOKEN\\\", \\\"BASE\\\", _decimals) {}\\n\\n    /**\\n     * @notice Mints pool tokens\\n     * @param amount Pool tokens to burn\\n     * @param account Account to burn pool tokens to\\n     * @return Whether the mint was successful\\n     */\\n    function mint(uint256 amount, address account) external override onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burns pool tokens\\n     * @param amount Pool tokens to burn\\n     * @param account Account to burn pool tokens from\\n     * @return Whether the burn was successful\\n     */\\n    function burn(uint256 amount, address account) external override onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e9097fbbe74654591ae70d0301828a73b33e5aaa5f41048ea74e35dd1112844\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/implementation/PriceObserver.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPriceObserver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// Stores a finite sequence of price observations\\ncontract PriceObserver is Ownable, IPriceObserver {\\n    /// Maximum number of elements storable by the backing array\\n    uint256 public constant MAX_NUM_ELEMS = 24;\\n\\n    /// Current number of elements stored by the backing array\\n    uint256 public numElems = 0;\\n\\n    /// Backing array for storing price data\\n    int256[MAX_NUM_ELEMS] public observations;\\n\\n    /// Writer -- only address allowed to add data to the backing array\\n    address writer = address(0);\\n\\n    /**\\n     * @notice Returns the capacity of the backing array (i.e., the maximum\\n     *          number of price observations able to be stored by this contract)\\n     * @return Maximum number of price observations that can be stored\\n     * @dev `MAX_NUM_ELEMS`\\n     */\\n    function capacity() public pure override returns (uint256) {\\n        return MAX_NUM_ELEMS;\\n    }\\n\\n    /**\\n     * @notice Returns the current number of price observations stored\\n     * @return Current number of price observations stored\\n     * @dev Should always be less than or equal to `capacity`\\n     * @dev `numElems`\\n     */\\n    function length() public view override returns (uint256) {\\n        return numElems;\\n    }\\n\\n    /**\\n     * @notice Retrieves the `i`th price observation\\n     * @param i Period to retrieve the price observation of\\n     * @return `i`th price observation\\n     * @dev Throws if index is out of bounds (i.e., `i >= length()`)\\n     */\\n    function get(uint256 i) public view override returns (int256) {\\n        require(i < length(), \\\"PO: Out of bounds\\\");\\n        return observations[i];\\n    }\\n\\n    /**\\n     * @notice Retrieves all price observations\\n     * @return Backing array of all price observations\\n     * @dev Note that, due to this view simply returning a reference to the\\n     *      backing array, it's possible for there to be null prices (i.e., 0)\\n     */\\n    function getAll() public view override returns (int256[24] memory) {\\n        return observations;\\n    }\\n\\n    /**\\n     * @notice Adds a new price observation to the contract\\n     * @param x Price\\n     * @return Whether or not an existing price observation was rotated out\\n     * @dev If the backing array is full (i.e., `length() == capacity()`, then\\n     *      it is rotated such that the oldest price observation is deleted\\n     * @dev Only callable by the associated writer for this contract\\n     */\\n    function add(int256 x) public override onlyWriter returns (bool) {\\n        if (full()) {\\n            leftRotateWithPad(x);\\n            return true;\\n        } else {\\n            observations[length()] = x;\\n            numElems += 1;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the associated writer address for this contract\\n     * @param _writer Address of the new writer\\n     * @dev Only callable by the owner of this contract\\n     * @dev Throws if `_writer` is the null address\\n     */\\n    function setWriter(address _writer) public onlyOwner {\\n        require(_writer != address(0), \\\"PO: Null address not allowed\\\");\\n        writer = _writer;\\n    }\\n\\n    /**\\n     * @notice Returns the current writer of this contract\\n     * @return Address of the writer for this contract\\n     * @dev `writer`\\n     */\\n    function getWriter() public view returns (address) {\\n        return writer;\\n    }\\n\\n    /**\\n     * @notice Determines whether or not the backing array is full\\n     * @return Flag indicating whether the backing array is full or not\\n     * @dev `length() == capacity()`\\n     */\\n    function full() private view returns (bool) {\\n        return length() == capacity();\\n    }\\n\\n    /**\\n     * @notice Resets the backing array and clears all of its stored prices\\n     * @dev Only callable by the owner of this contract\\n     */\\n    function clear() public onlyOwner {\\n        numElems = 0;\\n        delete observations;\\n    }\\n\\n    /**\\n     * @notice Rotates observations array to the **left** by one element and\\n     *          sets the last element of `xs` to `x`\\n     * @param x Element to \\\"rotate into\\\" observations array\\n     */\\n    function leftRotateWithPad(int256 x) private {\\n        uint256 n = length();\\n\\n        /* linear scan over the [1, n] subsequence */\\n        for (uint256 i = 1; i < n; i++) {\\n            observations[i - 1] = observations[i];\\n        }\\n\\n        /* rotate `x` into `observations` from the right (remember, we're\\n         * **left** rotating -- with padding!) */\\n        observations[n - 1] = x;\\n    }\\n\\n    /**\\n     * @notice Enforces that the caller is the associated writer of this\\n     *          contract\\n     */\\n    modifier onlyWriter() {\\n        require(msg.sender == writer, \\\"PO: Permission denied\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba9d2ccb090627c6186ea5f03feb830633fa69d037dc0970874348f4d93a08f\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IAutoClaim.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\ninterface IAutoClaim {\\n    /**\\n     * @notice Creates a notification when an auto-claim is requested\\n     * @param user The user who made a request\\n     * @param poolCommitter The PoolCommitter instance in which the commit was made\\n     * @param updateIntervalId The update interval ID that the corresponding commitment was allocated for\\n     * @param reward The reward for the auto-claim\\n     */\\n    event PaidClaimRequest(\\n        address indexed user,\\n        address indexed poolCommitter,\\n        uint256 indexed updateIntervalId,\\n        uint256 reward\\n    );\\n\\n    /**\\n     * @notice Creates a notification when an auto-claim request is updated. i.e. When another commit is added and reward is incremented.\\n     * @param user The user whose request got updated\\n     * @param poolCommitter The PoolCommitter instance in which the commits were made\\n     * @param newReward The new total reward for the auto-claim\\n     */\\n    event PaidClaimRequestUpdate(address indexed user, address indexed poolCommitter, uint256 indexed newReward);\\n\\n    /**\\n     * @notice Creates a notification when an auto-claim request is executed\\n     * @param user The user whose request got executed\\n     * @param poolCommitter The PoolCommitter instance in which the original commit was made\\n     * @param reward The reward for the auto-claim\\n     */\\n    event PaidRequestExecution(address user, address poolCommitter, uint256 reward);\\n\\n    /**\\n     * @notice Creates a notification when an auto-claim request is withdrawn\\n     * @param user The user whose request got withdrawn\\n     * @param poolCommitter The PoolCommitter instance in which the original commit was made\\n     */\\n    event RequestWithdrawn(address user, address poolCommitter);\\n\\n    struct ClaimRequest {\\n        uint128 updateIntervalId; // The update interval during which a user requested a claim.\\n        uint256 reward; // The amount of ETH in wei that was given by the user to pay for upkeep\\n    }\\n\\n    function initialize(address _poolFactoryAddress) external;\\n\\n    /**\\n     * @notice Pay for your commit to be claimed. This means that a willing participant can claim on `user`'s behalf when the current update interval ends.\\n     * @dev Only callable by this contract's associated PoolCommitter instance. This prevents griefing. Consider a permissionless function, where a user can claim that somebody else wants to auto claim when they do not.\\n     * @param user The user who wants to autoclaim.\\n     */\\n    function makePaidClaimRequest(address user) external payable;\\n\\n    /**\\n     * @notice Claim on the behalf of a user who has requests to have their commit automatically claimed by a keeper.\\n     * @param user The user who requested an autoclaim.\\n     * @param poolCommitterAddress The PoolCommitter address within which the user's claim will be executed\\n     */\\n    function paidClaim(address user, address poolCommitterAddress) external;\\n\\n    /**\\n     * @notice Call `paidClaim` for multiple users, across multiple PoolCommitters\\n     * @param users All users to execute claims for.\\n     * @param poolCommitterAddresses The PoolCommitter addresses within which you would like to claim for the respective user\\n     * @dev The nth index in poolCommitterAddresses should be the PoolCommitter where the nth address in user requested an auto claim\\n     */\\n    function multiPaidClaimMultiplePoolCommitters(address[] calldata users, address[] calldata poolCommitterAddresses)\\n        external;\\n\\n    /**\\n     * @notice Call `paidClaim` for multiple users, in a single PoolCommitter.\\n     * @dev The nth index in poolCommitterAddresses should be the PoolCommitter where the nth address in user requested an auto claim\\n     * @param users All users to execute claims for.\\n     * @param poolCommitterAddress The PoolCommitter address within which you would like to claim for the respective user\\n     */\\n    function multiPaidClaimSinglePoolCommitter(address[] calldata users, address poolCommitterAddress) external;\\n\\n    /**\\n     * @notice If a user's claim request never gets executed (due to not high enough of a reward), or they change their minds, enable them to withdraw their request.\\n     * @param poolCommitter The PoolCommitter for which the user's commit claim is to be withdrawn.\\n     */\\n    function withdrawClaimRequest(address poolCommitter) external;\\n\\n    /**\\n     * @notice When the user claims themself through poolCommitter, you want the\\n     * @param user The user who will have their claim request withdrawn.\\n     */\\n    function withdrawUserClaimRequest(address user) external;\\n\\n    /**\\n     * @notice Check the validity of a user's claim request for a given pool committer.\\n     * @return true if the claim request can be executed.\\n     * @param user The user whose claim request will be checked.\\n     * @param poolCommitter The pool committer in which to look for a user's claim request.\\n     */\\n    function checkUserClaim(address user, address poolCommitter) external view returns (bool);\\n\\n    /**\\n     * @return true if the given claim request can be executed.\\n     * @dev A claim request can be executed only if one exists and is from an update interval that has passed.\\n     * @param request The ClaimRequest object to be checked.\\n     * @param currentUpdateIntervalId The current update interval. Used to compare to the update interval of the ClaimRequest.\\n     */\\n    function checkClaim(ClaimRequest memory request, uint256 currentUpdateIntervalId) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x9b3c4d4a55d947f08ba10fdfec5c58f4514d76d623cb060bd3b38391ba797153\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IERC20DecimalsWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The decimals interface for extending the ERC20 interface\\ninterface IERC20DecimalsWrapper {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x5b719acf06c256045637247185ac0a7f1ba2346ab14cec805a5b7ff2d0f1d83d\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IInvariantCheck.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The contract factory for the keeper and pool contracts. Utilizes minimal clones to keep gas costs low\\ninterface IInvariantCheck {\\n    event InvariantsHold();\\n    event InvariantsFail(string message);\\n\\n    /**\\n     * @notice Checks all invariants, and pauses all contracts if\\n     *         any invariant does not hold.\\n     */\\n    function checkInvariants(address pool) external;\\n}\\n\",\"keccak256\":\"0x108b25ee123c6fe445b11b50cf862832aec2d12b9a6187d7cfd83bf579ee05dc\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/ILeveragedPool.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The pool controller contract interface\\ninterface ILeveragedPool {\\n    // Initialisation parameters for new market\\n    struct Initialization {\\n        address _owner; // Owner of the contract\\n        address _keeper; // The address of the PoolKeeper contract\\n        address _oracleWrapper; // The oracle wrapper for the derivative price feed\\n        address _settlementEthOracle; // The oracle wrapper for the SettlementToken/ETH price feed\\n        address _longToken; // Address of the long pool token\\n        address _shortToken; // Address of the short pool token\\n        address _poolCommitter; // Address of the PoolCommitter contract\\n        address _invariantCheckContract; // Address of the PoolCommitter contract\\n        string _poolName; // The pool identification name\\n        uint32 _frontRunningInterval; // The minimum number of seconds that must elapse before a commit is forced to wait until the next interval\\n        uint32 _updateInterval; // The minimum number of seconds that must elapse before a commit can be executed\\n        uint16 _leverageAmount; // The amount of exposure to price movements for the pool\\n        uint256 _fee; // The fund movement fee. This amount is extracted from the deposited asset with every update and sent to the fee address. Given as the decimal * 10 ^ 18. For example, 60% fee is 0.6 * 10 ^ 18\\n        address _feeAddress; // The address that the fund movement fee is sent to\\n        address _secondaryFeeAddress; // The address of fee recieved by third party deployers\\n        address _quoteToken; //  The digital asset that the pool accepts. Must have a decimals() function\\n        uint256 _secondaryFeeSplitPercent; // Percent of fees that go to secondary fee address if it exists\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when the pool is setup and ready for use\\n     * @param longToken The address of the LONG pair token\\n     * @param shortToken The address of the SHORT pair token\\n     * @param quoteToken The address of the digital asset that the pool accepts\\n     * @param poolName The pool code for the pool\\n     */\\n    event PoolInitialized(address indexed longToken, address indexed shortToken, address quoteToken, string poolName);\\n\\n    /**\\n     * @notice Creates a notification when the pool is rebalanced\\n     * @param shortBalanceChange The change of funds in the short side\\n     * @param longBalanceChange The change of funds in the long side\\n     */\\n    event PoolRebalance(int256 shortBalanceChange, int256 longBalanceChange);\\n\\n    /**\\n     * @notice Creates a notification when the pool's price execution fails\\n     * @param startPrice Price prior to price change execution\\n     * @param endPrice Price during price change execution\\n     */\\n    event PriceChangeError(int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Represents change in fee receiver's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event FeeAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in secondary fee receiver's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event SecondaryFeeAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in keeper's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event KeeperAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents proposed change in governance address\\n     * @param newAddress Proposed address\\n     */\\n    event ProvisionalGovernanceChanged(address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in governance address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event GovernanceAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    function leverageAmount() external view returns (bytes16);\\n\\n    function poolCommitter() external view returns (address);\\n\\n    function quoteToken() external view returns (address);\\n\\n    function oracleWrapper() external view returns (address);\\n\\n    function lastPriceTimestamp() external view returns (uint256);\\n\\n    function poolName() external view returns (string calldata);\\n\\n    function updateInterval() external view returns (uint32);\\n\\n    function shortBalance() external view returns (uint256);\\n\\n    function longBalance() external view returns (uint256);\\n\\n    function frontRunningInterval() external view returns (uint32);\\n\\n    function poolTokens() external view returns (address[2] memory);\\n\\n    function settlementEthOracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Configures the pool on deployment. The pools are EIP 1167 clones.\\n     * @dev This should only be able to be run once to prevent abuse of the pool. Use of Openzeppelin Initializable or similar is recommended\\n     * @param initialization The struct Initialization containing initialization data\\n     */\\n    function initialize(Initialization calldata initialization) external;\\n\\n    function poolUpkeep(int256 _oldPrice, int256 _newPrice) external;\\n\\n    function quoteTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function payKeeperFromBalances(address to, uint256 amount) external returns (bool);\\n\\n    function quoteTokenTransfer(address to, uint256 amount) external;\\n\\n    function poolTokenTransfer(\\n        bool isLongToken,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function setNewPoolBalances(uint256 _longBalance, uint256 _shortBalance) external;\\n\\n    /**\\n     * @return _latestPrice The oracle price\\n     * @return _data The oracleWrapper's metadata. Implementations can choose what data to return here\\n     * @return _lastPriceTimestamp The timestamp of the last upkeep\\n     * @return _updateInterval The update frequency for this pool\\n     * @dev To save gas so PoolKeeper does not have to make three external calls\\n     */\\n    function getUpkeepInformation()\\n        external\\n        view\\n        returns (\\n            int256 _latestPrice,\\n            bytes memory _data,\\n            uint256 _lastPriceTimestamp,\\n            uint256 _updateInterval\\n        );\\n\\n    function getOraclePrice() external view returns (int256);\\n\\n    function intervalPassed() external view returns (bool);\\n\\n    function balances() external view returns (uint256 _shortBalance, uint256 _longBalance);\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function transferGovernance(address _governance) external;\\n\\n    function claimGovernance() external;\\n\\n    function updateFeeAddress(address account) external;\\n\\n    function updateSecondaryFeeAddress(address account) external;\\n\\n    function mintTokens(\\n        bool isLongToken,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n\\n    function burnTokens(\\n        bool isLongToken,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd7b7508b51f773607caf372f46fe12647e8bbf56215172bea9c9f0de0fde3bf6\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The oracle wrapper contract interface\\ninterface IOracleWrapper {\\n    function oracle() external view returns (address);\\n\\n    function deployer() external view returns (address);\\n\\n    // #### Functions\\n\\n    /**\\n     * @notice Returns the current price for the asset in question\\n     * @return The latest price\\n     */\\n    function getPrice() external view returns (int256);\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here\\n     */\\n    function getPriceAndMetadata() external view returns (int256 _price, bytes memory _data);\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(int256 wad) external view returns (int256);\\n\\n    /**\\n     * @notice Updates the underlying oracle state and returns the new price\\n     * @dev Spot oracles must implement but it will be a no-op\\n     */\\n    function poll() external returns (int256);\\n}\\n\",\"keccak256\":\"0x50b2e96b7b396f02b6a4c5fc6dee20a1134771c7a6ac0587ade614b50558b4de\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The pausable contract\\ninterface IPausable {\\n    /**\\n     * @notice Pauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpauses the pool\\n     * @dev Prevents all state updates until unpaused\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @return true if paused\\n     */\\n    function paused() external returns (bool);\\n\\n    event Paused();\\n    event Unpaused();\\n}\\n\",\"keccak256\":\"0x33e6187d3d403a66b6de93f1097933f202d8f16d8981d18b6bb168ccdcbad3a3\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolCommitter.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The interface for the contract that handles pool commitments\\ninterface IPoolCommitter {\\n    /// Type of commit\\n    enum CommitType {\\n        ShortMint, // Mint short tokens\\n        ShortBurn, // Burn short tokens\\n        LongMint, // Mint long tokens\\n        LongBurn, // Burn long tokens\\n        LongBurnShortMint, // Burn Long tokens, then instantly mint in same upkeep\\n        ShortBurnLongMint // Burn Short tokens, then instantly mint in same upkeep\\n    }\\n\\n    struct BalancesAndSupplies {\\n        uint256 shortBalance;\\n        uint256 longBalance;\\n        uint256 longTotalSupplyBefore;\\n        uint256 shortTotalSupplyBefore;\\n    }\\n\\n    // User aggregate balance\\n    struct Balance {\\n        uint256 longTokens;\\n        uint256 shortTokens;\\n        uint256 settlementTokens;\\n    }\\n\\n    // Token Prices\\n    struct Prices {\\n        bytes16 longPrice;\\n        bytes16 shortPrice;\\n    }\\n\\n    // Commit information\\n    struct Commit {\\n        uint256 amount;\\n        CommitType commitType;\\n        uint40 created;\\n        address owner;\\n    }\\n\\n    // Commit information\\n    struct TotalCommitment {\\n        uint256 longMintAmount;\\n        uint256 longBurnAmount;\\n        uint256 shortMintAmount;\\n        uint256 shortBurnAmount;\\n        uint256 shortBurnLongMintAmount;\\n        uint256 longBurnShortMintAmount;\\n        uint256 updateIntervalId;\\n    }\\n\\n    struct BalanceUpdate {\\n        uint256 _updateIntervalId;\\n        uint256 _newLongTokensSum;\\n        uint256 _newShortTokensSum;\\n        uint256 _newSettlementTokensSum;\\n        uint256 _balanceLongBurnAmount;\\n        uint256 _balanceShortBurnAmount;\\n        uint256 _longBurnFee;\\n        uint256 _shortBurnFee;\\n    }\\n\\n    // Track how much of a user's commitments are being done from their aggregate balance\\n    struct UserCommitment {\\n        uint256 longMintAmount;\\n        uint256 longBurnAmount;\\n        uint256 balanceLongBurnAmount;\\n        uint256 shortMintAmount;\\n        uint256 shortBurnAmount;\\n        uint256 balanceShortBurnAmount;\\n        uint256 shortBurnLongMintAmount;\\n        uint256 balanceShortBurnMintAmount;\\n        uint256 longBurnShortMintAmount;\\n        uint256 balanceLongBurnMintAmount;\\n        uint256 updateIntervalId;\\n    }\\n\\n    /**\\n     * @notice Creates a notification when a commit is created\\n     * @param user The user making the commitment\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event CreateCommit(address indexed user, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a user's aggregate balance is updated\\n     */\\n    event AggregateBalanceUpdated(address indexed user);\\n\\n    /**\\n     * @notice Creates a notification when a claim is made, depositing pool tokens in user's wallet\\n     */\\n    event Claim(address indexed user);\\n\\n    // #### Functions\\n\\n    function initialize(\\n        address _factory,\\n        address _invariantCheckContract,\\n        address _autoClaim,\\n        uint256 mintingFee,\\n        uint256 burningFee\\n    ) external;\\n\\n    function commit(\\n        CommitType commitType,\\n        uint256 amount,\\n        bool fromAggregateBalance,\\n        bool payForClaim\\n    ) external payable;\\n\\n    function updateIntervalId() external view returns (uint128);\\n\\n    function claim(address user) external;\\n\\n    function executeCommitments() external;\\n\\n    function updateAggregateBalance(address user) external;\\n\\n    function getAggregateBalance(address user) external view returns (Balance memory _balance);\\n\\n    function getAppropriateUpdateIntervalId() external view returns (uint128);\\n\\n    function setQuoteAndPool(address _quoteToken, address _leveragedPool) external;\\n\\n    function getPendingCommits() external view returns (TotalCommitment memory, TotalCommitment memory);\\n}\\n\",\"keccak256\":\"0xbc4508288abfe1c87261c621a88348ef44c0dd996487bbf061488071b40c7498\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The contract factory for the keeper and pool contracts. Utilizes minimal clones to keep gas costs low\\ninterface IPoolFactory {\\n    struct PoolDeployment {\\n        string poolName; // The name to identify a pool by\\n        uint32 frontRunningInterval; // The minimum number of seconds that must elapse before a commit can be executed. Must be smaller than or equal to the update interval to prevent deadlock\\n        uint32 updateInterval; // The minimum number of seconds that must elapse before a price change\\n        uint16 leverageAmount; // The amount of exposure to price movements for the pool\\n        address quoteToken; // The digital asset that the pool accepts\\n        address oracleWrapper; // The IOracleWrapper implementation for fetching price feed data\\n        address settlementEthOracle; // The oracle to fetch the price of Ether in terms of the settlement token\\n        address invariantCheckContract; // The IInvariantCheck contract that performs invariant checking\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when a pool is deployed\\n     * @param pool Address of the new pool\\n     * @param ticker Ticker of the neew pool\\n     */\\n    event DeployPool(address indexed pool, address poolCommitter, string ticker);\\n\\n    /**\\n     * @notice Creates a notification when the pool keeper changes\\n     * @param _poolKeeper Address of the new pool keeper\\n     */\\n    event PoolKeeperChanged(address _poolKeeper);\\n\\n    // #### Getters for Globals\\n    function pools(uint256 id) external view returns (address);\\n\\n    function numPools() external view returns (uint256);\\n\\n    function isValidPool(address _pool) external view returns (bool);\\n\\n    function isValidPoolCommitter(address _poolCommitter) external view returns (bool);\\n\\n    // #### Functions\\n    function deployPool(PoolDeployment calldata deploymentParameters) external returns (address);\\n\\n    function getOwner() external returns (address);\\n\\n    function setPoolKeeper(address _poolKeeper) external;\\n\\n    function setAutoClaim(address _autoClaim) external;\\n\\n    function setMaxLeverage(uint16 newMaxLeverage) external;\\n\\n    function setFeeReceiver(address _feeReceiver) external;\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function setSecondaryFeeSplitPercent(uint256 newFeePercent) external;\\n\\n    function setMintAndBurnFee(uint256 _mintingFee, uint256 _burningFee) external;\\n}\\n\",\"keccak256\":\"0x7392b76d26a5dcb623ed0c0e8ab10f0b2550470aff63554d131c5280fe242f8f\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolKeeper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The manager contract interface for multiple markets and the pools in them\\ninterface IPoolKeeper {\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when a pool is created\\n     * @param poolAddress The pool address of the newly created pool\\n     * @param firstPrice The price of the market oracle when the pool was created\\n     */\\n    event PoolAdded(address indexed poolAddress, int256 indexed firstPrice);\\n\\n    /**\\n     * @notice Creates a notification when a call to LeveragedPool:poolUpkeep is successful\\n     * @param pool The pool address being upkept\\n     * @param data Extra data about the price fetch. This could be roundID in the case of Chainlink Oracles\\n     * @param startPrice The previous price of the pool\\n     * @param endPrice The new price of the pool\\n     */\\n    event UpkeepSuccessful(address indexed pool, bytes data, int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Creates a notification when a keeper is paid for doing upkeep for a pool\\n     * @param _pool Address of pool being upkept\\n     * @param keeper Keeper to be rewarded for upkeeping\\n     * @param reward Keeper's reward (in settlement tokens)\\n     */\\n    event KeeperPaid(address indexed _pool, address indexed keeper, uint256 reward);\\n\\n    /**\\n     * @notice Creates a notification when a keeper's payment for upkeeping a pool failed\\n     * @param _pool Address of pool being upkept\\n     * @param keeper Keeper to be rewarded for upkeeping\\n     * @param expectedReward Keeper's expected reward (in settlement tokens); not actually transferred\\n     */\\n    event KeeperPaymentError(address indexed _pool, address indexed keeper, uint256 expectedReward);\\n\\n    /**\\n     * @notice Creates a notification of a failed pool update\\n     * @param pool The pool that failed to update\\n     * @param reason The reason for the error\\n     */\\n    event PoolUpkeepError(address indexed pool, string reason);\\n\\n    // #### Functions\\n    function newPool(address _poolAddress) external;\\n\\n    function setFactory(address _factory) external;\\n\\n    function checkUpkeepSinglePool(address pool) external view returns (bool);\\n\\n    function checkUpkeepMultiplePools(address[] calldata pools) external view returns (bool);\\n\\n    function performUpkeepSinglePool(address pool) external;\\n\\n    function performUpkeepMultiplePools(address[] calldata pools) external;\\n}\\n\",\"keccak256\":\"0xfb5a863b843848563313bc782a188419089790f737cd677b7eb8ec43b44d09bc\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPoolToken.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title Interface for the pool tokens\\ninterface IPoolToken {\\n    function mint(uint256 amount, address account) external returns (bool);\\n\\n    function burn(uint256 amount, address account) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5e448c30895a7319a1d424fb7bf18fcffe7a857e187dd7a7eda4102259ea95b2\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPriceObserver.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The price observer interface\\ninterface IPriceObserver {\\n    function capacity() external view returns (uint256);\\n\\n    function length() external view returns (uint256);\\n\\n    function get(uint256 i) external view returns (int256);\\n\\n    function getAll() external view returns (int256[24] memory);\\n\\n    function add(int256 x) external returns (bool);\\n}\\n\",\"keccak256\":\"0xba914bb590abf02108160b7245580b4f43592021b26aaa8b9fa374774098aff6\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/vendors/ERC20_Cloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Minimal Clones compatible implementation of the {IERC20} interface.\\n * @dev Based Openzeppelin 3.4 ERC20 contract\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20_Cloneable is Context, ERC20, Initializable {\\n    uint8 _decimals;\\n    string private _name;\\n    string private _symbol;\\n\\n    address public owner;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) ERC20(name_, symbol_) {\\n        _decimals = decimals_;\\n    }\\n\\n    function initialize(\\n        address _pool,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external initializer {\\n        owner = _pool;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Transfer ownership. Implemented to help with initializable\\n     */\\n    function transferOwnership(address _owner) external onlyOwner {\\n        require(_owner != address(0), \\\"Owner: setting to 0 address\\\");\\n        owner = _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"msg.sender not owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6ca763756afbd051aee62e582f366c32b3e1e6c75eb6307c42699273532cc012\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60e0604052600a6008819055600b805461ffff191690911790553480156200002657600080fd5b506040516200b2943803806200b29483398101604081905262000049916200044b565b6200005433620003d1565b6001600160a01b038116620000af5760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265206e756c6c00000000000000000000604482015260640160405180910390fd5b6012604051620000bf9062000421565b60ff9091168152602001604051809103906000f080158015620000e6573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03831617905560601b6001600160601b03191660805260405162000120906200042f565b604051809103906000f0801580156200013d573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b03831617905560601b6001600160601b03191660a052604051309081908190600090819062000182906200043d565b6001600160a01b03958616815293851660208501529390911660408301526060820152608081019190915260a001604051809103906000f080158015620001cd573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03838116919091178255606092831b6001600160601b03191660c090815260408051610220810182523080825260208083018290528284018290529682018190526080820181905260a0820181905292810183905260e08101839052815180830183526009815268109054d157d413d3d360ba1b96810196909652610100810195909552600f610120860152601e6101408601526000610160860181905260016101808701526101a086018390526101c08601526101e08501919091526008546102008501526002549051630129011d60e41b815291169163129011d091620002cf91859101620004cd565b600060405180830381600087803b158015620002ea57600080fd5b505af1158015620002ff573d6000803e3d6000fd5b5050600154604051637b69774360e11b81523060048083019190915260806024830152600a6084830152692120a9a2afaa27a5a2a760b11b60a483015260c0604483015260c4820152634241534560e01b60e4820152601260648201526001600160a01b03909116925063f6d2ee86915061010401600060405180830381600087803b1580156200038f57600080fd5b505af1158015620003a4573d6000803e3d6000fd5b5050600680546001600160a01b0319166001600160a01b0395909516949094179093555062000671915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611210806200235d83390190565b6133a3806200356d83390190565b614984806200691083390190565b6000602082840312156200045e57600080fd5b81516001600160a01b03811681146200047657600080fd5b9392505050565b6000815180845260005b81811015620004a55760208185018101518683018201520162000487565b81811115620004b8576000602083870101525b50601f01601f19169290920160200192915050565b60208152620004e86020820183516001600160a01b03169052565b600060208301516200050560408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e08301516101006200058c818501836001600160a01b03169052565b808501519150506102206101208181860152620005ae6102408601846200047d565b90860151909250610140620005ca8682018363ffffffff169052565b8601519050610160620005e48682018363ffffffff169052565b8601519050610180620005fc8682018361ffff169052565b8601516101a08681019190915286015190506101c062000626818701836001600160a01b03169052565b86015190506101e062000643868201836001600160a01b03169052565b860151905061020062000660868201836001600160a01b03169052565b959095015193019290925250919050565b60805160601c60a05160601c60c05160601c611c9e620006bf600039600081816103f9015261096001526000818161043c0152610b9b01526000818161025c01526113fb0152611c9e6000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063c70db323116100a2578063ddca3f4311610071578063ddca3f431461042e578063ed3f7e2614610437578063efdcd9741461045e578063f2fde38b1461047157600080fd5b8063c70db323146103ce578063d1df8a68146103e1578063d3394714146103f4578063d723c68b1461041b57600080fd5b8063ac4afa38116100de578063ac4afa381461035e578063ae3302c214610387578063b3f00674146103a8578063be51ce47146103bb57600080fd5b80638da5cb5b1461033157806390f712cc146103425780639238d14b1461034b57600080fd5b80635a64ad951161017c57806369fe0e2d1161014b57806369fe0e2d14610303578063715018a61461031657806379bc61821461031e578063893d20e81461033157600080fd5b80635a64ad95146102b15780635ab78ee1146102ba5780635bae377a146102dd578063616e5790146102f057600080fd5b806335c62bc2116101b857806335c62bc21461023b578063430ed6eb146102445780634690092c1461025757806359e86a991461027e57600080fd5b806303850dbb146101df5780630679d362146101fb578063178f9e3514610210575b600080fd5b6101e860085481565b6040519081526020015b60405180910390f35b61020e6102093660046115d4565b610484565b005b600354610223906001600160a01b031681565b6040516001600160a01b0390911681526020016101f2565b6101e8600d5481565b61020e610252366004611557565b61052d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6102a161028c366004611557565b600f6020526000908152604090205460ff1681565b60405190151581526020016101f2565b6101e860095481565b6102a16102c8366004611557565b600e6020526000908152604090205460ff1681565b600254610223906001600160a01b031681565b61020e6102fe3660046115ef565b61059f565b61020e6103113660046115ef565b61062e565b61020e610685565b61020e61032c366004611557565b6106bb565b6000546001600160a01b0316610223565b6101e8600a5481565b61020e610359366004611608565b61072d565b61022361036c3660046115ef565b600c602052600090815260409020546001600160a01b031681565b600b546103959061ffff1681565b60405161ffff90911681526020016101f2565b600654610223906001600160a01b031681565b6102236103c9366004611598565b6107b2565b600554610223906001600160a01b031681565b600454610223906001600160a01b031681565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b600154610223906001600160a01b031681565b6101e860075481565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61020e61046c366004611557565b611008565b61020e61047f366004611557565b61107a565b6000546001600160a01b031633146104b75760405162461bcd60e51b81526004016104ae90611799565b60405180910390fd5b60008161ffff16116105155760405162461bcd60e51b815260206004820152602160248201527f4d6178696d756d206c65766572616765206d757374206265206e6f6e2d7a65726044820152606f60f81b60648201526084016104ae565b600b805461ffff191661ffff92909216919091179055565b6000546001600160a01b031633146105575760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b03811661057d5760405162461bcd60e51b81526004016104ae906117fb565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105c95760405162461bcd60e51b81526004016104ae90611799565b60648111156106295760405162461bcd60e51b815260206004820152602660248201527f5365636f6e64617279206665652073706c69742063616e6e6f7420657863656560448201526564203130302560d01b60648201526084016104ae565b600855565b6000546001600160a01b031633146106585760405162461bcd60e51b81526004016104ae90611799565b67016345785d8a00008111156106805760405162461bcd60e51b81526004016104ae906117ce565b600755565b6000546001600160a01b031633146106af5760405162461bcd60e51b81526004016104ae90611799565b6106b96000611115565b565b6000546001600160a01b031633146106e55760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b03811661070b5760405162461bcd60e51b81526004016104ae906117fb565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016104ae90611799565b67016345785d8a000082111561077f5760405162461bcd60e51b81526004016104ae906117ce565b67016345785d8a00008111156107a75760405162461bcd60e51b81526004016104ae906117ce565b600991909155600a55565b6003546000906001600160a01b0316806108035760405162461bcd60e51b8152602060048201526012602482015271141bdbdb12d9595c195c881b9bdd081cd95d60721b60448201526064016104ae565b3361081460c0850160a08601611557565b6001600160a01b031663d5f394886040518163ffffffff1660e01b815260040160206040518083038186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610884919061157b565b6001600160a01b0316146108e85760405162461bcd60e51b815260206004820152602560248201527f4465706c6f796572206d757374206265206f7261636c6520777261707065722060448201526437bbb732b960d91b60648201526084016104ae565b60006108fa60808501606086016115d4565b61090a60a0860160808701611557565b61091a60c0870160a08801611557565b6040805161ffff90941660208501526001600160a01b039283169084015216606082015260800160405160208183030381529060405280519060200120905060006109857f000000000000000000000000000000000000000000000000000000000000000083611165565b90506001600160a01b03811663a6b63eb8306109a8610100890160e08a01611557565b600554600954600a5460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a401600060405180830381600087803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b5083925060019150610a3e905060808801606089016115d4565b61ffff1610158015610a695750600b5461ffff16610a6260808801606089016115d4565b61ffff1611155b610ac15760405162461bcd60e51b8152602060048201526024808201527f506f6f6c4b65657065723a206c657665726167656420616d6f756e7420696e76604482015263185b1a5960e21b60648201526084016104ae565b6012610ad360a0880160808901611557565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190611645565b60ff161115610b945760405162461bcd60e51b815260206004820152601a60248201527f446563696d616c20707265636973696f6e20746f6f206869676800000000000060448201526064016104ae565b6000610bc07f000000000000000000000000000000000000000000000000000000000000000085611165565b9050806001600160a01b0381167f82f5ba2b59209e8b2008e0addf2c8502bf23175cfee67125b2562302ce9823b984610bf98b80611a04565b604051610c089392919061170e565b60405180910390a26000610c2e610c2560808b0160608c016115d4565b61ffff1661120b565b90506000604051806102200160405280610c506000546001600160a01b031690565b6001600160a01b0390811682528a166020820152604001610c7760c08d0160a08e01611557565b6001600160a01b03168152602001610c9560e08d0160c08e01611557565b6001600160a01b03168152602001610cd18585610cb18f611ade565b604051806040016040528060028152602001614c2d60f01b815250611311565b6001600160a01b03168152602001610d0d8585610ced8f611ade565b60405180604001604052806002815260200161532d60f01b815250611311565b6001600160a01b03908116825287166020820152604001610d356101008d0160e08e01611557565b6001600160a01b0316815260200183610d4e8d80611a04565b604051602001610d60939291906116d7565b60405160208183030381529060405281526020018b6020016020810190610d87919061162a565b63ffffffff168152602001610da260608d0160408e0161162a565b63ffffffff168152602001610dbd60808d0160608e016115d4565b61ffff1681526020016301e13380610ddb60608e0160408f0161162a565b63ffffffff16600754610dee9190611aa8565b610df89190611a94565b81526006546001600160a01b03166020820152336040820152606001610e2460a08d0160808e01611557565b6001600160a01b031681526020016008548152509050836001600160a01b031663129011d0826040518263ffffffff1660e01b8152600401610e66919061182b565b600060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b5050506001600160a01b038616905063fd555fb9610eb860a08d0160808e01611557565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529086166024820152604401600060405180830381600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b5050600354604051633c5c7fb360e01b81526001600160a01b0387811660048301529091169250633c5c7fb39150602401600060405180830381600087803b158015610f6057600080fd5b505af1158015610f74573d6000803e3d6000fd5b5050600d80546000908152600c6020526040812080546001600160a01b0319166001600160a01b03891617905581546001945091925090610fb6908490611a7c565b909155505050506001600160a01b038181166000908152600e602090815260408083208054600160ff199182168117909255979094168352600f90915290208054909416179092555095945050505050565b6000546001600160a01b031633146110325760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b0381166110585760405162461bcd60e51b81526004016104ae906117fb565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146110a45760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b0381166111095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ae565b61111281611115565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166112055760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016104ae565b92915050565b60608161122f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611259578061124381611bcc565b91506112529050600a83611a94565b9150611233565b60008167ffffffffffffffff81111561127457611274611c3d565b6040519080825280601f01601f19166020018201604052801561129e576020820181803683370190505b5090505b8415611309576112b3600183611ac7565b91506112c0600a86611be7565b6112cb906030611a7c565b60f81b8183815181106112e0576112e0611c27565b60200101906001600160f81b031916908160001a905350611302600a86611a94565b94506112a2565b949350505050565b6000808483856000015160405160200161132d93929190611694565b6040516020818303038152906040529050600084608001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190611645565b90506000856060015186608001518760a00151876040516020016113dc94939291906119c4565b60405160208183030381529060405280519060200120905060006114207f000000000000000000000000000000000000000000000000000000000000000083611165565b604051637b69774360e11b81529091506001600160a01b0382169063f6d2ee8690611455908c9088908190899060040161174e565b600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b50929b9a5050505050505050505050565b803561149f81611c53565b919050565b600082601f8301126114b557600080fd5b813567ffffffffffffffff808211156114d0576114d0611c3d565b604051601f8301601f19908116603f011681019082821181831017156114f8576114f8611c3d565b8160405283815286602085880101111561151157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561ffff8116811461149f57600080fd5b803563ffffffff8116811461149f57600080fd5b60006020828403121561156957600080fd5b813561157481611c53565b9392505050565b60006020828403121561158d57600080fd5b815161157481611c53565b6000602082840312156115aa57600080fd5b813567ffffffffffffffff8111156115c157600080fd5b8201610100818503121561157457600080fd5b6000602082840312156115e657600080fd5b61157482611531565b60006020828403121561160157600080fd5b5035919050565b6000806040838503121561161b57600080fd5b50508035926020909101359150565b60006020828403121561163c57600080fd5b61157482611543565b60006020828403121561165757600080fd5b815160ff8116811461157457600080fd5b60008151808452611680816020860160208601611b9c565b601f01601f19169290920160200192915050565b600084516116a6818460208901611b9c565b8451908301906116ba818360208901611b9c565b84519101906116cd818360208801611b9c565b0195945050505050565b600084516116e9818460208901611b9c565b602d60f81b908301908152838560018301376000930160010192835250909392505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6001600160a01b038516815260806020820181905260009061177290830186611668565b82810360408401526117848186611668565b91505060ff8316606083015295945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601390820152724665652063616e6e6f74206265203e2031302560681b604082015260600190565b6020808252601690820152751859191c995cdcc818d85b9b9bdd081899481b9d5b1b60521b604082015260600190565b602081526118456020820183516001600160a01b03169052565b6000602083015161186160408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e08301516101006118e7818501836001600160a01b03169052565b808501519150506102206101208181860152611907610240860184611668565b908601519092506101406119228682018363ffffffff169052565b860151905061016061193b8682018363ffffffff169052565b86015190506101806119528682018361ffff169052565b8601516101a08681019190915286015190506101c061197b818701836001600160a01b03169052565b86015190506101e0611997868201836001600160a01b03169052565b86015190506102006119b3868201836001600160a01b03169052565b959095015193019290925250919050565b61ffff851681526001600160a01b038481166020830152831660408201526080606082018190526000906119fa90830184611668565b9695505050505050565b6000808335601e19843603018112611a1b57600080fd5b83018035915067ffffffffffffffff821115611a3657600080fd5b602001915036819003821315611a4b57600080fd5b9250929050565b604051610100810167ffffffffffffffff81118282101715611a7657611a76611c3d565b60405290565b60008219821115611a8f57611a8f611bfb565b500190565b600082611aa357611aa3611c11565b500490565b6000816000190483118215151615611ac257611ac2611bfb565b500290565b600082821015611ad957611ad9611bfb565b500390565b60006101008236031215611af157600080fd5b611af9611a52565b823567ffffffffffffffff811115611b1057600080fd5b611b1c368286016114a4565b825250611b2b60208401611543565b6020820152611b3c60408401611543565b6040820152611b4d60608401611531565b6060820152611b5e60808401611494565b6080820152611b6f60a08401611494565b60a0820152611b8060c08401611494565b60c0820152611b9160e08401611494565b60e082015292915050565b60005b83811015611bb7578181015183820152602001611b9f565b83811115611bc6576000848401525b50505050565b6000600019821415611be057611be0611bfb565b5060010190565b600082611bf657611bf6611c11565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461111257600080fdfea264697066735822122029a7918cac32f186deb67a4c6237d399fd84a7d5588598c3863decedad4c103664736f6c6343000807003360806040523480156200001157600080fd5b506040516200121038038062001210833981016040819052620000349162000175565b6040518060400160405280600a8152602001692120a9a2afaa27a5a2a760b11b815250604051806040016040528060048152602001634241534560e01b81525082828281600390805190602001906200008f929190620000cf565b508051620000a5906004906020840190620000cf565b50506005805460ff909316620100000262ff0000199093169290921790915550620001de92505050565b828054620000dd90620001a1565b90600052602060002090601f0160209004810192826200010157600085556200014c565b82601f106200011c57805160ff19168380011785556200014c565b828001600101855582156200014c579182015b828111156200014c5782518255916020019190600101906200012f565b506200015a9291506200015e565b5090565b5b808211156200015a57600081556001016200015f565b6000602082840312156200018857600080fd5b815160ff811681146200019a57600080fd5b9392505050565b600181811c90821680620001b657607f821691505b60208210811415620001d857634e487b7160e01b600052602260045260246000fd5b50919050565b61102280620001ee6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806394bf804d11610097578063dd62ed3e11610066578063dd62ed3e14610231578063f2fde38b1461026a578063f6d2ee861461027f578063fcd3533c1461029257600080fd5b806394bf804d146101f057806395d89b4114610203578063a457c2d71461020b578063a9059cbb1461021e57600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461018957806370a082311461019c5780638da5cb5b146101c557600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d6102a5565b60405161011a9190610ed3565b60405180910390f35b610136610131366004610e86565b610337565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610dbd565b61034d565b60055462010000900460ff1660405160ff909116815260200161011a565b610136610197366004610e86565b6103fc565b61014a6101aa366004610d68565b6001600160a01b031660009081526020819052604090205490565b6008546101d8906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b6101366101fe366004610eb0565b610438565b61010d61046f565b610136610219366004610e86565b61047e565b61013661022c366004610e86565b610517565b61014a61023f366004610d8a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61027d610278366004610d68565b610524565b005b61027d61028d366004610df9565b6105c6565b6101366102a0366004610eb0565b6106d6565b6060600680546102b490610f85565b80601f01602080910402602001604051908101604052809291908181526020018280546102e090610f85565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b5050505050905090565b600061034433848461070d565b50600192915050565b600061035a848484610832565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103e45760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103f1853385840361070d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610344918590610433908690610f56565b61070d565b6008546000906001600160a01b031633146104655760405162461bcd60e51b81526004016103db90610f28565b6103448284610a01565b6060600780546102b490610f85565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105005760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103db565b61050d338585840361070d565b5060019392505050565b6000610344338484610832565b6008546001600160a01b0316331461054e5760405162461bcd60e51b81526004016103db90610f28565b6001600160a01b0381166105a45760405162461bcd60e51b815260206004820152601b60248201527f4f776e65723a2073657474696e6720746f20302061646472657373000000000060448201526064016103db565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600554610100900460ff16806105df575060055460ff16155b6106425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b600554610100900460ff16158015610664576005805461ffff19166101011790555b600880546001600160a01b0319166001600160a01b0387161790558351610692906006906020870190610c26565b5082516106a6906007906020860190610c26565b506005805462ff000019166201000060ff85160217905580156106cf576005805461ff00191690555b5050505050565b6008546000906001600160a01b031633146107035760405162461bcd60e51b81526004016103db90610f28565b6103448284610ae0565b6001600160a01b03831661076f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103db565b6001600160a01b0382166107d05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166108965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103db565b6001600160a01b0382166108f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103db565b6001600160a01b038316600090815260208190526040902054818110156109705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103db565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906109a7908490610f56565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109f391815260200190565b60405180910390a350505050565b6001600160a01b038216610a575760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103db565b8060026000828254610a699190610f56565b90915550506001600160a01b03821660009081526020819052604081208054839290610a96908490610f56565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b405760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103db565b6001600160a01b03821660009081526020819052604090205481811015610bb45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103db565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610be3908490610f6e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610825565b828054610c3290610f85565b90600052602060002090601f016020900481019282610c545760008555610c9a565b82601f10610c6d57805160ff1916838001178555610c9a565b82800160010185558215610c9a579182015b82811115610c9a578251825591602001919060010190610c7f565b50610ca6929150610caa565b5090565b5b80821115610ca65760008155600101610cab565b80356001600160a01b0381168114610cd657600080fd5b919050565b600082601f830112610cec57600080fd5b813567ffffffffffffffff80821115610d0757610d07610fd6565b604051601f8301601f19908116603f01168101908282118183101715610d2f57610d2f610fd6565b81604052838152866020858801011115610d4857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610d7a57600080fd5b610d8382610cbf565b9392505050565b60008060408385031215610d9d57600080fd5b610da683610cbf565b9150610db460208401610cbf565b90509250929050565b600080600060608486031215610dd257600080fd5b610ddb84610cbf565b9250610de960208501610cbf565b9150604084013590509250925092565b60008060008060808587031215610e0f57600080fd5b610e1885610cbf565b9350602085013567ffffffffffffffff80821115610e3557600080fd5b610e4188838901610cdb565b94506040870135915080821115610e5757600080fd5b50610e6487828801610cdb565b925050606085013560ff81168114610e7b57600080fd5b939692955090935050565b60008060408385031215610e9957600080fd5b610ea283610cbf565b946020939093013593505050565b60008060408385031215610ec357600080fd5b82359150610db460208401610cbf565b600060208083528351808285015260005b81811015610f0057858101830151858201604001528201610ee4565b81811115610f12576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526014908201527336b9b39739b2b73232b9103737ba1037bbb732b960611b604082015260600190565b60008219821115610f6957610f69610fc0565b500190565b600082821015610f8057610f80610fc0565b500390565b600181811c90821680610f9957607f821691505b60208210811415610fba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207c87cda234a81f67da55383e6777723cd02e3646c72a9ac54ed0abd1942c4c2864736f6c63430008070033608060405234801561001057600080fd5b50613383806100206000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637bbf103311610167578063bbcaac38116100ce578063ddca3f4311610087578063ddca3f43146105ad578063e3d346cd146105c1578063f164e2a7146105d4578063f3466dfa146105e8578063f633a740146105fd578063fd2c80ae1461061057600080fd5b8063bbcaac3814610546578063c40f6aa914610559578063cd39f30f14610561578063cfe49eba14610574578063d38bfff414610587578063d4ab77ae1461059a57600080fd5b80639fd55245116101205780639fd55245146104cb578063a9b96d4c146104de578063ab47c2b3146104f1578063aced166114610517578063b9ed8abf1461052a578063ba8d54681461053d57600080fd5b80637bbf10331461045b5780637bfe789a146104795780637de93f931461049e5780637e71fc7d146104a75780638226f396146104b05780638456cb59146104c357600080fd5b80634f64b2be1161020b5780636dc2b271116101c45780636dc2b271146103ec578063748747e6146103ff57806375a024a214610412578063796da7af146104255780637b0a0c901461042d5780637bb98a681461044057600080fd5b80634f64b2be146103725780635817f0c6146103855780635aa6e675146103985780635c975abb146103ab5780635d36b190146103cf5780636d3e313e146103d757600080fd5b8063217a4b701161025d578063217a4b70146102fe5780633c3f8252146103295780633d4c485d1461033c5780633f4ba83a14610344578063412753581461034c5780634509017e1461035f57600080fd5b806303850dbb1461029a57806304883c27146102b6578063062e0d69146102ce578063110b1bed146102d6578063129011d0146102eb575b600080fd5b6102a360095481565b6040519081526020015b60405180910390f35b6102be610628565b6040516102ad9493929190613114565b6102a3600081565b6102e96102e4366004612de5565b6106e0565b005b6102e96102f9366004612f61565b6107d1565b600a54610311906001600160a01b031681565b6040516001600160a01b0390911681526020016102ad565b6102e9610337366004612f3f565b61120f565b6102e96112cd565b6102e96113d9565b600754610311906001600160a01b031681565b601054610311906001600160a01b031681565b610311610380366004612fc1565b61143b565b6102e9610393366004612d9e565b61145b565b600554610311906001600160a01b031681565b6005546103bf90600160a01b900460ff1681565b60405190151581526020016102ad565b6102e9611525565b6103df6116ec565b6040516102ad91906130da565b6103bf6103fa366004612d9e565b611730565b6102e961040d366004612d47565b611923565b6102e9610420366004612d47565b611ab4565b6102a3611b1d565b6102e961043b366004612d62565b611b9f565b600154600254604080519283526020830191909152016102ad565b60035460135464010000000090910463ffffffff16014210156103bf565b6003546104899063ffffffff1681565b60405163ffffffff90911681526020016102ad565b6102a360135481565b6102a360025481565b600d54610311906001600160a01b031681565b6102e9611c6a565b600e54610311906001600160a01b031681565b600f54610311906001600160a01b031681565b6004546104fe9060801b81565b6040516001600160801b031990911681526020016102ad565b600654610311906001600160a01b031681565b600c54610311906001600160a01b031681565b6102a360015481565b6102e9610554366004612d47565b611d10565b6102a3600181565b600b54610311906001600160a01b031681565b6102e9610582366004612e05565b611e39565b6102e9610595366004612d47565b6120a1565b6102e96105a8366004612e05565b6121e5565b6003546104fe90600160401b900460801b81565b600854610311906001600160a01b031681565b6006546103bf90600160a01b900460ff1681565b6105f06123ac565b6040516102ad9190613140565b6102e961060b366004612f3f565b61243a565b60035461048990640100000000900463ffffffff1681565b60006060600080600080600c60009054906101000a90046001600160a01b03166001600160a01b031663db6d8fcf6040518163ffffffff1660e01b815260040160006040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106bc9190810190612e86565b6013546003549299919850965064010000000090910463ffffffff16945092505050565b600b546001600160a01b031633146107135760405162461bcd60e51b815260040161070a906131c1565b60405180910390fd5b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b15801561075857600080fd5b505af115801561076c573d6000803e3d6000fd5b5050600554600160a01b900460ff1615915061079c90505760405162461bcd60e51b815260040161070a90613199565b82156107c3576107be8282601160005b01546001600160a01b0316919061261a565b505050565b6107be8282601160016107ac565b600054610100900460ff16806107ea575060005460ff16155b61084d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161070a565b600054610100900460ff1615801561086f576000805461ffff19166101011790555b60006108836101c084016101a08501612d47565b6001600160a01b031614156108da5760405162461bcd60e51b815260206004820152601f60248201527f46656520616464726573732063616e6e6f742062652030206164647265737300604482015260640161070a565b60006108ee61020084016101e08501612d47565b6001600160a01b031614156109455760405162461bcd60e51b815260206004820152601f60248201527f51756f746520746f6b656e2063616e6e6f742062652030206164647265737300604482015260640161070a565b60006109576060840160408501612d47565b6001600160a01b031614156109b95760405162461bcd60e51b815260206004820152602260248201527f4f7261636c6520777261707065722063616e6e6f742062652030206164647265604482015261737360f01b606482015260840161070a565b60006109cb6080840160608501612d47565b6001600160a01b03161415610a2c5760405162461bcd60e51b815260206004820152602160248201527f4b6565706572206f7261636c652063616e6e6f742062652030206164647265736044820152607360f81b606482015260840161070a565b6000610a3b6020840184612d47565b6001600160a01b03161415610a925760405162461bcd60e51b815260206004820152601960248201527f4f776e65722063616e6e6f742062652030206164647265737300000000000000604482015260640161070a565b6000610aa46040840160208501612d47565b6001600160a01b03161415610afb5760405162461bcd60e51b815260206004820152601a60248201527f4b65657065722063616e6e6f7420626520302061646472657373000000000000604482015260640161070a565b6000610b0d60a0840160808501612d47565b6001600160a01b03161415610b645760405162461bcd60e51b815260206004820152601e60248201527f4c6f6e6720746f6b656e2063616e6e6f74206265203020616464726573730000604482015260640161070a565b6000610b7660c0840160a08501612d47565b6001600160a01b03161415610bcd5760405162461bcd60e51b815260206004820152601f60248201527f53686f727420746f6b656e2063616e6e6f742062652030206164647265737300604482015260640161070a565b6000610bdf60e0840160c08501612d47565b6001600160a01b03161415610c405760405162461bcd60e51b815260206004820152602160248201527f506f6f6c436f6d6d69747465722063616e6e6f742062652030206164647265736044820152607360f81b606482015260840161070a565b6000610c53610100840160e08501612d47565b6001600160a01b03161415610cb55760405162461bcd60e51b815260206004820152602260248201527f496e76617269616e74436865636b2063616e6e6f742062652030206164647265604482015261737360f01b606482015260840161070a565b670de0b6b3a764000082610180013510610cff5760405162461bcd60e51b815260206004820152600b60248201526a466565203e3d203130302560a81b604482015260640161070a565b60648261020001351115610d255760405162461bcd60e51b815260040161070a90613153565b610d326020830183612d47565b600580546001600160a01b0319166001600160a01b0392909216919091179055610d626040830160208401612d47565b600680546001600160a01b0319166001600160a01b0392909216919091179055610d926060830160408401612d47565b600c80546001600160a01b0319166001600160a01b0392909216919091179055610dc26080830160608401612d47565b600d80546001600160a01b0319166001600160a01b0392909216919091179055610df461020083016101e08401612d47565b600a80546001600160a01b0319166001600160a01b0392909216919091179055610e266101408301610120840161302c565b6003805463ffffffff191663ffffffff92909216919091179055610e526101608301610140840161302c565b6003805463ffffffff929092166401000000000267ffffffff0000000019909216919091179055604051636fedf26d60e11b815261018083013560048201527386aE3A70301705C6495Fd617787895C9A6238FfE9063dfdbe4da9060240160206040518083038186803b158015610ec857600080fd5b505af4158015610edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f009190612e43565b6003805460809290921c600160401b0277ffffffffffffffffffffffffffffffff0000000000000000199092169190911790557386aE3A70301705C6495Fd617787895C9A6238FfE63dfdbe4da610f5f61018085016101608601612f9d565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b158015610f9957600080fd5b505af4158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd19190612e43565b600480546001600160801b03191660809290921c919091179055610ffd6101c083016101a08401612d47565b600780546001600160a01b0319166001600160a01b039290921691909117905561102f6101e083016101c08401612d47565b600880546001600160a01b0319166001600160a01b03929092169190911790556102008201356009554260135561106a61010083018361322f565b61107691601491612c74565b5061108760a0830160808401612d47565b601160000180546001600160a01b0319166001600160a01b03929092169190911790556110ba60c0830160a08401612d47565b601160010180546001600160a01b0319166001600160a01b03929092169190911790556110ed60e0830160c08401612d47565b600b80546001600160a01b0319166001600160a01b039290921691909117905561111e610100830160e08401612d47565b600f80546001600160a01b0319166001600160a01b039290921691909117905561114f610100830160e08401612d47565b601080546001600160a01b0319166001600160a01b039290921691909117905561117f60c0830160a08401612d47565b6001600160a01b031661119860a0840160808501612d47565b6001600160a01b03167fbc8bd61e5dd69ff5cb8c389529c029503515ba368eaafbdaa406e072fdd360726111d461020086016101e08701612d47565b6111e261010087018761322f565b6040516111f19392919061309a565b60405180910390a3801561120b576000805461ff00191690555b5050565b600b546001600160a01b031633146112395760405162461bcd60e51b815260040161070a906131c1565b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b5050600554600160a01b900460ff161591506112c290505760405162461bcd60e51b815260040161070a90613199565b600291909155600155565b6005546001600160a01b031633146112f75760405162461bcd60e51b815260040161070a906131f8565b600554600160a01b900460ff1661133f5760405162461bcd60e51b815260206004820152600c60248201526b506f6f6c206973206c69766560a01b604482015260640161070a565b600a546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561138757600080fd5b505afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190612e6d565b600a5490915061120b906001600160a01b0316338361261a565b6005546001600160a01b031633146114035760405162461bcd60e51b815260040161070a906131f8565b6005805460ff60a01b191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b6011816002811061144b57600080fd5b01546001600160a01b0316905081565b600b546001600160a01b031633146114855760405162461bcd60e51b815260040161070a906131c1565b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b5050600554600160a01b900460ff1615915061150e90505760405162461bcd60e51b815260040161070a90613199565b600a5461120b906001600160a01b0316838361261a565b600554600160a01b900460ff161561154f5760405162461bcd60e51b815260040161070a90613199565b600654600160a01b900460ff166115a85760405162461bcd60e51b815260206004820152601b60248201527f4e6f20676f7665726e616e6365206368616e6765206163746976650000000000604482015260640161070a565b600e546001600160a01b031633146116025760405162461bcd60e51b815260206004820152601860248201527f4e6f742070726f766973696f6e616c20676f7665726e6f720000000000000000604482015260640161070a565b60058054600e546001600160a01b039081166001600160a01b0319831681179093556006805460ff60a01b191690556040519116919082907f023588d3d1dcaad34e471c9e01b616b794156174bc693539c8fe15c0bfd5d82690600090a350601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b5050600554600160a01b900460ff161591506116ea90505760405162461bcd60e51b815260040161070a90613199565b565b6116f4612cf8565b60408051808201918290529060119060029082845b81546001600160a01b03168152600190910190602001808311611709575050505050905090565b6006546000906001600160a01b031633146117855760405162461bcd60e51b815260206004820152601560248201527436b9b39739b2b73232b9103737ba1035b2b2b832b960591b604482015260640161070a565b600554600160a01b900460ff16156117af5760405162461bcd60e51b815260040161070a90613199565b6001546002546117bf818361327d565b84106117d057600092505050611894565b60405163dc35bc1360e01b815260048101859052602481018390526044810182905260009081907386aE3A70301705C6495Fd617787895C9A6238FfE9063dc35bc1390606401604080518083038186803b15801561182d57600080fd5b505af4158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118659190612fda565b60018290556002819055600a54919350915061188b906001600160a01b0316888861261a565b60019450505050505b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b1580156118d957600080fd5b505af11580156118ed573d6000803e3d6000fd5b5050600554600160a01b900460ff1615915061191d90505760405162461bcd60e51b815260040161070a90613199565b92915050565b6005546001600160a01b0316331461194d5760405162461bcd60e51b815260040161070a906131f8565b600554600160a01b900460ff16156119775760405162461bcd60e51b815260040161070a90613199565b6001600160a01b0381166119d85760405162461bcd60e51b815260206004820152602260248201527f4b656570657220616464726573732063616e6e6f742062652030206164647265604482015261737360f01b606482015260840161070a565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f402b3f9a8de3e388e7653c7a5892204fe18b579c8c23db19d6e00f1043ceb92190600090a350601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc4906024015b600060405180830381600087803b158015611a6d57600080fd5b505af1158015611a81573d6000803e3d6000fd5b5050600554600160a01b900460ff16159150611ab190505760405162461bcd60e51b815260040161070a90613199565b50565b6008546001600160a01b0316338114611acc57600080fd5b600880546001600160a01b0319166001600160a01b0384811691821790925560405190918316907f4a1fe1b44fae78218ab520acca2aaba5067e706a4084bccf913f291c8d6e074990600090a35050565b600c5460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a9190612e6d565b905090565b600b546001600160a01b03163314611bc95760405162461bcd60e51b815260040161070a906131c1565b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b158015611c0e57600080fd5b505af1158015611c22573d6000803e3d6000fd5b5050600554600160a01b900460ff16159150611c5290505760405162461bcd60e51b815260040161070a90613199565b600a546107be906001600160a01b031684848461267d565b600f546001600160a01b03163314611cd25760405162461bcd60e51b815260206004820152602560248201527f6d73672e73656e646572206e6f7420696e76617269616e74436865636b436f6e6044820152641d1c9858dd60da1b606482015260840161070a565b6005805460ff60a01b1916600160a01b1790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b6005546001600160a01b03163314611d3a5760405162461bcd60e51b815260040161070a906131f8565b600554600160a01b900460ff1615611d645760405162461bcd60e51b815260040161070a90613199565b6001600160a01b038116611dba5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e742063616e6e6f74206265203020616464726573730000000000604482015260640161070a565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f11f35a22548bcd4c3788ab4a7e4fba427a2014f02e5d5e2da9af62212c03183f90600090a350601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401611a53565b600b546001600160a01b03163314611e635760405162461bcd60e51b815260040161070a906131c1565b600554600160a01b900460ff1615611e8d5760405162461bcd60e51b815260040161070a90613199565b8215611f5857601154604051633f34d4cf60e21b8152600481018490526001600160a01b0383811660248301529091169063fcd3533c90604401602060405180830381600087803b158015611ee157600080fd5b505af1158015611ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f199190612dc8565b611f535760405162461bcd60e51b815260206004820152600b60248201526a109d5c9b8819985a5b195960aa1b604482015260640161070a565b612018565b601254604051633f34d4cf60e21b8152600481018490526001600160a01b0383811660248301529091169063fcd3533c90604401602060405180830381600087803b158015611fa657600080fd5b505af1158015611fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fde9190612dc8565b6120185760405162461bcd60e51b815260206004820152600b60248201526a109d5c9b8819985a5b195960aa1b604482015260640161070a565b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b15801561205d57600080fd5b505af1158015612071573d6000803e3d6000fd5b5050600554600160a01b900460ff161591506107be90505760405162461bcd60e51b815260040161070a90613199565b6005546001600160a01b031633146120cb5760405162461bcd60e51b815260040161070a906131f8565b600554600160a01b900460ff16156120f55760405162461bcd60e51b815260040161070a90613199565b6001600160a01b03811661215a5760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636520616464726573732063616e6e6f742062652030206160448201526564647265737360d01b606482015260840161070a565b600e80546001600160a01b0383166001600160a01b031990911681179091556006805460ff60a01b1916600160a01b1790556040517f35681f4f23137fb58510a9854f1b6e95f90a2cf0b66d2fce4df74cc0becc82d590600090a2601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401611a53565b600b546001600160a01b0316331461220f5760405162461bcd60e51b815260040161070a906131c1565b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b15801561225457600080fd5b505af1158015612268573d6000803e3d6000fd5b5050600554600160a01b900460ff1615915061229890505760405162461bcd60e51b815260040161070a90613199565b821561235e576011546040516394bf804d60e01b8152600481018490526001600160a01b038381166024830152909116906394bf804d90604401602060405180830381600087803b1580156122ec57600080fd5b505af1158015612300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123249190612dc8565b6107be5760405162461bcd60e51b815260206004820152600b60248201526a135a5b9d0819985a5b195960aa1b604482015260640161070a565b6012546040516394bf804d60e01b8152600481018490526001600160a01b038381166024830152909116906394bf804d90604401602060405180830381600087803b1580156122ec57600080fd5b601480546123b9906132d8565b80601f01602080910402602001604051908101604052809291908181526020018280546123e5906132d8565b80156124325780601f1061240757610100808354040283529160200191612432565b820191906000526020600020905b81548152906001019060200180831161241557829003601f168201915b505050505081565b6006546001600160a01b0316331461248c5760405162461bcd60e51b815260206004820152601560248201527436b9b39739b2b73232b9103737ba1035b2b2b832b960591b604482015260640161070a565b600554600160a01b900460ff16156124b65760405162461bcd60e51b815260040161070a90613199565b60035460135464010000000090910463ffffffff160142101561251b5760405162461bcd60e51b815260206004820152601d60248201527f55706461746520696e74657276616c206861736e277420706173736564000000604482015260640161070a565b61252582826126bb565b600b60009054906101000a90046001600160a01b03166001600160a01b0316631b9d69576040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561257557600080fd5b505af1158015612589573d6000803e3d6000fd5b5050426013555050601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b1580156125d657600080fd5b505af11580156125ea573d6000803e3d6000fd5b5050600554600160a01b900460ff1615915061120b90505760405162461bcd60e51b815260040161070a90613199565b6040516001600160a01b0383166024820152604481018290526107be90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128f5565b6040516001600160a01b03808516602483015283166044820152606481018290526126b59085906323b872dd60e01b90608401612646565b50505050565b601054604051632781e7f160e21b81523060048201526001600160a01b0390911690639e079fc490602401600060405180830381600087803b15801561270057600080fd5b505af1158015612714573d6000803e3d6000fd5b5050600554600160a01b900460ff1615915061274490505760405162461bcd60e51b815260040161070a90613199565b600082131580612755575060008113155b1561278b57604051819083907f27f70c863f1bd3e335bb4d6bf2a31075c861752f0b21a03b816a356035b1dec690600090a35050565b6001546002546040805160c0810182528581526020810185815281830184815260608301868152600480546001600160801b0319608091821b8116828801908152600354600160401b900490921b811660a088019081529751632920706d60e21b815287519381019390935294516024830152925160448201529051606482015290518216608482015292511660a483015290600090819081907386aE3A70301705C6495Fd617787895C9A6238FfE9063a481c1b49060c40160606040518083038186803b15801561285c57600080fd5b505af4158015612870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128949190612ffe565b604080518a84038152898503602082015293965091945092507f3a4a53e86baa9b577f931e849a3472fd6be844c0916377bc806be891847a5c2b910160405180910390a1600283905560018290556128eb816129c7565b5050505050505050565b600061294a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612afa9092919063ffffffff16565b8051909150156107be57808060200190518101906129689190612dc8565b6107be5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161070a565b6008546001600160a01b03166129f457600754600a54611ab1916001600160a01b0391821691168361261a565b60646009541115612a175760405162461bcd60e51b815260040161070a90613153565b60095460405163fea3de3360e01b81526004810183905260248101919091526064604482018190526000917386aE3A70301705C6495Fd617787895C9A6238FfE9163fea3de33910160206040518083038186803b158015612a7757600080fd5b505af4158015612a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaf9190612e6d565b90506000612abd8284613295565b600854600a54919250612add916001600160a01b0390811691168461261a565b600754600a546107be916001600160a01b0391821691168361261a565b6060612b098484600085612b13565b90505b9392505050565b606082471015612b745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161070a565b843b612bc25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161070a565b600080866001600160a01b03168587604051612bde919061307e565b60006040518083038185875af1925050503d8060008114612c1b576040519150601f19603f3d011682016040523d82523d6000602084013e612c20565b606091505b5091509150612c30828286612c3b565b979650505050505050565b60608315612c4a575081612b0c565b825115612c5a5782518084602001fd5b8160405162461bcd60e51b815260040161070a9190613140565b828054612c80906132d8565b90600052602060002090601f016020900481019282612ca25760008555612ce8565b82601f10612cbb5782800160ff19823516178555612ce8565b82800160010185558215612ce8579182015b82811115612ce8578235825591602001919060010190612ccd565b50612cf4929150612d16565b5090565b60405180604001604052806002906020820280368337509192915050565b5b80821115612cf45760008155600101612d17565b80356001600160a01b0381168114612d4257600080fd5b919050565b600060208284031215612d5957600080fd5b612b0c82612d2b565b600080600060608486031215612d7757600080fd5b612d8084612d2b565b9250612d8e60208501612d2b565b9150604084013590509250925092565b60008060408385031215612db157600080fd5b612dba83612d2b565b946020939093013593505050565b600060208284031215612dda57600080fd5b8151612b0c8161333f565b600080600060608486031215612dfa57600080fd5b8335612d808161333f565b600080600060608486031215612e1a57600080fd5b8335612e258161333f565b925060208401359150612e3a60408501612d2b565b90509250925092565b600060208284031215612e5557600080fd5b81516001600160801b031981168114612b0c57600080fd5b600060208284031215612e7f57600080fd5b5051919050565b60008060408385031215612e9957600080fd5b82519150602083015167ffffffffffffffff80821115612eb857600080fd5b818501915085601f830112612ecc57600080fd5b815181811115612ede57612ede613329565b604051601f8201601f19908116603f01168101908382118183101715612f0657612f06613329565b81604052828152886020848701011115612f1f57600080fd5b612f308360208301602088016132ac565b80955050505050509250929050565b60008060408385031215612f5257600080fd5b50508035926020909101359150565b600060208284031215612f7357600080fd5b813567ffffffffffffffff811115612f8a57600080fd5b82016102208185031215612b0c57600080fd5b600060208284031215612faf57600080fd5b813561ffff81168114612b0c57600080fd5b600060208284031215612fd357600080fd5b5035919050565b60008060408385031215612fed57600080fd5b505080516020909101519092909150565b60008060006060848603121561301357600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561303e57600080fd5b813563ffffffff81168114612b0c57600080fd5b6000815180845261306a8160208601602086016132ac565b601f01601f19169290920160200192915050565b600082516130908184602087016132ac565b9190910192915050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b60408101818360005b600281101561310b5781516001600160a01b03168352602092830192909101906001016130e3565b50505092915050565b84815260806020820152600061312d6080830186613052565b6040830194909452506060015292915050565b602081526000612b0c6020830184613052565b60208082526026908201527f5365636f6e64617279206665652073706c69742063616e6e6f7420657863656560408201526564203130302560d01b606082015260800190565b6020808252600e908201526d141bdbdb081a5cc81c185d5cd95960921b604082015260600190565b6020808252601c908201527f6d73672e73656e646572206e6f7420706f6f6c436f6d6d697474657200000000604082015260600190565b60208082526019908201527f6d73672e73656e646572206e6f7420676f7665726e616e636500000000000000604082015260600190565b6000808335601e1984360301811261324657600080fd5b83018035915067ffffffffffffffff82111561326157600080fd5b60200191503681900382131561327657600080fd5b9250929050565b6000821982111561329057613290613313565b500190565b6000828210156132a7576132a7613313565b500390565b60005b838110156132c75781810151838201526020016132af565b838111156126b55750506000910152565b600181811c908216806132ec57607f821691505b6020821081141561330d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611ab157600080fdfea2646970667358221220409cf3a8f7c41e752f155ef7b15827f2369bd05c851b63234e16e65220ca0c5b64736f6c634300080700336080604052600180546001600160801b031916811790553480156200002357600080fd5b5060405162004984380380620049848339810160408190526200004691620003f1565b6001600160a01b038516620000a25760405162461bcd60e51b815260206004820152601e60248201527f466163746f727920616464726573732063616e6e6f74206265206e756c6c000060448201526064015b60405180910390fd5b6001600160a01b038316620000fa5760405162461bcd60e51b815260206004820181905260248201527f4175746f436c61696d20616464726573732063616e6e6f74206265206e756c6c604482015260640162000099565b6001600160a01b038416620001605760405162461bcd60e51b815260206004820152602560248201527f496e76617269616e74436865636b20616464726573732063616e6e6f74206265604482015264081b9d5b1b60da1b606482015260840162000099565b670de0b6b3a76400008210620001b95760405162461bcd60e51b815260206004820152601360248201527f4d696e74696e6720666565203e3d203130302500000000000000000000000000604482015260640162000099565b670de0b6b3a76400008110620002125760405162461bcd60e51b815260206004820152601360248201527f4275726e696e6720666565203e3d203130302500000000000000000000000000604482015260640162000099565b600d80546001600160a01b0319166001600160a01b03878116919091179091556000805462010000600160b01b0319166201000092861692909202919091179055604051636fedf26d60e11b8152600481018390527386aE3A70301705C6495Fd617787895C9A6238FfE9063dfdbe4da9060240160206040518083038186803b1580156200029f57600080fd5b505af4158015620002b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002da91906200044e565b6001805460809290921c600160801b026001600160801b03909216919091179055604051636fedf26d60e11b8152600481018290527386aE3A70301705C6495Fd617787895C9A6238FfE9063dfdbe4da9060240160206040518083038186803b1580156200034757600080fd5b505af41580156200035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038291906200044e565b6002805460809290921c6001600160801b03199092169190911790555050601080546001600160a01b039093166001600160a01b03199384168117909155601180549093161790915550620004819050565b80516001600160a01b0381168114620003ec57600080fd5b919050565b600080600080600060a086880312156200040a57600080fd5b6200041586620003d4565b94506200042560208701620003d4565b93506200043560408701620003d4565b6060870151608090970151959894975095949392505050565b6000602082840312156200046157600080fd5b81516001600160801b0319811681146200047a57600080fd5b9392505050565b6144f380620004916000396000f3fe6080604052600436106101c25760003560e01c80639a546848116100f7578063c40f6aa911610095578063e323aac611610064578063e323aac614610641578063ea348c9a14610661578063fd555fb9146106b8578063fe589858146106d857600080fd5b8063c40f6aa9146105d1578063c45a0155146105e6578063c70db32314610606578063d4c4e2831461062c57600080fd5b8063a6b63eb8116100d1578063a6b63eb814610514578063a9b96d4c14610534578063b27a048414610554578063b9fc75b0146105b157600080fd5b80639a546848146103ff5780639d03132e146104d45780639fa21dca146104f457600080fd5b806354da4992116101645780635c975abb1161013e5780635c975abb1461038357806364747c75146103b45780636a9dfc64146103c75780638456cb59146103ea57600080fd5b806354da4992146102e657806355c10624146103285780635aa6e6751461036357600080fd5b80631e83409a116101a05780631e83409a146102595780633f4ba83a146102795780634509017e1461028e5780634f64b2be146102c657600080fd5b8063062e0d69146101c75780631aabc7e7146101f95780631b9d695714610242575b600080fd5b3480156101d357600080fd5b506101dc600081565b6040516001600160801b0390911681526020015b60405180910390f35b34801561020557600080fd5b50610229610214366004614116565b60066020526000908152604090205460801b81565b6040516001600160801b031990911681526020016101f0565b34801561024e57600080fd5b50610257610765565b005b34801561026557600080fd5b50610257610274366004613ee7565b610aab565b34801561028557600080fd5b50610257610ef0565b34801561029a57600080fd5b506011546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b3480156102d257600080fd5b506102ae6102e1366004614116565b610f59565b3480156102f257600080fd5b50610306610301366004613ee7565b610f79565b60408051825181526020808401519082015291810151908201526060016101f0565b34801561033457600080fd5b50610355610343366004613ee7565b600a6020526000908152604090205481565b6040519081526020016101f0565b34801561036f57600080fd5b50600e546102ae906001600160a01b031681565b34801561038f57600080fd5b506010546103a490600160a01b900460ff1681565b60405190151581526020016101f0565b6102576103c23660046140bf565b6112bc565b3480156103d357600080fd5b506103dc611835565b6040516101f09291906142aa565b3480156103f657600080fd5b506102576119a5565b34801561040b57600080fd5b5061048161041a366004613fbc565b60096020528160005260406000206020528060005260406000206000915091505080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830152610140820152610160016101f0565b3480156104e057600080fd5b506001546101dc906001600160801b031681565b34801561050057600080fd5b5061025761050f366004613ee7565b611a22565b34801561052057600080fd5b5061025761052f366004613f61565b61206d565b34801561054057600080fd5b506010546102ae906001600160a01b031681565b34801561056057600080fd5b5061059061056f366004614116565b600560205260009081526040902054608081811b91600160801b9004901b82565b604080516001600160801b03199384168152929091166020830152016101f0565b3480156105bd57600080fd5b506103556105cc366004613fbc565b6125bd565b3480156105dd57600080fd5b506101dc600181565b3480156105f257600080fd5b50600d546102ae906001600160a01b031681565b34801561061257600080fd5b506000546102ae906201000090046001600160a01b031681565b34801561063857600080fd5b506101dc6125ee565b34801561064d57600080fd5b50600f546102ae906001600160a01b031681565b34801561066d57600080fd5b5061069d61067c366004613ee7565b60076020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101f0565b3480156106c457600080fd5b506102576106d3366004613f28565b61280e565b3480156106e457600080fd5b506107306106f3366004614116565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016101f0565b600f546001600160a01b031633146107c45760405162461bcd60e51b815260206004820152601c60248201527f6d73672e73656e646572206e6f74206c6576657261676564506f6f6c0000000060448201526064015b60405180910390fd5b601154600f54604051632781e7f160e21b81526001600160a01b039182166004820152911690639e079fc490602401600060405180830381600087803b15801561080d57600080fd5b505af1158015610821573d6000803e3d6000fd5b5050601054600160a01b900460ff1615915061085190505760405162461bcd60e51b81526004016107bb90614282565b600f5460408051637de93f9360e01b815290516001600160a01b03909216916001916000918491637de93f93916004808301926020929190829003018186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d5919061412f565b90506000836001600160a01b031663fd2c80ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a91906141ac565b63ffffffff1690505b61096363ffffffff8416826143f1565b61096d9083614398565b4210610a8e5760028054600180546001600160801b03908116600090815260066020818152604080842080546001600160801b03191697861697909717909655845490931682526008835290849020845160e08101865281548152938101549284019290925293810154928201929092526003820154606082015260048201546080820152600582015460a082015291015460c0820152610a0d90612b4b565b600180546001600160801b0390811660009081526008602052604081208181558084018290556002810182905560038101829055600481018290556005810182905560060181905582548392610a659184911661436d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610a93565b610aa5565b610a9e6001846143b0565b9250610953565b50505050565b601054600160a01b900460ff1615610ad55760405162461bcd60e51b81526004016107bb90614282565b80336001600160a01b0382161480610afd57506000546201000090046001600160a01b031633145b610b575760405162461bcd60e51b815260206004820152602560248201527f6d73672e73656e646572206e6f7420636f6d6d6974746572206f72204175746f604482015264436c61696d60d81b60648201526084016107bb565b610b6082611a22565b336001600160a01b038316148015610bfd5750600054604051631107d3c960e31b81526001600160a01b038481166004830152306024830152620100009092049091169063883e9e489060440160206040518083038186803b158015610bc557600080fd5b505afa158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd9190614078565b15610c69576000546040516307119aeb60e01b81526001600160a01b03848116600483015262010000909204909116906307119aeb90602401600060405180830381600087803b158015610c5057600080fd5b505af1158015610c64573d6000803e3d6000fd5b505050505b6001600160a01b0380831660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101829052600f549092169015610d1e576040828101519051632c0bf86360e11b81526001600160a01b038681166004830152602482019290925290821690635817f0c690604401600060405180830381600087803b158015610d0557600080fd5b505af1158015610d19573d6000803e3d6000fd5b505050505b815115610d9357815160405163110b1bed60e01b8152600160048201526001600160a01b03868116602483015260448201929092529082169063110b1bed90606401600060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b505050505b602082015115610e0e57602082015160405163110b1bed60e01b8152600060048201526001600160a01b03868116602483015260448201929092529082169063110b1bed90606401600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050505b6001600160a01b03841660008181526007602052604080822082815560018101839055600201829055517f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc9190a25050601154600f54604051632781e7f160e21b81526001600160a01b03918216600482015291169150639e079fc4906024015b600060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b5050601054600160a01b900460ff16159150610eed90505760405162461bcd60e51b81526004016107bb90614282565b50565b600e546001600160a01b03163314610f4a5760405162461bcd60e51b815260206004820152601960248201527f6d73672e73656e646572206e6f7420676f7665726e616e63650000000000000060448201526064016107bb565b6010805460ff60a01b19169055565b60038160028110610f6957600080fd5b01546001600160a01b0316905081565b610f9d60405180606001604052806000815260200160008152602001600081525090565b6001600160a01b038216600081815260076020908152604080832081516060808201845282548252600180840154838701526002909301548285015283516101008101855292546001600160801b0316835282850186905282840186905282018590526080820185905260a0820185905260c0820185905260e08201859052948452600b8352818420805483518186028101860190945280845291949390919083018282801561106c57602002820191906000526020600020905b815481526020019060010190808311611058575b505083519394506000925050505b818110156112385760008382815181106110965761109661446e565b602002602001015190508382815181106110b2576110b261446e565b6020026020010151600014156110c85750611226565b6001600160a01b03881660009081526009602081815260408084208585528252928390208351610160810185528154815260018201549281019290925260028101549382018490526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008810154610100830152918201546101208201819052600a90920154610140820152916111709190614398565b866080018181516111819190614398565b90525060e081015160a08201516111989190614398565b8660a0018181516111a99190614398565b9052506001546101408201516001600160801b0390911611156112235760008060006111d4846134fa565b945050509250925082896020018181516111ee9190614398565b905250604089018051839190611205908390614398565b90525060608901805182919061121c908390614398565b9052505050505b50505b8061123081614427565b91505061107a565b5060208301518451859061124d908390614398565b905250608083015184518590611264908390614410565b905250604083015160208501805161127d908390614398565b90525060a0830151602085018051611296908390614410565b90525060608301516040850180516112af908390614398565b9052509295945050505050565b6112c533611a22565b601054600160a01b900460ff16156112ef5760405162461bcd60e51b81526004016107bb90614282565b6000831161133f5760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d757374206e6f74206265207a65726f00000000000000000060448201526064016107bb565b600f5460408051637e96405760e11b815290516001600160a01b0390921691600091839163fd2c80ae91600480820192602092909190829003018186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c191906141ac565b63ffffffff1690506000826001600160a01b0316637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b15801561140457600080fd5b505afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c919061412f565b90506000836001600160a01b0316637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147957600080fd5b505afa15801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b191906141ac565b63ffffffff169050841561152457600054604051634da17a3f60e11b8152336004820152620100009091046001600160a01b031690639b42f47e9034906024016000604051808303818588803b15801561150a57600080fd5b505af115801561151e573d6000803e3d6000fd5b50505050505b60015460405160016265017960e01b031981524260048201526024810184905260448101839052606481018590526001600160801b0390911660848201526000907386aE3A70301705C6495Fd617787895C9A6238FfE9063ff9afe879060a40160206040518083038186803b15801561159c57600080fd5b505af41580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d4919061412f565b600081815260086020908152604080832033808552600984528285208686528452828520600a8101879055908552600b90935292205492935090918015806116505750336000908152600b602052604090208490611633600184614410565b815481106116435761164361446e565b9060005260206000200154105b1561167857336000908152600b60209081526040822080546001810182559083529120018490555b60028c600581111561168c5761168c614458565b14806116a9575060008c60058111156116a7576116a7614458565b145b1561174c578961172457600f546040516307b0a0c960e41b81523360048201526001600160a01b039182166024820152604481018d905290891690637b0a0c9090606401600060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b5050505061174c565b33600090815260076020526040812060020180548d9290611746908490614410565b90915550505b61175a888d8d8d8688613656565b8b600581111561176c5761176c614458565b6040518c9033907f1812fae3acb48e153e53de9f618899f3770714f3b610a708a40f042da0b04ec790600090a45050601154600f54604051632781e7f160e21b81526001600160a01b039283169850639e079fc497506117d796509116935060040191506142169050565b600060405180830381600087803b1580156117f157600080fd5b505af1158015611805573d6000803e3d6000fd5b5050601054600160a01b900460ff16159150610aa590505760405162461bcd60e51b81526004016107bb90614282565b6118756040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6118b56040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600180546001600160801b0316600081815260086020819052604082209390926118de9161436d565b6001600160801b03168152602001908152602001600020816040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509150806040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050915091509091565b6010546001600160a01b03163314611a0d5760405162461bcd60e51b815260206004820152602560248201527f6d73672e73656e646572206e6f7420696e76617269616e74436865636b436f6e6044820152641d1c9858dd60da1b60648201526084016107bb565b6010805460ff60a01b1916600160a01b179055565b601054600160a01b900460ff1615611a4c5760405162461bcd60e51b81526004016107bb90614282565b6001600160a01b03811660008181526007602090815260408083208151610100810183526001546001600160801b03168152808401859052808301859052606081018590526080810185905260a0810185905260c0810185905260e08101859052948452600b8352818420805483518186028101860190945280845291959493909190830182828015611afe57602002820191906000526020600020905b815481526020019060010190808311611aea575b505083519394506000925050505b81811015611e0a576000838281518110611b2857611b2861446e565b60200260200101519050838281518110611b4457611b4461446e565b602002602001015160001415611b5a5750611df8565b6001600160a01b03871660009081526009602081815260408084208585528252928390208351610160810185528154815260018201549281019290925260028101549382018490526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008810154610100830152918201546101208201819052600a9092015461014082015291611c029190614398565b86608001818151611c139190614398565b90525060e081015160a0820151611c2a9190614398565b8660a001818151611c3b9190614398565b9052506001546101408201516001600160801b039091161115611d83576000806000806000611c69866134fa565b94509450945094509450848b602001818151611c859190614398565b90525060408b018051859190611c9c908390614398565b90525060608b018051829190611cb3908390614398565b90525060c08b018051849190611cca908390614398565b90525060e08b018051839190611ce1908390614398565b9052506001600160a01b038d1660008181526009602081815260408084208d855282528084208481556001810185905560028101859055600381018590556004810185905560058101859055600681018590556007810185905560088101859055928301849055600a909201839055928252600b90925220805489908110611d6b57611d6b61446e565b90600052602060002001600090555050505050611df5565b6001600160a01b038816600090815260096020818152604080842086855290915282206002810183905560058101839055908101829055600701558451600c90869085908110611dd557611dd561446e565b602090810291909101810151825460018101845560009384529190922001555b50505b80611e0281614427565b915050611b0c565b506001600160a01b0385166000908152600b60205260408120611e2c91613e0c565b6001600160a01b0385166000908152600b60205260409020600c8054611e53929190613e2a565b50611e60600c6000613e0c565b8260200151846000016000828254611e789190614398565b9091555050608083015184548590600090611e94908490614410565b90915550506040830151600185018054600090611eb2908490614398565b909155505060a0830151600185018054600090611ed0908490614410565b90915550506060830151600285018054600090611eee908490614398565b9091555050600f5460408051630f77314d60e31b815281516001600160a01b039093169260009283928592637bb98a6892600480840193919291829003018186803b158015611f3c57600080fd5b505afa158015611f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f749190614148565b91509150826001600160a01b0316633c3f82528760c0015183611f979190614398565b60e0890151611fa69086614398565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015611fe457600080fd5b505af1158015611ff8573d6000803e3d6000fd5b50506040516001600160a01b038b1692507fdefa4140341b4fd283af41700779361dc94f34ae245a186b3b9c187033c065549150600090a25050601154600f54604051632781e7f160e21b81526001600160a01b03918216600482015291169550639e079fc494506024019250610e8f915050565b600054610100900460ff1680612086575060005460ff16155b6120e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bb565b600054610100900460ff1615801561210b576000805461ffff19166101011790555b6001600160a01b03861661216d5760405162461bcd60e51b815260206004820152602360248201527f466163746f727920616464726573732063616e6e6f742062652030206164647260448201526265737360e81b60648201526084016107bb565b6001600160a01b0385166121d65760405162461bcd60e51b815260206004820152602a60248201527f496e76617269616e74436865636b20616464726573732063616e6e6f742062656044820152692030206164647265737360b01b60648201526084016107bb565b6001600160a01b03841661222c5760405162461bcd60e51b815260206004820181905260248201527f4175746f436c61696d20616464726573732063616e6e6f74206265206e756c6c60448201526064016107bb565b670de0b6b3a764000083106122795760405162461bcd60e51b81526020600482015260136024820152724d696e74696e6720666565203e3d203130302560681b60448201526064016107bb565b670de0b6b3a764000082106122c65760405162461bcd60e51b81526020600482015260136024820152724275726e696e6720666565203e3d203130302560681b60448201526064016107bb565b600180546001600160801b03191681179055600d80546001600160a01b0319166001600160a01b038816179055604051636fedf26d60e11b8152600481018490527386aE3A70301705C6495Fd617787895C9A6238FfE9063dfdbe4da9060240160206040518083038186803b15801561233e57600080fd5b505af4158015612352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123769190614095565b6001805460809290921c600160801b026001600160801b03909216919091179055604051636fedf26d60e11b8152600481018390527386aE3A70301705C6495Fd617787895C9A6238FfE9063dfdbe4da9060240160206040518083038186803b1580156123e257600080fd5b505af41580156123f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241a9190614095565b600260006101000a8154816001600160801b03021916908360801c021790555083600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550856001600160a01b031663893d20e86040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561249c57600080fd5b505af11580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d49190613f0b565b600e80546001600160a01b039283166001600160a01b03199182161790915560108054888416908316811790915560118054909216179055600d5460408051631127a41d60e31b81529051919092169163893d20e89160048083019260209291908290030181600087803b15801561254b57600080fd5b505af115801561255f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125839190613f0b565b600e80546001600160a01b0319166001600160a01b039290921691909117905580156125b5576000805461ff00191690555b505050505050565b600b60205281600052604060002081815481106125d957600080fd5b90600052602060002001600091509150505481565b600f5460408051637de93f9360e01b815290516000926001600160a01b0316917386aE3A70301705C6495Fd617787895C9A6238FfE9163ff9afe879142918591637de93f93916004808301926020929190829003018186803b15801561265357600080fd5b505afa158015612667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268b919061412f565b846001600160a01b0316637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126c457600080fd5b505afa1580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906141ac565b856001600160a01b031663fd2c80ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561273557600080fd5b505afa158015612749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276d91906141ac565b60015460405160e087901b6001600160e01b03191681526004810195909552602485019390935263ffffffff91821660448501521660648301526001600160801b0316608482015260a40160206040518083038186803b1580156127d057600080fd5b505af41580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612808919061412f565b91505090565b600d546001600160a01b031633146128615760405162461bcd60e51b8152602060048201526016602482015275436f6d6d69747465723a206e6f7420666163746f727960501b60448201526064016107bb565b601054600160a01b900460ff161561288b5760405162461bcd60e51b81526004016107bb90614282565b6001600160a01b0382166128f15760405162461bcd60e51b815260206004820152602760248201527f51756f746520746f6b656e20616464726573732063616e6e6f742062652030206044820152666164647265737360c81b60648201526084016107bb565b6001600160a01b03811661295a5760405162461bcd60e51b815260206004820152602a60248201527f4c657665726167656420706f6f6c20616464726573732063616e6e6f742062656044820152692030206164647265737360b01b60648201526084016107bb565b600f80546001600160a01b0319166001600160a01b03838116918217909255604080516318160ddd60e01b8152905185936000939085169263095ea7b39284916318160ddd916004808301926020929190829003018186803b1580156129bf57600080fd5b505afa1580156129d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f7919061412f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015612a3d57600080fd5b505af1158015612a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a759190614078565b905080612abc5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c08185c1c1c9bdd985b0819985a5b1959605a1b60448201526064016107bb565b600f546040805163369f189f60e11b815281516001600160a01b0390931692636d3e313e92600480840193919291829003018186803b158015612afe57600080fd5b505afa158015612b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b369190613fe8565b612b44906003906002613e7a565b5050505050565b600f546040805160808101808352631751aa8d60e31b905290516001600160a01b0390921691600091908190849063ba8d546890608480850191602091818703018186803b158015612b9c57600080fd5b505afa158015612bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd4919061412f565b8152602001836001600160a01b0316637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c1257600080fd5b505afa158015612c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4a919061412f565b8152600354604080516318160ddd60e01b815290516020938401936001600160a01b03909316926318160ddd9260048082019391829003018186803b158015612c9257600080fd5b505afa158015612ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cca919061412f565b8152602001600360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d2057600080fd5b505afa158015612d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d58919061412f565b815250905060008360a001518460200151612d739190614398565b9050600084608001518560600151612d8b9190614398565b905060405180604001604052807386aE3A70301705C6495Fd617787895C9A6238FfE635cf4ee918660200151868860400151612dc79190614398565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b158015612e0357600080fd5b505af4158015612e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3b9190614095565b6001600160801b03191681526020017386aE3A70301705C6495Fd617787895C9A6238FfE635cf4ee918660000151858860600151612e799190614398565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b158015612eb557600080fd5b505af4158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed9190614095565b6001600160801b03191690526001546001600160801b03166000908152600560209081526040808320845194830151608090811c600160801b0295901c949094179093558583015160a089015191870151935163debb52df60e01b815292937386aE3A70301705C6495Fd617787895C9A6238FfE9363debb52df93612f8f93929091899060040193845260208401929092526040830152606082015260800190565b60206040518083038186803b158015612fa757600080fd5b505af4158015612fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fdf919061412f565b60608501516080880151865160405163debb52df60e01b8152600481019390935260248301919091526044820152606481018490529091506000907386aE3A70301705C6495Fd617787895C9A6238FfE9063debb52df9060840160206040518083038186803b15801561305157600080fd5b505af4158015613065573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613089919061412f565b905060007386aE3A70301705C6495Fd617787895C9A6238FfE63ab41556f8760400151848b600001516130bc9190614398565b60208a01516040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064810188905260840160206040518083038186803b15801561310c57600080fd5b505af4158015613120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613144919061412f565b905080156131b557600f54604051636a55bbd760e11b81526001600160a01b03808a169263d4ab77ae9261318292600192879291169060040161422a565b600060405180830381600087803b15801561319c57600080fd5b505af11580156131b0573d6000803e3d6000fd5b505050505b6040808701516020880151915163debb52df60e01b81526000927386aE3A70301705C6495Fd617787895C9A6238FfE9263debb52df92613211928b91829060040193845260208401929092526040830152606082015260800190565b60206040518083038186803b15801561322957600080fd5b505af415801561323d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613261919061412f565b905060007386aE3A70301705C6495Fd617787895C9A6238FfE63ab41556f8960600151878d604001516132949190614398565b8b5160405160e085901b6001600160e01b03191681526004810193909352602483019190915260448201526064810189905260840160206040518083038186803b1580156132e157600080fd5b505af41580156132f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613319919061412f565b9050801561338a57600f54604051636a55bbd760e11b81526001600160a01b03808c169263d4ab77ae9261335792600092879291169060040161422a565b600060405180830381600087803b15801561337157600080fd5b505af1158015613385573d6000803e3d6000fd5b505050505b6060880151885160405163debb52df60e01b81526004810192909252602482018890526044820152606481018790526000907386aE3A70301705C6495Fd617787895C9A6238FfE9063debb52df9060840160206040518083038186803b1580156133f357600080fd5b505af4158015613407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342b919061412f565b9050600085848d600001518c602001516134459190614398565b61344f9190614410565b6134599190614398565b9050600087838e604001518d600001516134739190614398565b61347d9190614410565b6134879190614398565b604051631e1fc12960e11b815260048101849052602481018290529091506001600160a01b038d1690633c3f825290604401600060405180830381600087803b1580156134d357600080fd5b505af11580156134e7573d6000803e3d6000fd5b5050505050505050505050505050505050565b60408051610160810182526101408084018051600090815260056020818152868320546001600160801b0319608091821b811688528551855292825287842054600160801b9004811b8316828801526001546001600160801b0316878901528451606080890191909152895182890152828a015160a089015289015160c080890191909152818a015160e0890152610100808b01519089015289015161012088015293518352600690528582205490921b909116918301919091529151639eb17fa360e01b815282918291829182917386aE3A70301705C6495Fd617787895C9A6238FfE90639eb17fa3906135f39084906004016142c6565b60a06040518083038186803b15801561360b57600080fd5b505af415801561361f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613643919061416c565b939b929a50909850965090945092505050565b336000908152600760209081526040808320815160608101835281548152600182015493810193909352600290810154918301919091529091908760058111156136a2576136a2614458565b14806136bf575060008760058111156136bd576136bd614458565b145b156138075760015460405163422051e760e01b8152600160801b90910460801b6001600160801b031916600482015260248101879052670de0b6b3a7640000907386aE3A70301705C6495Fd617787895C9A6238FfE9063aeb64d7d90829063422051e79060440160206040518083038186803b15801561373e57600080fd5b505af4158015613752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137769190614095565b6040516001600160e01b031960e084901b1681526001600160801b0319909116600482015260240160206040518083038186803b1580156137b657600080fd5b505af41580156137ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ee919061412f565b6137f891906143cf565b90506138048187614410565b95505b600287600581111561381b5761381b614458565b141561394357600080896001600160a01b0316637bb98a686040518163ffffffff1660e01b8152600401604080518083038186803b15801561385c57600080fd5b505afa158015613870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138949190614148565b91509150878660000160008282546138ac9190614398565b90915550508454889086906000906138c5908490614398565b90915550506001600160a01b038a16633c3f82526138e38584614398565b846040518363ffffffff1660e01b815260040161390a929190918252602082015260400190565b600060405180830381600087803b15801561392457600080fd5b505af1158015613938573d6000803e3d6000fd5b505050505050613e02565b600387600581111561395757613957614458565b1415613a7357858460010160008282546139719190614398565b925050819055508583600101600082825461398c9190614398565b90915550508415613a4257858460020160008282546139ab9190614398565b90915550508151600285015411156139d55760405162461bcd60e51b81526004016107bb9061424b565b600f546040516367f24f5d60e11b81526001600160a01b03808b169263cfe49eba92613a0b926001928c9291169060040161422a565b600060405180830381600087803b158015613a2557600080fd5b505af1158015613a39573d6000803e3d6000fd5b50505050613e02565b6040516367f24f5d60e11b81526001600160a01b0389169063cfe49eba90613a0b906001908a90339060040161422a565b6000876005811115613a8757613a87614458565b1415613b7b57600080896001600160a01b0316637bb98a686040518163ffffffff1660e01b8152600401604080518083038186803b158015613ac857600080fd5b505afa158015613adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b009190614148565b9150915087866003016000828254613b189190614398565b9250508190555087856002016000828254613b339190614398565b90915550506001600160a01b038a16633c3f825282613b528686614398565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440161390a565b6001876005811115613b8f57613b8f614458565b1415613c775785846004016000828254613ba99190614398565b9250508190555085836003016000828254613bc49190614398565b90915550508415613c465785846005016000828254613be39190614398565b9091555050602082015160058501541115613c105760405162461bcd60e51b81526004016107bb9061424b565b600f546040516367f24f5d60e11b81526001600160a01b03808b169263cfe49eba92613a0b926000928c9291169060040161422a565b6040516367f24f5d60e11b81526001600160a01b0389169063cfe49eba90613a0b906000908a90339060040161422a565b6004876005811115613c8b57613c8b614458565b1415613d095785846008016000828254613ca59190614398565b9250508190555085836005016000828254613cc09190614398565b90915550508415613a425785846009016000828254613cdf9190614398565b90915550508151600985015411156139d55760405162461bcd60e51b81526004016107bb9061424b565b6005876005811115613d1d57613d1d614458565b1415613e025785846006016000828254613d379190614398565b9250508190555085836004016000828254613d529190614398565b90915550508415613d9e5785846007016000828254613d719190614398565b9091555050602082015160078501541115613c105760405162461bcd60e51b81526004016107bb9061424b565b6040516367f24f5d60e11b81526001600160a01b0389169063cfe49eba90613dcf906000908a90339060040161422a565b600060405180830381600087803b158015613de957600080fd5b505af1158015613dfd573d6000803e3d6000fd5b505050505b5050505050505050565b5080546000825590600052602060002090810190610eed9190613ec2565b828054828255906000526020600020908101928215613e6a5760005260206000209182015b82811115613e6a578254825591600101919060010190613e4f565b50613e76929150613ec2565b5090565b8260028101928215613e6a579160200282015b82811115613e6a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613e8d565b5b80821115613e765760008155600101613ec3565b8051613ee28161449a565b919050565b600060208284031215613ef957600080fd5b8135613f048161449a565b9392505050565b600060208284031215613f1d57600080fd5b8151613f048161449a565b60008060408385031215613f3b57600080fd5b8235613f468161449a565b91506020830135613f568161449a565b809150509250929050565b600080600080600060a08688031215613f7957600080fd5b8535613f848161449a565b94506020860135613f948161449a565b93506040860135613fa48161449a565b94979396509394606081013594506080013592915050565b60008060408385031215613fcf57600080fd5b8235613fda8161449a565b946020939093013593505050565b600060408284031215613ffa57600080fd5b82601f83011261400957600080fd5b6040516040810181811067ffffffffffffffff8211171561402c5761402c614484565b806040525080838560408601111561404357600080fd5b60005b600281101561406d5761405882613ed7565b83526020928301929190910190600101614046565b509195945050505050565b60006020828403121561408a57600080fd5b8151613f04816144af565b6000602082840312156140a757600080fd5b81516001600160801b031981168114613f0457600080fd5b600080600080608085870312156140d557600080fd5b8435600681106140e457600080fd5b93506020850135925060408501356140fb816144af565b9150606085013561410b816144af565b939692955090935050565b60006020828403121561412857600080fd5b5035919050565b60006020828403121561414157600080fd5b5051919050565b6000806040838503121561415b57600080fd5b505080516020909101519092909150565b600080600080600060a0868803121561418457600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000602082840312156141be57600080fd5b815163ffffffff81168114613f0457600080fd5b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b6001600160a01b0391909116815260200190565b921515835260208301919091526001600160a01b0316604082015260600190565b60208082526018908201527f496e73756666696369656e7420706f6f6c20746f6b656e730000000000000000604082015260600190565b6020808252600e908201526d141bdbdb081a5cc81c185d5cd95960921b604082015260600190565b6101c081016142b982856141d2565b613f0460e08301846141d2565b81516001600160801b0319168152610160810160208301516142f460208401826001600160801b0319169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151614365828501826001600160801b0319169052565b505092915050565b60006001600160801b0380831681851680830382111561438f5761438f614442565b01949350505050565b600082198211156143ab576143ab614442565b500190565b600063ffffffff80831681851680830382111561438f5761438f614442565b6000826143ec57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561440b5761440b614442565b500290565b60008282101561442257614422614442565b500390565b600060001982141561443b5761443b614442565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610eed57600080fd5b8015158114610eed57600080fdfea2646970667358221220d69b1f8bcf00a97dfe09128728ad3f8f68578a7f8c6c1cfb489d8d4555cc4ad564736f6c63430008070033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063c70db323116100a2578063ddca3f4311610071578063ddca3f431461042e578063ed3f7e2614610437578063efdcd9741461045e578063f2fde38b1461047157600080fd5b8063c70db323146103ce578063d1df8a68146103e1578063d3394714146103f4578063d723c68b1461041b57600080fd5b8063ac4afa38116100de578063ac4afa381461035e578063ae3302c214610387578063b3f00674146103a8578063be51ce47146103bb57600080fd5b80638da5cb5b1461033157806390f712cc146103425780639238d14b1461034b57600080fd5b80635a64ad951161017c57806369fe0e2d1161014b57806369fe0e2d14610303578063715018a61461031657806379bc61821461031e578063893d20e81461033157600080fd5b80635a64ad95146102b15780635ab78ee1146102ba5780635bae377a146102dd578063616e5790146102f057600080fd5b806335c62bc2116101b857806335c62bc21461023b578063430ed6eb146102445780634690092c1461025757806359e86a991461027e57600080fd5b806303850dbb146101df5780630679d362146101fb578063178f9e3514610210575b600080fd5b6101e860085481565b6040519081526020015b60405180910390f35b61020e6102093660046115d4565b610484565b005b600354610223906001600160a01b031681565b6040516001600160a01b0390911681526020016101f2565b6101e8600d5481565b61020e610252366004611557565b61052d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6102a161028c366004611557565b600f6020526000908152604090205460ff1681565b60405190151581526020016101f2565b6101e860095481565b6102a16102c8366004611557565b600e6020526000908152604090205460ff1681565b600254610223906001600160a01b031681565b61020e6102fe3660046115ef565b61059f565b61020e6103113660046115ef565b61062e565b61020e610685565b61020e61032c366004611557565b6106bb565b6000546001600160a01b0316610223565b6101e8600a5481565b61020e610359366004611608565b61072d565b61022361036c3660046115ef565b600c602052600090815260409020546001600160a01b031681565b600b546103959061ffff1681565b60405161ffff90911681526020016101f2565b600654610223906001600160a01b031681565b6102236103c9366004611598565b6107b2565b600554610223906001600160a01b031681565b600454610223906001600160a01b031681565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b600154610223906001600160a01b031681565b6101e860075481565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61020e61046c366004611557565b611008565b61020e61047f366004611557565b61107a565b6000546001600160a01b031633146104b75760405162461bcd60e51b81526004016104ae90611799565b60405180910390fd5b60008161ffff16116105155760405162461bcd60e51b815260206004820152602160248201527f4d6178696d756d206c65766572616765206d757374206265206e6f6e2d7a65726044820152606f60f81b60648201526084016104ae565b600b805461ffff191661ffff92909216919091179055565b6000546001600160a01b031633146105575760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b03811661057d5760405162461bcd60e51b81526004016104ae906117fb565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105c95760405162461bcd60e51b81526004016104ae90611799565b60648111156106295760405162461bcd60e51b815260206004820152602660248201527f5365636f6e64617279206665652073706c69742063616e6e6f7420657863656560448201526564203130302560d01b60648201526084016104ae565b600855565b6000546001600160a01b031633146106585760405162461bcd60e51b81526004016104ae90611799565b67016345785d8a00008111156106805760405162461bcd60e51b81526004016104ae906117ce565b600755565b6000546001600160a01b031633146106af5760405162461bcd60e51b81526004016104ae90611799565b6106b96000611115565b565b6000546001600160a01b031633146106e55760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b03811661070b5760405162461bcd60e51b81526004016104ae906117fb565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016104ae90611799565b67016345785d8a000082111561077f5760405162461bcd60e51b81526004016104ae906117ce565b67016345785d8a00008111156107a75760405162461bcd60e51b81526004016104ae906117ce565b600991909155600a55565b6003546000906001600160a01b0316806108035760405162461bcd60e51b8152602060048201526012602482015271141bdbdb12d9595c195c881b9bdd081cd95d60721b60448201526064016104ae565b3361081460c0850160a08601611557565b6001600160a01b031663d5f394886040518163ffffffff1660e01b815260040160206040518083038186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610884919061157b565b6001600160a01b0316146108e85760405162461bcd60e51b815260206004820152602560248201527f4465706c6f796572206d757374206265206f7261636c6520777261707065722060448201526437bbb732b960d91b60648201526084016104ae565b60006108fa60808501606086016115d4565b61090a60a0860160808701611557565b61091a60c0870160a08801611557565b6040805161ffff90941660208501526001600160a01b039283169084015216606082015260800160405160208183030381529060405280519060200120905060006109857f000000000000000000000000000000000000000000000000000000000000000083611165565b90506001600160a01b03811663a6b63eb8306109a8610100890160e08a01611557565b600554600954600a5460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015293851660248501529390911660448301526064820152608481019190915260a401600060405180830381600087803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b5083925060019150610a3e905060808801606089016115d4565b61ffff1610158015610a695750600b5461ffff16610a6260808801606089016115d4565b61ffff1611155b610ac15760405162461bcd60e51b8152602060048201526024808201527f506f6f6c4b65657065723a206c657665726167656420616d6f756e7420696e76604482015263185b1a5960e21b60648201526084016104ae565b6012610ad360a0880160808901611557565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190611645565b60ff161115610b945760405162461bcd60e51b815260206004820152601a60248201527f446563696d616c20707265636973696f6e20746f6f206869676800000000000060448201526064016104ae565b6000610bc07f000000000000000000000000000000000000000000000000000000000000000085611165565b9050806001600160a01b0381167f82f5ba2b59209e8b2008e0addf2c8502bf23175cfee67125b2562302ce9823b984610bf98b80611a04565b604051610c089392919061170e565b60405180910390a26000610c2e610c2560808b0160608c016115d4565b61ffff1661120b565b90506000604051806102200160405280610c506000546001600160a01b031690565b6001600160a01b0390811682528a166020820152604001610c7760c08d0160a08e01611557565b6001600160a01b03168152602001610c9560e08d0160c08e01611557565b6001600160a01b03168152602001610cd18585610cb18f611ade565b604051806040016040528060028152602001614c2d60f01b815250611311565b6001600160a01b03168152602001610d0d8585610ced8f611ade565b60405180604001604052806002815260200161532d60f01b815250611311565b6001600160a01b03908116825287166020820152604001610d356101008d0160e08e01611557565b6001600160a01b0316815260200183610d4e8d80611a04565b604051602001610d60939291906116d7565b60405160208183030381529060405281526020018b6020016020810190610d87919061162a565b63ffffffff168152602001610da260608d0160408e0161162a565b63ffffffff168152602001610dbd60808d0160608e016115d4565b61ffff1681526020016301e13380610ddb60608e0160408f0161162a565b63ffffffff16600754610dee9190611aa8565b610df89190611a94565b81526006546001600160a01b03166020820152336040820152606001610e2460a08d0160808e01611557565b6001600160a01b031681526020016008548152509050836001600160a01b031663129011d0826040518263ffffffff1660e01b8152600401610e66919061182b565b600060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b5050506001600160a01b038616905063fd555fb9610eb860a08d0160808e01611557565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529086166024820152604401600060405180830381600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b5050600354604051633c5c7fb360e01b81526001600160a01b0387811660048301529091169250633c5c7fb39150602401600060405180830381600087803b158015610f6057600080fd5b505af1158015610f74573d6000803e3d6000fd5b5050600d80546000908152600c6020526040812080546001600160a01b0319166001600160a01b03891617905581546001945091925090610fb6908490611a7c565b909155505050506001600160a01b038181166000908152600e602090815260408083208054600160ff199182168117909255979094168352600f90915290208054909416179092555095945050505050565b6000546001600160a01b031633146110325760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b0381166110585760405162461bcd60e51b81526004016104ae906117fb565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146110a45760405162461bcd60e51b81526004016104ae90611799565b6001600160a01b0381166111095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ae565b61111281611115565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166112055760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016104ae565b92915050565b60608161122f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611259578061124381611bcc565b91506112529050600a83611a94565b9150611233565b60008167ffffffffffffffff81111561127457611274611c3d565b6040519080825280601f01601f19166020018201604052801561129e576020820181803683370190505b5090505b8415611309576112b3600183611ac7565b91506112c0600a86611be7565b6112cb906030611a7c565b60f81b8183815181106112e0576112e0611c27565b60200101906001600160f81b031916908160001a905350611302600a86611a94565b94506112a2565b949350505050565b6000808483856000015160405160200161132d93929190611694565b6040516020818303038152906040529050600084608001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190611645565b90506000856060015186608001518760a00151876040516020016113dc94939291906119c4565b60405160208183030381529060405280519060200120905060006114207f000000000000000000000000000000000000000000000000000000000000000083611165565b604051637b69774360e11b81529091506001600160a01b0382169063f6d2ee8690611455908c9088908190899060040161174e565b600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b50929b9a5050505050505050505050565b803561149f81611c53565b919050565b600082601f8301126114b557600080fd5b813567ffffffffffffffff808211156114d0576114d0611c3d565b604051601f8301601f19908116603f011681019082821181831017156114f8576114f8611c3d565b8160405283815286602085880101111561151157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561ffff8116811461149f57600080fd5b803563ffffffff8116811461149f57600080fd5b60006020828403121561156957600080fd5b813561157481611c53565b9392505050565b60006020828403121561158d57600080fd5b815161157481611c53565b6000602082840312156115aa57600080fd5b813567ffffffffffffffff8111156115c157600080fd5b8201610100818503121561157457600080fd5b6000602082840312156115e657600080fd5b61157482611531565b60006020828403121561160157600080fd5b5035919050565b6000806040838503121561161b57600080fd5b50508035926020909101359150565b60006020828403121561163c57600080fd5b61157482611543565b60006020828403121561165757600080fd5b815160ff8116811461157457600080fd5b60008151808452611680816020860160208601611b9c565b601f01601f19169290920160200192915050565b600084516116a6818460208901611b9c565b8451908301906116ba818360208901611b9c565b84519101906116cd818360208801611b9c565b0195945050505050565b600084516116e9818460208901611b9c565b602d60f81b908301908152838560018301376000930160010192835250909392505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6001600160a01b038516815260806020820181905260009061177290830186611668565b82810360408401526117848186611668565b91505060ff8316606083015295945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601390820152724665652063616e6e6f74206265203e2031302560681b604082015260600190565b6020808252601690820152751859191c995cdcc818d85b9b9bdd081899481b9d5b1b60521b604082015260600190565b602081526118456020820183516001600160a01b03169052565b6000602083015161186160408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e08301516101006118e7818501836001600160a01b03169052565b808501519150506102206101208181860152611907610240860184611668565b908601519092506101406119228682018363ffffffff169052565b860151905061016061193b8682018363ffffffff169052565b86015190506101806119528682018361ffff169052565b8601516101a08681019190915286015190506101c061197b818701836001600160a01b03169052565b86015190506101e0611997868201836001600160a01b03169052565b86015190506102006119b3868201836001600160a01b03169052565b959095015193019290925250919050565b61ffff851681526001600160a01b038481166020830152831660408201526080606082018190526000906119fa90830184611668565b9695505050505050565b6000808335601e19843603018112611a1b57600080fd5b83018035915067ffffffffffffffff821115611a3657600080fd5b602001915036819003821315611a4b57600080fd5b9250929050565b604051610100810167ffffffffffffffff81118282101715611a7657611a76611c3d565b60405290565b60008219821115611a8f57611a8f611bfb565b500190565b600082611aa357611aa3611c11565b500490565b6000816000190483118215151615611ac257611ac2611bfb565b500290565b600082821015611ad957611ad9611bfb565b500390565b60006101008236031215611af157600080fd5b611af9611a52565b823567ffffffffffffffff811115611b1057600080fd5b611b1c368286016114a4565b825250611b2b60208401611543565b6020820152611b3c60408401611543565b6040820152611b4d60608401611531565b6060820152611b5e60808401611494565b6080820152611b6f60a08401611494565b60a0820152611b8060c08401611494565b60c0820152611b9160e08401611494565b60e082015292915050565b60005b83811015611bb7578181015183820152602001611b9f565b83811115611bc6576000848401525b50505050565b6000600019821415611be057611be0611bfb565b5060010190565b600082611bf657611bf6611c11565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461111257600080fdfea264697066735822122029a7918cac32f186deb67a4c6237d399fd84a7d5588598c3863decedad4c103664736f6c63430008070033",
    "libraries": {
        "PoolSwapLibrary": "0x86aE3A70301705C6495Fd617787895C9A6238FfE"
    },
    "devdoc": {
        "kind": "dev",
        "methods": {
            "deployPool((string,uint32,uint32,uint16,address,address,address,address))": {
                "details": "Throws if pool keeper is nullThrows if deployer does not own the oracle wrapperThrows if leverage amount is invalidThrows if decimal precision is too high (i.e., greater than `MAX_DECIMALS`)",
                "params": {
                    "deploymentParameters": "Deployment parameters of the market. Some may be reconfigurable."
                },
                "returns": {
                    "_0": "Address of the created pool"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "setAutoClaim(address)": {
                "details": "Throws if provided address is nullOnly callable by the owner",
                "params": {
                    "_autoClaim": "Address of the `AutoClaim`"
                }
            },
            "setFee(uint256)": {
                "details": "This is a percentage in WAD; multiplied by 10^18 e.g. 5% is 0.05 * 10^18Throws if fee is greater than 10%",
                "params": {
                    "_fee": "The fee amount as a percentage"
                }
            },
            "setFeeReceiver(address)": {
                "details": "Only callable by the owner of this contractThis fuction does not change anything for already deployed pools, only pools deployed after the change",
                "params": {
                    "_feeReceiver": "address of fee receiver"
                }
            },
            "setMaxLeverage(uint16)": {
                "details": "Throws if provided maximum leverage is non-positiveOnly callable by the owner",
                "params": {
                    "newMaxLeverage": "Maximum leverage permitted for all pools"
                }
            },
            "setMintAndBurnFee(uint256,uint256)": {
                "details": "This is a percentage in WAD; multiplied by 10^18 e.g. 5% is 0.05 * 10^18Only callable by the owner of this contractThrows if minting fee is greater than 10%Throws if burning fee is greater than 10%",
                "params": {
                    "_burningFee": "The fee amount for burns",
                    "_mintingFee": "The fee amount for mints"
                }
            },
            "setPoolKeeper(address)": {
                "details": "Throws if provided address is nullOnly callable by the owner",
                "params": {
                    "_poolKeeper": "Address of the `PoolKeeper`"
                }
            },
            "setSecondaryFeeSplitPercent(uint256)": {
                "details": "Only callable by the owner of this contractThrows if `newFeePercent` exceeds 100",
                "params": {
                    "newFeePercent": "Proportion of fees to split"
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "title": "The pool factory contract",
        "version": 1
    },
    "userdoc": {
        "events": {
            "DeployPool(address,address,string)": {
                "notice": "Creates a notification when a pool is deployed"
            },
            "PoolKeeperChanged(address)": {
                "notice": "Creates a notification when the pool keeper changes"
            }
        },
        "kind": "user",
        "methods": {
            "deployPool((string,uint32,uint32,uint16,address,address,address,address))": {
                "notice": "Deploy a leveraged pool and its committer/pool tokens with given parameters"
            },
            "isValidPool(address)": {
                "notice": "Format: Pool address => validity"
            },
            "isValidPoolCommitter(address)": {
                "notice": "Format: PoolCommitter address => validity"
            },
            "pools(uint256)": {
                "notice": "Format: Pool counter => pool address"
            },
            "setAutoClaim(address)": {
                "notice": "Sets the address of the associated `AutoClaim` contract"
            },
            "setFee(uint256)": {
                "notice": "Set the yearly fee amount. The max yearly fee is 10%"
            },
            "setFeeReceiver(address)": {
                "notice": "Sets the primary fee receiver of deployed Leveraged pools."
            },
            "setMaxLeverage(uint16)": {
                "notice": "Sets the maximum leverage"
            },
            "setMintAndBurnFee(uint256,uint256)": {
                "notice": "Set the minting and burning fee amount. The max yearly fee is 10%"
            },
            "setPoolKeeper(address)": {
                "notice": "Sets the address of the associated `PoolKeeper` contract"
            },
            "setSecondaryFeeSplitPercent(uint256)": {
                "notice": "Sets the proportion of fees to be split to the nominated secondary fees recipient"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 110,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 11057,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "pairTokenBase",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(PoolToken)13586"
            },
            {
                "astId": 11062,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "poolBase",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(LeveragedPool)9000"
            },
            {
                "astId": 11067,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "poolKeeper",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(IPoolKeeper)15020"
            },
            {
                "astId": 11070,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "poolCommitterBase",
                "offset": 0,
                "slot": "4",
                "type": "t_contract(PoolCommitter)11035"
            },
            {
                "astId": 11074,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "autoClaim",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 11076,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "feeReceiver",
                "offset": 0,
                "slot": "6",
                "type": "t_address"
            },
            {
                "astId": 11078,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "fee",
                "offset": 0,
                "slot": "7",
                "type": "t_uint256"
            },
            {
                "astId": 11081,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "secondaryFeeSplitPercent",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
            },
            {
                "astId": 11083,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "mintingFee",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
            },
            {
                "astId": 11085,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "burningFee",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
            },
            {
                "astId": 11094,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "maxLeverage",
                "offset": 0,
                "slot": "11",
                "type": "t_uint16"
            },
            {
                "astId": 11100,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "pools",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 11103,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "numPools",
                "offset": 0,
                "slot": "13",
                "type": "t_uint256"
            },
            {
                "astId": 11109,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "isValidPool",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 11115,
                "contract": "contracts/implementation/PoolFactory.sol:PoolFactory",
                "label": "isValidPoolCommitter",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_bool)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_contract(IPoolKeeper)15020": {
                "encoding": "inplace",
                "label": "contract IPoolKeeper",
                "numberOfBytes": "20"
            },
            "t_contract(LeveragedPool)9000": {
                "encoding": "inplace",
                "label": "contract LeveragedPool",
                "numberOfBytes": "20"
            },
            "t_contract(PoolCommitter)11035": {
                "encoding": "inplace",
                "label": "contract PoolCommitter",
                "numberOfBytes": "20"
            },
            "t_contract(PoolToken)13586": {
                "encoding": "inplace",
                "label": "contract PoolToken",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
