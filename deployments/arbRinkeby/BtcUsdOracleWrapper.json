{
    "address": "0xAA60658C1E075327908e591C518e38264769c01F",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_oracle",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_deployer",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "deployer",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "int256",
                    "name": "wad",
                    "type": "int256"
                }
            ],
            "name": "fromWad",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "",
                    "type": "int256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPrice",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "_price",
                    "type": "int256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceAndMetadata",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "_price",
                    "type": "int256"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "oracle",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poll",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "",
                    "type": "int256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "scaler",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "",
                    "type": "int256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x398c4c708fa6d65bce19e30da4c9339d0be6b7ba3cfcd690735f076a01fe780f",
    "receipt": {
        "to": null,
        "from": "0xfb59B91646cd0890F3E5343384FEb746989B66C7",
        "contractAddress": "0xAA60658C1E075327908e591C518e38264769c01F",
        "transactionIndex": 0,
        "gasUsed": "4308405",
        "logsBloom": "0x
        "blockHash": "0x8ecb7f973e619e846559d41ab4587c490dd12f2e4569210bdfc9ceedcb1e1b81",
        "transactionHash": "0x398c4c708fa6d65bce19e30da4c9339d0be6b7ba3cfcd690735f076a01fe780f",
        "logs": [],
        "blockNumber": 7327018,
        "cumulativeGasUsed": "437045",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x0c9973e7a27d00e656B9f153348dA46CaD70d03d",
        "0xfb59B91646cd0890F3E5343384FEb746989B66C7"
    ],
    "solcInputHash": "2618b71259c48e264b944568d24817df",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"fromWad\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceAndMetadata\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_price\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poll\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaler\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceAndMetadata()\":{\"returns\":{\"_data\":\"The metadata. Implementations can choose what data to return here. This implementation returns the roundID\",\"_price\":\"The latest round data price\"}},\"poll()\":{\"details\":\"Spot oracles must implement but it will be a no-op\"}},\"title\":\"The oracle management contract for chainlink V3 oracles\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fromWad(int256)\":{\"notice\":\"Converts from a WAD value to a raw value based on the decimals in the feed\"},\"getPrice()\":{\"notice\":\"Returns the oracle price in WAD format\"},\"oracle()\":{\"notice\":\"The address of the feed oracle\"},\"poll()\":{\"notice\":\"Updates the underlying oracle state and returns the new price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/ChainlinkOracleWrapper.sol\":\"ChainlinkOracleWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xe8f8d98b515366730824d24269c7267eee7f0288cf737db8659acbb0c751eb53\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"contracts/implementation/ChainlinkOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title The oracle management contract for chainlink V3 oracles\\ncontract ChainlinkOracleWrapper is IOracleWrapper {\\n    // #### Globals\\n    /**\\n     * @notice The address of the feed oracle\\n     */\\n    address public override oracle;\\n    address public immutable override deployer;\\n    uint256 private constant MAX_DECIMALS = 18;\\n    int256 public scaler;\\n\\n    // #### Functions\\n    constructor(address _oracle, address _deployer) {\\n        require(_oracle != address(0), \\\"Oracle cannot be 0 address\\\");\\n        oracle = _oracle;\\n        deployer = _deployer;\\n        // reset the scaler for consistency\\n        uint8 _decimals = AggregatorV2V3Interface(oracle).decimals();\\n        require(_decimals <= MAX_DECIMALS, \\\"COA: too many decimals\\\");\\n        // scaler is always <= 10^18 and >= 1 so this cast is safe\\n        unchecked {\\n            scaler = int256(10**(MAX_DECIMALS - _decimals));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the oracle price in WAD format\\n     */\\n    function getPrice() external view override returns (int256 _price) {\\n        (_price, ) = _latestRoundData();\\n    }\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here. This implementation returns the roundID\\n     */\\n    function getPriceAndMetadata() external view override returns (int256 _price, bytes memory _data) {\\n        (int256 price, uint80 roundID) = _latestRoundData();\\n        _data = abi.encodePacked(roundID);\\n        return (price, _data);\\n    }\\n\\n    /**\\n     * @dev An internal function that gets the WAD value price and latest roundID\\n     */\\n    function _latestRoundData() internal view returns (int256 _price, uint80 _roundID) {\\n        (uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = AggregatorV2V3Interface(oracle)\\n            .latestRoundData();\\n        require(answeredInRound >= roundID, \\\"COA: Stale answer\\\");\\n        require(timeStamp != 0, \\\"COA: Round incomplete\\\");\\n        return (toWad(price), roundID);\\n    }\\n\\n    /**\\n     * @notice Converts a raw value to a WAD value based on the decimals in the feed\\n     * @dev This allows consistency for oracles used throughout the protocol\\n     *      and allows oracles to have their decimals changed without affecting\\n     *      the market itself\\n     */\\n    function toWad(int256 raw) internal view returns (int256) {\\n        return raw * scaler;\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD value to a raw value based on the decimals in the feed\\n     */\\n    function fromWad(int256 wad) external view override returns (int256) {\\n        return wad / scaler;\\n    }\\n\\n    function poll() external view override returns (int256) {\\n        (int256 _price, ) = _latestRoundData();\\n        return _price;\\n    }\\n}\\n\",\"keccak256\":\"0x227f3b22308f7ce07629033003969ee44476617b23ff3efd124c16be60dd6af6\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IOracleWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The oracle wrapper contract interface\\ninterface IOracleWrapper {\\n    function oracle() external view returns (address);\\n\\n    function deployer() external view returns (address);\\n\\n    // #### Functions\\n\\n    /**\\n     * @notice Returns the current price for the asset in question\\n     * @return The latest price\\n     */\\n    function getPrice() external view returns (int256);\\n\\n    /**\\n     * @return _price The latest round data price\\n     * @return _data The metadata. Implementations can choose what data to return here\\n     */\\n    function getPriceAndMetadata() external view returns (int256 _price, bytes memory _data);\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(int256 wad) external view returns (int256);\\n\\n    /**\\n     * @notice Updates the underlying oracle state and returns the new price\\n     * @dev Spot oracles must implement but it will be a no-op\\n     */\\n    function poll() external returns (int256);\\n}\\n\",\"keccak256\":\"0x50b2e96b7b396f02b6a4c5fc6dee20a1134771c7a6ac0587ade614b50558b4de\",\"license\":\"CC-BY-NC-ND-4.0\"}},\"version\":1}",
    "bytecode": "0x60a060405234801561001057600080fd5b5060405161071f38038061071f83398101604081905261002f916101ad565b6001600160a01b03821661008a5760405162461bcd60e51b815260206004820152601a60248201527f4f7261636c652063616e6e6f742062652030206164647265737300000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384169081178255606083901b6001600160601b0319166080526040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b1580156100ef57600080fd5b505afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012791906101e0565b905060128160ff16111561017d5760405162461bcd60e51b815260206004820152601660248201527f434f413a20746f6f206d616e7920646563696d616c73000000000000000000006044820152606401610081565b60ff16601203600a0a6001555061020a9050565b80516001600160a01b03811681146101a857600080fd5b919050565b600080604083850312156101c057600080fd5b6101c983610191565b91506101d760208401610191565b90509250929050565b6000602082840312156101f257600080fd5b815160ff8116811461020357600080fd5b9392505050565b60805160601c6104f8610227600039600060f101526104f86000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806398d5fdca1161005b57806398d5fdca146100dc578063a1175279146100e4578063d5f39488146100ec578063db6d8fcf1461011357600080fd5b80633c1e6ff514610082578063412ad1cc1461009e5780637dc0d1d0146100b1575b600080fd5b61008b60015481565b6040519081526020015b60405180910390f35b61008b6100ac366004610325565b610129565b6000546100c4906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b61008b61013f565b61008b61014f565b6100c47f000000000000000000000000000000000000000000000000000000000000000081565b61011b610161565b60405161009592919061038e565b60006001548261013991906103eb565b92915050565b60006101496101a5565b50919050565b60008061015a6101a5565b5092915050565b600060606000806101706101a5565b6040805160b09290921b6001600160b01b03191660208301528051600a818403018152602a9092019052909590945092505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101fa57600080fd5b505afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610232919061033e565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff16101561029c5760405162461bcd60e51b815260206004820152601160248201527021a7a09d1029ba30b6329030b739bbb2b960791b60448201526064015b60405180910390fd5b816102e15760405162461bcd60e51b8152602060048201526015602482015274434f413a20526f756e6420696e636f6d706c65746560581b6044820152606401610293565b6102ea836102f6565b96939550929350505050565b6000600154826101399190610427565b805169ffffffffffffffffffff8116811461032057600080fd5b919050565b60006020828403121561033757600080fd5b5035919050565b600080600080600060a0868803121561035657600080fd5b61035f86610306565b945060208601519350604086015192506060860151915061038260808701610306565b90509295509295909350565b82815260006020604081840152835180604085015260005b818110156103c2578581018301518582016060015282016103a6565b818111156103d4576000606083870101525b50601f01601f191692909201606001949350505050565b60008261040857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610422576104226104ac565b500590565b60006001600160ff1b038184138284138082168684048611161561044d5761044d6104ac565b600160ff1b600087128281168783058912161561046c5761046c6104ac565b60008712925087820587128484161615610488576104886104ac565b8785058712818416161561049e5761049e6104ac565b505050929093029392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c4e5737185b3af47d6ed7514d2e3b87e66abc91b1d03bd3c849c02aca6aecdfe64736f6c63430008070033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806398d5fdca1161005b57806398d5fdca146100dc578063a1175279146100e4578063d5f39488146100ec578063db6d8fcf1461011357600080fd5b80633c1e6ff514610082578063412ad1cc1461009e5780637dc0d1d0146100b1575b600080fd5b61008b60015481565b6040519081526020015b60405180910390f35b61008b6100ac366004610325565b610129565b6000546100c4906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b61008b61013f565b61008b61014f565b6100c47f000000000000000000000000000000000000000000000000000000000000000081565b61011b610161565b60405161009592919061038e565b60006001548261013991906103eb565b92915050565b60006101496101a5565b50919050565b60008061015a6101a5565b5092915050565b600060606000806101706101a5565b6040805160b09290921b6001600160b01b03191660208301528051600a818403018152602a9092019052909590945092505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101fa57600080fd5b505afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610232919061033e565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff16101561029c5760405162461bcd60e51b815260206004820152601160248201527021a7a09d1029ba30b6329030b739bbb2b960791b60448201526064015b60405180910390fd5b816102e15760405162461bcd60e51b8152602060048201526015602482015274434f413a20526f756e6420696e636f6d706c65746560581b6044820152606401610293565b6102ea836102f6565b96939550929350505050565b6000600154826101399190610427565b805169ffffffffffffffffffff8116811461032057600080fd5b919050565b60006020828403121561033757600080fd5b5035919050565b600080600080600060a0868803121561035657600080fd5b61035f86610306565b945060208601519350604086015192506060860151915061038260808701610306565b90509295509295909350565b82815260006020604081840152835180604085015260005b818110156103c2578581018301518582016060015282016103a6565b818111156103d4576000606083870101525b50601f01601f191692909201606001949350505050565b60008261040857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610422576104226104ac565b500590565b60006001600160ff1b038184138284138082168684048611161561044d5761044d6104ac565b600160ff1b600087128281168783058912161561046c5761046c6104ac565b60008712925087820587128484161615610488576104886104ac565b8785058712818416161561049e5761049e6104ac565b505050929093029392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c4e5737185b3af47d6ed7514d2e3b87e66abc91b1d03bd3c849c02aca6aecdfe64736f6c63430008070033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "getPriceAndMetadata()": {
                "returns": {
                    "_data": "The metadata. Implementations can choose what data to return here. This implementation returns the roundID",
                    "_price": "The latest round data price"
                }
            },
            "poll()": {
                "details": "Spot oracles must implement but it will be a no-op"
            }
        },
        "title": "The oracle management contract for chainlink V3 oracles",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fromWad(int256)": {
                "notice": "Converts from a WAD value to a raw value based on the decimals in the feed"
            },
            "getPrice()": {
                "notice": "Returns the oracle price in WAD format"
            },
            "oracle()": {
                "notice": "The address of the feed oracle"
            },
            "poll()": {
                "notice": "Updates the underlying oracle state and returns the new price"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 7406,
                "contract": "contracts/implementation/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
                "label": "oracle",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 7414,
                "contract": "contracts/implementation/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
                "label": "scaler",
                "offset": 0,
                "slot": "1",
                "type": "t_int256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_int256": {
                "encoding": "inplace",
                "label": "int256",
                "numberOfBytes": "32"
            }
        }
    }
}
