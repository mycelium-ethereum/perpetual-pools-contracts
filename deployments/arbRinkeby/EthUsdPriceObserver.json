{
    "address": "0x512a928549AB8085c0e737136b39908FE24A15D3",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "MAX_NUM_ELEMS",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "int256",
                    "name": "x",
                    "type": "int256"
                }
            ],
            "name": "add",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "capacity",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "clear",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "i",
                    "type": "uint256"
                }
            ],
            "name": "get",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "",
                    "type": "int256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getAll",
            "outputs": [
                {
                    "internalType": "int256[24]",
                    "name": "",
                    "type": "int256[24]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getWriter",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "length",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "numElems",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "observations",
            "outputs": [
                {
                    "internalType": "int256",
                    "name": "",
                    "type": "int256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_writer",
                    "type": "address"
                }
            ],
            "name": "setWriter",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xd44d8b2bebb18757ffd69366d01d070afc1ee8c984086f632b7e1d42d08e7981",
    "receipt": {
        "to": null,
        "from": "0xc18fcFFD8c9173faB1684Ec1EEE32976f780B13E",
        "contractAddress": "0x512a928549AB8085c0e737136b39908FE24A15D3",
        "transactionIndex": 0,
        "gasUsed": "7260250",
        "logsBloom": "0x
        "blockHash": "0xb72cb22a77047e739cd8bc18a713aa9f7288a329cb511554782050c7aeada36e",
        "transactionHash": "0xd44d8b2bebb18757ffd69366d01d070afc1ee8c984086f632b7e1d42d08e7981",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 8969805,
                "transactionHash": "0xd44d8b2bebb18757ffd69366d01d070afc1ee8c984086f632b7e1d42d08e7981",
                "address": "0x512a928549AB8085c0e737136b39908FE24A15D3",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x000000000000000000000000c18fcffd8c9173fab1684ec1eee32976f780b13e"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xb72cb22a77047e739cd8bc18a713aa9f7288a329cb511554782050c7aeada36e"
            }
        ],
        "blockNumber": 8969805,
        "cumulativeGasUsed": "3154750",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "solcInputHash": "4e236762a3d0441b39001e87e67104bc",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUM_ELEMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"internalType\":\"int256[24]\",\"name\":\"\",\"type\":\"int256[24]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWriter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numElems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_writer\",\"type\":\"address\"}],\"name\":\"setWriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(int256)\":{\"details\":\"If the backing array is full (i.e., `length() == capacity()`, then      it is rotated such that the oldest price observation is deletedOnly callable by the associated writer for this contract\",\"params\":{\"x\":\"Price\"},\"returns\":{\"_0\":\"Whether or not an existing price observation was rotated out\"}},\"capacity()\":{\"details\":\"`MAX_NUM_ELEMS`\",\"returns\":{\"_0\":\"Maximum number of price observations that can be stored\"}},\"clear()\":{\"details\":\"Only callable by the owner of this contract\"},\"get(uint256)\":{\"details\":\"Throws if index is out of bounds (i.e., `i >= length()`)\",\"params\":{\"i\":\"Period to retrieve the price observation of\"},\"returns\":{\"_0\":\"`i`th price observation\"}},\"getAll()\":{\"details\":\"Note that, due to this view simply returning a reference to the      backing array, it's possible for there to be null prices (i.e., 0)\",\"returns\":{\"_0\":\"Backing array of all price observations\"}},\"getWriter()\":{\"details\":\"`writer`\",\"returns\":{\"_0\":\"Address of the writer for this contract\"}},\"length()\":{\"details\":\"Should always be less than or equal to `capacity``numElems`\",\"returns\":{\"_0\":\"Current number of price observations stored\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setWriter(address)\":{\"details\":\"Only callable by the owner of this contractThrows if `_writer` is the null address\",\"params\":{\"_writer\":\"Address of the new writer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_NUM_ELEMS()\":{\"notice\":\"Maximum number of elements storable by the backing array\"},\"add(int256)\":{\"notice\":\"Adds a new price observation to the contract\"},\"capacity()\":{\"notice\":\"Returns the capacity of the backing array (i.e., the maximum          number of price observations able to be stored by this contract)\"},\"clear()\":{\"notice\":\"Resets the backing array and clears all of its stored prices\"},\"get(uint256)\":{\"notice\":\"Retrieves the `i`th price observation\"},\"getAll()\":{\"notice\":\"Retrieves all price observations\"},\"getWriter()\":{\"notice\":\"Returns the current writer of this contract\"},\"length()\":{\"notice\":\"Returns the current number of price observations stored\"},\"numElems()\":{\"notice\":\"Current number of elements stored by the backing array\"},\"observations(uint256)\":{\"notice\":\"Backing array for storing price data\"},\"setWriter(address)\":{\"notice\":\"Sets the associated writer address for this contract\"}},\"notice\":\"Stores a finite sequence of price observations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/PriceObserver.sol\":\"PriceObserver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/implementation/PriceObserver.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPriceObserver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// Stores a finite sequence of price observations\\ncontract PriceObserver is Ownable, IPriceObserver {\\n    /// Maximum number of elements storable by the backing array\\n    uint256 public constant MAX_NUM_ELEMS = 24;\\n\\n    /// Current number of elements stored by the backing array\\n    uint256 public numElems = 0;\\n\\n    /// Backing array for storing price data\\n    int256[MAX_NUM_ELEMS] public observations;\\n\\n    /// Writer -- only address allowed to add data to the backing array\\n    address writer = address(0);\\n\\n    /**\\n     * @notice Returns the capacity of the backing array (i.e., the maximum\\n     *          number of price observations able to be stored by this contract)\\n     * @return Maximum number of price observations that can be stored\\n     * @dev `MAX_NUM_ELEMS`\\n     */\\n    function capacity() public pure override returns (uint256) {\\n        return MAX_NUM_ELEMS;\\n    }\\n\\n    /**\\n     * @notice Returns the current number of price observations stored\\n     * @return Current number of price observations stored\\n     * @dev Should always be less than or equal to `capacity`\\n     * @dev `numElems`\\n     */\\n    function length() public view override returns (uint256) {\\n        return numElems;\\n    }\\n\\n    /**\\n     * @notice Retrieves the `i`th price observation\\n     * @param i Period to retrieve the price observation of\\n     * @return `i`th price observation\\n     * @dev Throws if index is out of bounds (i.e., `i >= length()`)\\n     */\\n    function get(uint256 i) public view override returns (int256) {\\n        require(i < length(), \\\"PO: Out of bounds\\\");\\n        return observations[i];\\n    }\\n\\n    /**\\n     * @notice Retrieves all price observations\\n     * @return Backing array of all price observations\\n     * @dev Note that, due to this view simply returning a reference to the\\n     *      backing array, it's possible for there to be null prices (i.e., 0)\\n     */\\n    function getAll() public view override returns (int256[24] memory) {\\n        return observations;\\n    }\\n\\n    /**\\n     * @notice Adds a new price observation to the contract\\n     * @param x Price\\n     * @return Whether or not an existing price observation was rotated out\\n     * @dev If the backing array is full (i.e., `length() == capacity()`, then\\n     *      it is rotated such that the oldest price observation is deleted\\n     * @dev Only callable by the associated writer for this contract\\n     */\\n    function add(int256 x) public override onlyWriter returns (bool) {\\n        if (full()) {\\n            leftRotateWithPad(x);\\n            return true;\\n        } else {\\n            observations[length()] = x;\\n            numElems += 1;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the associated writer address for this contract\\n     * @param _writer Address of the new writer\\n     * @dev Only callable by the owner of this contract\\n     * @dev Throws if `_writer` is the null address\\n     */\\n    function setWriter(address _writer) public onlyOwner {\\n        require(_writer != address(0), \\\"PO: Null address not allowed\\\");\\n        writer = _writer;\\n    }\\n\\n    /**\\n     * @notice Returns the current writer of this contract\\n     * @return Address of the writer for this contract\\n     * @dev `writer`\\n     */\\n    function getWriter() public view returns (address) {\\n        return writer;\\n    }\\n\\n    /**\\n     * @notice Determines whether or not the backing array is full\\n     * @return Flag indicating whether the backing array is full or not\\n     * @dev `length() == capacity()`\\n     */\\n    function full() private view returns (bool) {\\n        return length() == capacity();\\n    }\\n\\n    /**\\n     * @notice Resets the backing array and clears all of its stored prices\\n     * @dev Only callable by the owner of this contract\\n     */\\n    function clear() public onlyOwner {\\n        numElems = 0;\\n        delete observations;\\n    }\\n\\n    /**\\n     * @notice Rotates observations array to the **left** by one element and\\n     *          sets the last element of `xs` to `x`\\n     * @param x Element to \\\"rotate into\\\" observations array\\n     */\\n    function leftRotateWithPad(int256 x) private {\\n        uint256 n = length();\\n\\n        /* linear scan over the [1, n] subsequence */\\n        for (uint256 i = 1; i < n; i++) {\\n            observations[i - 1] = observations[i];\\n        }\\n\\n        /* rotate `x` into `observations` from the right (remember, we're\\n         * **left** rotating -- with padding!) */\\n        observations[n - 1] = x;\\n    }\\n\\n    /**\\n     * @notice Enforces that the caller is the associated writer of this\\n     *          contract\\n     */\\n    modifier onlyWriter() {\\n        require(msg.sender == writer, \\\"PO: Permission denied\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba9d2ccb090627c6186ea5f03feb830633fa69d037dc0970874348f4d93a08f\",\"license\":\"CC-BY-NC-ND-4.0\"},\"contracts/interfaces/IPriceObserver.sol\":{\"content\":\"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity 0.8.7;\\n\\n/// @title The price observer interface\\ninterface IPriceObserver {\\n    function capacity() external view returns (uint256);\\n\\n    function length() external view returns (uint256);\\n\\n    function get(uint256 i) external view returns (int256);\\n\\n    function getAll() external view returns (int256[24] memory);\\n\\n    function add(int256 x) external returns (bool);\\n}\\n\",\"keccak256\":\"0xba914bb590abf02108160b7245580b4f43592021b26aaa8b9fa374774098aff6\",\"license\":\"CC-BY-NC-ND-4.0\"}},\"version\":1}",
    "bytecode": "0x60806040526000600155601a80546001600160a01b031916905534801561002557600080fd5b5061002f33610034565b610084565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61078b806100936000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c5780638da5cb5b116100665780638da5cb5b1461018e5780639507d39a146101b3578063d66e5726146101c6578063f2fde38b146101d757600080fd5b8063715018a61461015a5780637b3e82181461016257806387db03b71461016b57600080fd5b806352efea6e116100c857806352efea6e1461012e57806353ed5143146101365780635cfc1a511461014b57806366a9e5011461015257600080fd5b80631f7b6d32146100ef578063252c09d71461010657806339e2052314610119575b600080fd5b6001545b6040519081526020015b60405180910390f35b6100f361011436600461065f565b6101ea565b61012c61012736600461062f565b610201565b005b61012c6102ac565b61013e6102eb565b6040516100fd9190610678565b60186100f3565b6100f3601881565b61012c610327565b6100f360015481565b61017e61017936600461065f565b61035b565b60405190151581526020016100fd565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100fd565b6100f36101c136600461065f565b610412565b601a546001600160a01b031661019b565b61012c6101e536600461062f565b61047a565b600281601881106101fa57600080fd5b0154905081565b6000546001600160a01b031633146102345760405162461bcd60e51b815260040161022b906106aa565b60405180910390fd5b6001600160a01b03811661028a5760405162461bcd60e51b815260206004820152601c60248201527f504f3a204e756c6c2061646472657373206e6f7420616c6c6f77656400000000604482015260640161022b565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260040161022b906106aa565b600060018190556102e9906002906105e8565b565b6102f36105f7565b604080516103008101918290529060029060189082845b81548152602001906001019080831161030a575050505050905090565b6000546001600160a01b031633146103515760405162461bcd60e51b815260040161022b906106aa565b6102e96000610515565b601a546000906001600160a01b031633146103b05760405162461bcd60e51b81526020600482015260156024820152741413ce8814195c9b5a5cdcda5bdb8819195b9a5959605a1b604482015260640161022b565b600154601814156103cc576103c482610565565b506001919050565b8160026103d860015490565b601881106103e8576103e861073f565b01556001805481906000906103fe9083906106df565b909155506000915061040d9050565b919050565b600061041d60015490565b821061045f5760405162461bcd60e51b8152602060048201526011602482015270504f3a204f7574206f6620626f756e647360781b604482015260640161022b565b600282601881106104725761047261073f565b015492915050565b6000546001600160a01b031633146104a45760405162461bcd60e51b815260040161022b906106aa565b6001600160a01b0381166105095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022b565b61051281610515565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061057060015490565b905060015b818110156105c357600281601881106105905761059061073f565b0154600261059f6001846106f7565b601881106105af576105af61073f565b0155806105bb8161070e565b915050610575565b508160026105d26001846106f7565b601881106105e2576105e261073f565b01555050565b50610512906018810190610616565b6040518061030001604052806018906020820280368337509192915050565b5b8082111561062b5760008155600101610617565b5090565b60006020828403121561064157600080fd5b81356001600160a01b038116811461065857600080fd5b9392505050565b60006020828403121561067157600080fd5b5035919050565b6103008101818360005b60188110156106a1578151835260209283019290910190600101610682565b50505092915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156106f2576106f2610729565b500190565b60008282101561070957610709610729565b500390565b600060001982141561072257610722610729565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122001b11b8bb1a87e15606bf0d3580fb95e43abba29e7607095ff9ec92344c4bd0164736f6c63430008070033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c5780638da5cb5b116100665780638da5cb5b1461018e5780639507d39a146101b3578063d66e5726146101c6578063f2fde38b146101d757600080fd5b8063715018a61461015a5780637b3e82181461016257806387db03b71461016b57600080fd5b806352efea6e116100c857806352efea6e1461012e57806353ed5143146101365780635cfc1a511461014b57806366a9e5011461015257600080fd5b80631f7b6d32146100ef578063252c09d71461010657806339e2052314610119575b600080fd5b6001545b6040519081526020015b60405180910390f35b6100f361011436600461065f565b6101ea565b61012c61012736600461062f565b610201565b005b61012c6102ac565b61013e6102eb565b6040516100fd9190610678565b60186100f3565b6100f3601881565b61012c610327565b6100f360015481565b61017e61017936600461065f565b61035b565b60405190151581526020016100fd565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100fd565b6100f36101c136600461065f565b610412565b601a546001600160a01b031661019b565b61012c6101e536600461062f565b61047a565b600281601881106101fa57600080fd5b0154905081565b6000546001600160a01b031633146102345760405162461bcd60e51b815260040161022b906106aa565b60405180910390fd5b6001600160a01b03811661028a5760405162461bcd60e51b815260206004820152601c60248201527f504f3a204e756c6c2061646472657373206e6f7420616c6c6f77656400000000604482015260640161022b565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260040161022b906106aa565b600060018190556102e9906002906105e8565b565b6102f36105f7565b604080516103008101918290529060029060189082845b81548152602001906001019080831161030a575050505050905090565b6000546001600160a01b031633146103515760405162461bcd60e51b815260040161022b906106aa565b6102e96000610515565b601a546000906001600160a01b031633146103b05760405162461bcd60e51b81526020600482015260156024820152741413ce8814195c9b5a5cdcda5bdb8819195b9a5959605a1b604482015260640161022b565b600154601814156103cc576103c482610565565b506001919050565b8160026103d860015490565b601881106103e8576103e861073f565b01556001805481906000906103fe9083906106df565b909155506000915061040d9050565b919050565b600061041d60015490565b821061045f5760405162461bcd60e51b8152602060048201526011602482015270504f3a204f7574206f6620626f756e647360781b604482015260640161022b565b600282601881106104725761047261073f565b015492915050565b6000546001600160a01b031633146104a45760405162461bcd60e51b815260040161022b906106aa565b6001600160a01b0381166105095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022b565b61051281610515565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061057060015490565b905060015b818110156105c357600281601881106105905761059061073f565b0154600261059f6001846106f7565b601881106105af576105af61073f565b0155806105bb8161070e565b915050610575565b508160026105d26001846106f7565b601881106105e2576105e261073f565b01555050565b50610512906018810190610616565b6040518061030001604052806018906020820280368337509192915050565b5b8082111561062b5760008155600101610617565b5090565b60006020828403121561064157600080fd5b81356001600160a01b038116811461065857600080fd5b9392505050565b60006020828403121561067157600080fd5b5035919050565b6103008101818360005b60188110156106a1578151835260209283019290910190600101610682565b50505092915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156106f2576106f2610729565b500190565b60008282101561070957610709610729565b500390565b600060001982141561072257610722610729565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122001b11b8bb1a87e15606bf0d3580fb95e43abba29e7607095ff9ec92344c4bd0164736f6c63430008070033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "add(int256)": {
                "details": "If the backing array is full (i.e., `length() == capacity()`, then      it is rotated such that the oldest price observation is deletedOnly callable by the associated writer for this contract",
                "params": {
                    "x": "Price"
                },
                "returns": {
                    "_0": "Whether or not an existing price observation was rotated out"
                }
            },
            "capacity()": {
                "details": "`MAX_NUM_ELEMS`",
                "returns": {
                    "_0": "Maximum number of price observations that can be stored"
                }
            },
            "clear()": {
                "details": "Only callable by the owner of this contract"
            },
            "get(uint256)": {
                "details": "Throws if index is out of bounds (i.e., `i >= length()`)",
                "params": {
                    "i": "Period to retrieve the price observation of"
                },
                "returns": {
                    "_0": "`i`th price observation"
                }
            },
            "getAll()": {
                "details": "Note that, due to this view simply returning a reference to the      backing array, it's possible for there to be null prices (i.e., 0)",
                "returns": {
                    "_0": "Backing array of all price observations"
                }
            },
            "getWriter()": {
                "details": "`writer`",
                "returns": {
                    "_0": "Address of the writer for this contract"
                }
            },
            "length()": {
                "details": "Should always be less than or equal to `capacity``numElems`",
                "returns": {
                    "_0": "Current number of price observations stored"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "setWriter(address)": {
                "details": "Only callable by the owner of this contractThrows if `_writer` is the null address",
                "params": {
                    "_writer": "Address of the new writer"
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "MAX_NUM_ELEMS()": {
                "notice": "Maximum number of elements storable by the backing array"
            },
            "add(int256)": {
                "notice": "Adds a new price observation to the contract"
            },
            "capacity()": {
                "notice": "Returns the capacity of the backing array (i.e., the maximum          number of price observations able to be stored by this contract)"
            },
            "clear()": {
                "notice": "Resets the backing array and clears all of its stored prices"
            },
            "get(uint256)": {
                "notice": "Retrieves the `i`th price observation"
            },
            "getAll()": {
                "notice": "Retrieves all price observations"
            },
            "getWriter()": {
                "notice": "Returns the current writer of this contract"
            },
            "length()": {
                "notice": "Returns the current number of price observations stored"
            },
            "numElems()": {
                "notice": "Current number of elements stored by the backing array"
            },
            "observations(uint256)": {
                "notice": "Backing array for storing price data"
            },
            "setWriter(address)": {
                "notice": "Sets the associated writer address for this contract"
            }
        },
        "notice": "Stores a finite sequence of price observations",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 110,
                "contract": "contracts/implementation/PriceObserver.sol:PriceObserver",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 14401,
                "contract": "contracts/implementation/PriceObserver.sol:PriceObserver",
                "label": "numElems",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 14406,
                "contract": "contracts/implementation/PriceObserver.sol:PriceObserver",
                "label": "observations",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_int256)24_storage"
            },
            {
                "astId": 14413,
                "contract": "contracts/implementation/PriceObserver.sol:PriceObserver",
                "label": "writer",
                "offset": 0,
                "slot": "26",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_int256)24_storage": {
                "base": "t_int256",
                "encoding": "inplace",
                "label": "int256[24]",
                "numberOfBytes": "768"
            },
            "t_int256": {
                "encoding": "inplace",
                "label": "int256",
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
